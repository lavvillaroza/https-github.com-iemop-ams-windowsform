'***************************************************************************
'Copyright 2011: Philippine Electricity Market Corporation(PEMC)
'Class Name:             WESMBillHelper
'Orginal Author:         Vladimir E.Espiritu
'File Creation Date:     April 01, 2011
'Development Group:      Software Development and Support Division
'Description:            Geteway class from presentation layer into data access layer. It is where the 
'                        developers insert the scripts to be executed in DAL.
'Arguments/Parameters:  
'Files/Database Tables:  
'Return Value:
'Error codes/Exceptions:
'
'****************************************************************************
' Revision History
'	Date Modified		    Programmer		            Description
'   April 01, 2011          Vladimir E.Espiritu         Class initialization
'   September 01, 2011      Vladimir E.Espiritu         Added GetCalendarBP() and GetParticipantLineage() functions
'   September 02, 2011      Juan Carlo L. Panopio       Added InsertLog() method
'   September 13, 2011      Juan Carlo L. Panopio       Added NumConvert() function
'   September 14, 2011      Juan Carlo L. Panopio       Added GetWESMBillCharges(), GetAccountingCodes(), GetAccountingCode()
'                                                       GetChargeIDCodes(), GetChargeId() and srchAccountingCode() functions
'   September 15, 2011      Juan Carlo L. Panopio       Added SaveAccountingCode(), SaveChargeIdCode(), delChargeID()  and delAC() functions
'   September 19, 2011      Vladimir E. Espiritu        Added GetWESMBillFromWBSS() and GetWESMBillReport() functions
'   September 20, 2011      Vladimir E. Espiritu        Added GetWBSSBillingPeriod(), GetWBSSWESMBillSettlementRun and GetAMWESMBillSettlementRun functions
'   September 21, 2011      Vladimir E. Espiritu        Added GetAMWESMBillPeriod, GetWESMBillCount() and GetAMWESMBillDueDates functions
'   September 22, 2011      Vladimir E. Espiritu        Added SaveWESMBill(), IsWESMBillsAllPosted(), GetWESMBillReport, GetSequenceID()
'                                                       and GetRevisionNumber() functions
'   September 23, 2011      Vladimir E. Espiritu        Changed to Enum all methods with referrence of E,EV,MF and MFV
'   September 28, 2011      Vladimir E. Espiritu        Edited SaveWESMBill() function
'   October 03, 2011        Vladimir E. Espiritu        Added GetWESMBillForOffsetting(), GetBillingPeriodForOffsetting() and SaveP2PC2COffseting() functions
'   October 04, 2011        Vladimir E. Espiritu        Added GetDebitCreditMemoMain(), GetDebitCreditMemoDetails, GetChargeTypeDebitCreditMemo() and
'                                                       GetParticipantsDebitCreditMemo functions
'   October 06, 2011        Vladimir E. Espiritu        Added saving of Journal Voucher upon saving into AM_WESM_BILL_GP_POSTED
'	November 24, 2011       Vladimir E. Espiritu        Added GetParticipantLineage function
'   November 26, 2011       Vladimir E. Espiritu        Added GetParentChildMapping function
'   November 30, 2011       Vladimir E. Espiritu        Deleted GetParentChildMapping function
'   December 05, 2011       Vladimir E. Espiritu        Revised GetWBSSBillingPeriod function
'   December 05, 2011       Vladimir E. Espiritu        Added new parameters for GetWESMBillReport
'   January 11, 2012        Vladimir E. Espiritu        Added GetCollectionAllocation function
'   January 12, 2012        Vladimir E. Espiritu        Added GetDailyInterestRate and SaveDailyInterestRate functions
'   January 19, 2012        Vladimir E. Espiritu        Added SaveBillParticipants function
'   February 22, 2012       Vladimir E. Espiritu        Changed Bill Participants into AM Participants in GetWESMBillReport
'   February 28, 2012       Vladimir E. Espiritu        Revised GetWESMBillForOffsetting where offset_no changed into batch_code
'   March 05, 2012          Vladimir E. Espiritu        Added new function GetWESMBillLastNumber()
'   March 15, 2012          Vladimir E. Espiritu        Edited SaveWESMBill
'   April 25, 2012          Vladimir E. Espiritu        Added GetCollectionMonitoringNotPosted         
'   May 22, 2012            Vladimir E. Espiritu        Changed CollectionDate into AllocationDate in where condition of GetCollections
'   May 23, 2012            Vladimir E. Espiritu        Added new function for GetCollectionAllocation
'   June 20, 2012           Vladimir E. Espiritu        Revised saving of automatic collection allocation
'   July 06, 2012           Vladimir E. Espiritu        Edited saving/getter for AM Participants
'   July 09, 2012           Vladimir E. Espiritu        Edited SaveWESMBill, revised saving of WESM GP Posted
'   July 25, 2012           Vladimir E. Espiritu        Added new overloading function for GetCollections and GetCollectionMonitoring
'   August 16, 2012         Vladimir E. Espiritu        Added new function for GetNSSMonitoringMain and GetNSSMonitoringDetails
'   August 17, 2012         Vladimir E. Espiritu        Added new function for GetNSSSummary
'   August 26, 2012         Vladimir E. Espiritu        Edited SaveCollectionAllocations
'   October 09, 2012        Vladimir E. Espiritu        Added PostDailyCollections function
'   November 12, 2012       Vladimir E. Espiritu        Added SavePrudentialReplenishmentTemporary function
'   November 14, 2012       Vladimir E. Espiritu        Added SavePrudentialInterestTemporary, SavePrudentialTransferInterestTemporary functions
'   December 02, 2012       Vladimir E. Espiritu        Added GetAdminSettings and SaveAdminSettings functions
'   January 13, 2013        Vladimir E. Espiritu        Added SaveManualDMCM function
'   February 07, 2013       Vladimir E. Espiritu        Added GetPrudentialMarginCallMainSummary function
'   February 08, 2013       Vladimir E. Espiritu        Added GetPrudentialDrawdown function
'   March 03, 2013          Vladimir E. Espiritu        Added GetWESMInvoicesForNSSAndNSSRA
'   March 08, 2013          Vladimir E. Espiritu        Added GetCollectionByORNo function
'   March 31, 2013          Vladimir E. Espiritu        Added SaveSettlementNoticeBeginningBalance and GetWESMBillSummaryWithEndingBalance functions
'   August 05, 2013         Vladimir E. Espiritu        Added function which untag collection and untag drawdown
'   August 7, 2015          Jonathan M. Saura           Added new methods for add/update/query Transaction Interest Earnd 

Option Explicit On
Option Strict On

Imports AccountsManagementObjects
Imports AccountsManagementDataAccess
Imports System.Data
Imports System.Net
Imports System.Text
Imports System.IO
Imports Excel = Microsoft.Office.Interop.Excel

Public Class WESMBillHelper

#Region "Single Instance Code"

    Private Shared m_Instance As WESMBillHelper = Nothing
    Public Shared Function GetInstance() As WESMBillHelper
        If m_Instance Is Nothing Then
            m_Instance = New WESMBillHelper()
        End If
        Return m_Instance
    End Function

    Private Sub New()
        'Get the current instance of the dal
        Me._DataAccess = DAL.GetInstance()
        Me._BFactory = BusinessFactory.GetInstance()
    End Sub


    Private _DataAccess As DAL
    Public ReadOnly Property DataAccess() As DAL
        Get
            Return Me._DataAccess
        End Get
    End Property

    Private _ConnectionString As String
    Public Property ConnectionString() As String
        Get
            Return _ConnectionString
        End Get
        Set(ByVal value As String)
            Me._DataAccess.ConnectionString = value
            Me._ConnectionString = value
        End Set
    End Property

    Private _UserName As String
    Public Property UserName() As String
        Get
            Return _UserName
        End Get
        Set(ByVal value As String)
            _UserName = value
        End Set
    End Property

    Private _BFactory As BusinessFactory
    Public Property BFactory() As BusinessFactory
        Get
            Return _BFactory
        End Get
        Set(ByVal value As BusinessFactory)
            _BFactory = value
        End Set
    End Property
#End Region

    Public Function VerConnection() As Boolean
        Return Me._DataAccess.VerifyConnection(Me.ConnectionString)
    End Function

#Region "Get Calendar Billing Period"
    Public Function GetCalendarBP() As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT billing_period, start_date, end_date, billing_date FROM AM_CALENDAR_BP ORDER BY billing_period DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCalendarBP(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCalendarBP(ByVal BillingDate As Date) As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT billing_period, start_date, end_date, billing_date FROM AM_CALENDAR_BP " & _
                                "WHERE start_date <= TO_DATE('" & BillingDate & "','MM/DD/YYYY') " & _
                                "AND end_date >= TO_DATE('" & BillingDate & "','MM/DD/YYYY') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCalendarBP(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCalendarBP(ByVal reader As IDataReader) As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)

        Try
            While reader.Read()
                With reader
                    result.Add(New CalendarBillingPeriod( _
                                   CInt(.Item("BILLING_PERIOD")), _
                                   CDate(.Item("START_DATE")), _
                                   CDate(.Item("END_DATE")), _
                                   CDate(.Item("BILLING_DATE"))))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Accounting Codes"
    Public Function GetAccountingCodes() As List(Of AccountingCode)
        Dim result As New List(Of AccountingCode)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_ACCOUNTING_CODE WHERE status = 1 ORDER BY description"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAccountingCodes(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAccountingCodes(ByVal dr As IDataReader) As List(Of AccountingCode)
        Dim result As New List(Of AccountingCode)

        Try
            While dr.Read()
                With dr
                    Dim item As New AccountingCode
                    item.AccountCode = CStr(.Item("ACCT_CODE"))
                    item.Description = CStr(.Item("DESCRIPTION"))
                    item.Status = CInt(.Item("STATUS"))
                    item.DateCommit = CDate(FormatDateTime(CDate(.Item("DATE_COMMITTED")), DateFormat.ShortDate))
                    item.updatedBy = CStr(.Item("UPDATED_BY"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Accounting Code"
    Public Function GetAccountingCode(ByVal acctcode As String) As AccountingCode
        Dim result As New AccountingCode
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_ACCOUNTING_CODE " & _
                                "WHERE UPPER(ACCT_CODE) = '" & UCase(acctcode) & "' ORDER BY ACCT_CODE ASC"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            result = Me.GetAccountingCode(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw
        End Try

        Return result
    End Function

    Private Function GetAccountingCode(ByVal dr As IDataReader) As AccountingCode
        Dim result As New AccountingCode

        Try
            While dr.Read()
                With dr
                    result.AccountCode = CStr(.Item("ACCT_CODE"))
                    result.Description = CStr(.Item("DESCRIPTION"))
                    result.Status = CInt(.Item("STATUS"))
                    result.DateCommit = CDate(.Item("DATE_COMMITTED"))
                    result.updatedBy = CStr(.Item("UPDATED_BY"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get ChargeId Codes"
    Public Function GetChargeIDCodes() As List(Of ChargeId)
        Dim result As New List(Of ChargeId)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_CHARGE_ID_LIB WHERE status = 1 ORDER BY CHARGE_ID ASC"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetChargeIDCodes(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetChargeIdCodes(ByVal dr As IDataReader) As List(Of ChargeId)
        Dim result As New List(Of ChargeId)
        Dim ChargeType As String
        Try
            While dr.Read()
                With dr
                    Dim item As New ChargeId

                    item.ChargeId = CStr(.Item("CHARGE_ID"))
                    ChargeType = .Item("CHARGE_ID_TYPE").ToString
                    item.cIDType = CType(CStr(System.Enum.Parse(GetType(EnumChargeType), ChargeType)), EnumChargeType)
                    item.Description = CStr(.Item("DESCRIPTION"))
                    item.Status = CInt(.Item("STATUS"))
                    item.updBy = CStr(.Item("UPDATED_BY"))
                    item.updDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.ShortDate))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get ChargeId Code"
    Public Function GetChargeId(ByVal chId As String) As ChargeId
        Dim result As ChargeId
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_CHARGE_ID_LIB WHERE CHARGE_ID = '" & UCase(chId) & "' ORDER BY CHARGE_ID ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            result = Me.GetChargeId(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetChargeId(ByVal dr As IDataReader) As ChargeId
        Dim result As New ChargeId

        Try
            While dr.Read()
                With dr
                    result.ChargeId = CStr(.Item("CHARGE_ID"))
                    result.cIDType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_ID_TYPE"))), EnumChargeType)
                    result.Description = CStr(.Item("DESCRIPTION"))
                    result.Status = CInt(.Item("STATUS"))
                    result.updBy = CStr(.Item("UPDATED_BY"))
                    result.updDate = CDate(.Item("UPDATED_DATE"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "BIR Alphanumeric Tax Code"
    Public Sub DeleteBIRATC(ByVal Item As BIRAlphanumericTaxCode)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        Dim ListSQL As New List(Of String)
        Try
            
            SQL = "DELETE FROM AM_BIR_ATC WHERE ATC_NAME = '" & Item.ATCName & "'"
            ListSQL.Add(SQL)
            report = Me.DataAccess.ExecuteSaveQuery(ListSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub AddBIRATC(ByVal Item As BIRAlphanumericTaxCode)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        Dim ListSQL As New List(Of String)
        Try
            
            SQL = "INSERT INTO AM_BIR_ATC(ATC_NAME, ATC_DESC, ATC_RATE, UPDATED_DATE, UPDATED_BY) " & vbNewLine _
                & "VALUES ('" & Item.ATCName & "', '" & Item.ATCDescription & "', " & Item.ATCRate & ", SYSDATE, '" & Item.UpdatedBy & "')"
            ListSQL.Add(SQL)
            report = Me.DataAccess.ExecuteSaveQuery(ListSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub UPDateBIRATC(ByVal Item As BIRAlphanumericTaxCode)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        Dim ListSQL As New List(Of String)
        Try
            
            SQL = "UPDATE AM_BIR_ATC " & _
                    "SET ATC_DESC = '" & Item.ATCDescription & "', " & _
                    "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                    "WHERE ATC_NAME = '" & Item.ATCName & "'"
            ListSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(ListSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Function VerifyBIRATC(ByVal oATCName As String) As List(Of BIRAlphanumericTaxCode)
        Dim result As New List(Of BIRAlphanumericTaxCode)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_BIR_ATC WHERE ATC_NAME = '" & oATCName.Trim.ToString & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.VerifyBIRATC(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Private Function VerifyBIRATC(ByVal dr As IDataReader) As List(Of BIRAlphanumericTaxCode)
        Dim result As New List(Of BIRAlphanumericTaxCode)

        Try
            While dr.Read()
                With dr
                    Dim item As New BIRAlphanumericTaxCode
                    item.ATCName = CStr(.Item("ATC_NAME"))
                    item.ATCDescription = CStr(.Item("ATC_DESC"))
                    item.ATCRate = CDec(.Item("ATC_RATE"))
                    item.UpdateDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetBIRATC() As List(Of BIRAlphanumericTaxCode)
        Dim result As New List(Of BIRAlphanumericTaxCode)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_BIR_ATC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.srchATC(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function srchBIRATC(ByVal ATC As String) As List(Of BIRAlphanumericTaxCode)
        Dim result As New List(Of BIRAlphanumericTaxCode)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_BIR_ATC WHERE ATC_NAME LIKE'" & Replace(ATC, "'", "'") & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.srchATC(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Private Function srchATC(ByVal dr As IDataReader) As List(Of BIRAlphanumericTaxCode)
        Dim result As New List(Of BIRAlphanumericTaxCode)

        Try
            While dr.Read()
                With dr
                    Dim item As New BIRAlphanumericTaxCode
                    item.ATCName = CStr(.Item("ATC_NAME"))
                    item.ATCDescription = CStr(.Item("ATC_DESC"))
                    item.ATCRate = CDec(.Item("ATC_RATE"))
                    item.UpdateDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Search Accounting Code"
    Public Function srchAccountingCode(ByVal ACCT As String) As List(Of AccountingCode)
        Dim result As New List(Of AccountingCode)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_ACCOUNTING_CODE WHERE ACCT_CODE LIKE'" & Replace(ACCT, "'", "'") & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.srchAccountingCode(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function srchAccountingCode(ByVal dr As IDataReader) As List(Of AccountingCode)
        Dim result As New List(Of AccountingCode)

        Try
            While dr.Read()
                With dr
                    Dim item As New AccountingCode

                    item.AccountCode = CStr(.Item("ACCT_CODE"))
                    item.Description = CStr(.Item("DESCRIPTION"))
                    item.Status = CInt(.Item("STATUS"))
                    item.DateCommit = CDate(.Item("DATE_COMMITTED"))
                    item.updatedBy = CStr(.Item("UPDATED_BY"))

                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Search ChargeID Code"
    Public Function srchLikeGetChargeID(ByVal chId As String) As List(Of ChargeId)
        Dim result As New List(Of ChargeId)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_CHARGE_ID_LIB WHERE CHARGE_ID like '" & Replace(UCase(chId), "'", "'") & "' ORDER BY CHARGE_ID ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.srchGetChargeID(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function srchGetChargeID(ByVal chId As String) As List(Of ChargeId)
        Dim result As New List(Of ChargeId)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_CHARGE_ID_LIB WHERE CHARGE_ID = '" & Replace(UCase(chId), "'", "'") & "' ORDER BY CHARGE_ID ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.srchGetChargeID(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function srchGetChargeId(ByVal dr As IDataReader) As List(Of ChargeId)
        Dim result As New List(Of ChargeId)
        Dim ChargeType As String
        Try
            While dr.Read()
                With dr
                    Dim item As New ChargeId

                    item.ChargeId = CStr(.Item("CHARGE_ID"))
                    ChargeType = .Item("CHARGE_ID_TYPE").ToString
                    ChargeType = CStr(System.Enum.Parse(GetType(EnumChargeType), ChargeType).ToString)
                    item.cIDType = CType(CStr(System.Enum.Parse(GetType(EnumChargeType), ChargeType)), EnumChargeType)
                    item.Description = CStr(.Item("DESCRIPTION"))
                    item.Status = CInt(.Item("STATUS"))
                    item.updBy = CStr(.Item("UPDATED_BY"))
                    item.updDate = CDate(.Item("UPDATED_DATE"))

                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Revision Number"
    Public Function GetRevisionNumber(ByVal SQL As String) As Integer
        Dim report As New DataReport()
        Dim result As Integer = 0

        Try
            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Try
                With report.ReturnedIDatareader
                    While .Read
                        If IsDBNull(.Item("REVISION")) Then
                            result = 0
                        Else
                            result = CInt(.Item("REVISION")) + 1
                        End If
                    End While
                End With
            Catch ex As Exception
                Throw New ApplicationException(ex.Message)
            Finally
                If Not report.ReturnedIDatareader.IsClosed Then
                    report.ReturnedIDatareader.Close()
                End If
            End Try

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Report"
    Public Function GetWESMBillReport(ByVal ChargeType As EnumChargeType, ByVal BillingPeriod As Integer) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String
        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal SettlementRun As String, ByVal ChargeType As EnumChargeType, ByVal BillingPeriod As Integer) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String
        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                            "AND A.STL_RUN = '" & SettlementRun & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                             "AND A.STL_RUN = '" & SettlementRun & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal ChargeType As EnumChargeType, ByVal BillingPeriod As Integer, _
                                      ByVal SettlementRun As String, ByVal IDNumber As String) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String
        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                            "AND A.STL_RUN = '" & SettlementRun & "' AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                            "AND A.STL_RUN = '" & SettlementRun & "' AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal ChargeType As EnumChargeType, ByVal BillingPeriod As Integer, _
                                      ByVal IDNumber As String) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String
        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                            "AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.BILLING_PERIOD = " & BillingPeriod & " " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                            "AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal ChargeType As EnumChargeType, ByVal StartDate As Date, ByVal EndDate As Date) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String
        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                            "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal SettlementRun As String, ByVal ChargeType As EnumChargeType, _
                                      ByVal StartDate As Date, ByVal EndDate As Date) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String
        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                            "AND A.STL_RUN = '" & SettlementRun & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                            "AND A.STL_RUN = '" & SettlementRun & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal ChargeType As EnumChargeType, ByVal StartDate As Date, ByVal EndDate As Date, _
                                      ByVal IDNumber As String) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String

        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                            "AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                            "AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                       "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal ChargeType As EnumChargeType, ByVal StartDate As Date, ByVal EndDate As Date, _
                                      ByVal SettlementRun As String, ByVal IDNumber As String) As DataTable
        Dim report As New DataReport()
        Dim result As New DataTable
        Dim SQL As String
        Try
            
            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.E.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.EV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                            "AND A.STL_RUN = '" & SettlementRun & "' AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            Else
                SQL = "SELECT B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',BATCH_CODE,' ')) as ENERGY_MF_BCode, " & _
                             "MAX(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',BATCH_CODE,' ')) as VAT_BCODE, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MF.ToString() & "',AMOUNT,0)) AS ENERGY_MF, " & _
                             "SUM(DECODE(CHARGE_TYPE,'" & EnumChargeType.MFV.ToString() & "',AMOUNT,0)) AS VAT, " & _
                             "MAX(A.UPDATED_DATE) AS UPDATED_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "FROM AM_WESM_BILL A, AM_PARTICIPANTS B " & _
                      "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                            "AND A.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                             "AND A.STL_RUN = '" & SettlementRun & "' AND A.ID_NUMBER = '" & IDNumber & "' " & _
                      "GROUP BY B.PARTICIPANT_ID, A.INVOICE_NO, A.INVOICE_DATE, A.DUE_DATE, A.STL_RUN, A.UPDATED_BY " & _
                      "ORDER BY A.INVOICE_NO, B.PARTICIPANT_ID"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillReport(ByVal dr As IDataReader) As DataTable
        Dim result As New DataTable

        With result.Columns
            .Add("INVOICE_NO", GetType(String))
            .Add("PARTICIPANT_ID", GetType(String))
            .Add("INVOICE_DATE", GetType(String))
            .Add("DUE_DATE", GetType(String))
            .Add("STL_RUN", GetType(String))
            .Add("ENERGY_MF_BCODE", GetType(String))
            .Add("ENERGY_MF", GetType(Decimal))
            .Add("VAT_BCODE", GetType(String))
            .Add("VAT", GetType(Decimal))
            .Add("TOTAL", GetType(Decimal))
            .Add("UPDATED_BY", GetType(String))
            .Add("UPDATED_DATE", GetType(Date))
        End With
        result.TableName = "WESMBillReport"
        result.AcceptChanges()

        Try
            While dr.Read()
                With dr
                    Dim row As DataRow = result.NewRow()

                    row("INVOICE_NO") = CStr(.Item("INVOICE_NO"))
                    row("PARTICIPANT_ID") = CStr(.Item("PARTICIPANT_ID"))
                    row("INVOICE_DATE") = CDate(.Item("INVOICE_DATE")).ToString("MM/dd/yyyy")
                    row("DUE_DATE") = CDate(.Item("DUE_DATE")).ToString("MM/dd/yyyy")
                    row("STL_RUN") = CStr(.Item("STL_RUN"))
                    row("ENERGY_MF_BCODE") = CStr(.Item("ENERGY_MF_BCODE"))
                    row("ENERGY_MF") = CStr(.Item("ENERGY_MF"))
                    row("VAT_BCODE") = CStr(.Item("VAT_BCODE"))
                    row("VAT") = CDec(.Item("VAT"))
                    row("TOTAL") = CDec(.Item("ENERGY_MF")) + CDec(.Item("VAT"))
                    row("UPDATED_BY") = CStr(.Item("UPDATED_BY"))
                    row("UPDATED_DATE") = CDate(.Item("UPDATED_DATE"))

                    result.Rows.Add(row)
                End With
            End While

            result.AcceptChanges()
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get Settlement Runs in WBSS WESM Bill"
    Public Function GetWBSSWESMBillSettlementRun(ByVal billingperiod As Integer) As List(Of String)
        Dim result As New List(Of String)
        Dim report As New DataReport
        Dim params(2) As IDataParameter

        Try
            
            Dim SQL As String = "SELECT stl_run FROM ( " & _
                                        "SELECT DISTINCT a.stl_run FROM BILL_INVOICE_FINAL a, BILL_COST_ITEMS_INV_FINAL b " & _
                                        "WHERE a.invoice_id = b.invoice_num AND a.billing_period = " & billingperiod & " AND a.stl_run LIKE 'F%' " & _
                                        "UNION " & _
                                        "SELECT DISTINCT a.stl_run FROM BILL_INVOICE_MF_FINAL a, BILL_COST_ITEMS_INV_FINAL_MF b " & _
                                        "WHERE a.invoice_id = b.invoice_num AND a.billing_period = " & billingperiod & " AND a.stl_run LIKE 'F%') " & _
                                "ORDER BY stl_run"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWBSSWESMBillSettlementRun(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetWBSSWESMBillSettlementRun(ByVal reader As IDataReader) As List(Of String)
        Dim result As New List(Of String)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(.Item("STL_RUN").ToString())
                End With
            End While

            result.TrimExcess()
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get Settlement Runs in AM WESM Bill"
    Public Function GetAMWESMBillSettlementRun(ByVal billingperiod As Integer, ByVal WESMBillType As String) As List(Of String)
        Dim result As New List(Of String)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If WESMBillType = "INV" Then
                SQL = "SELECT DISTINCT STL_RUN FROM AM_WESM_BILL " & _
                      "WHERE BILLING_PERIOD = " & billingperiod & " AND " & _
                      "(CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                      "ORDER BY STL_RUN"
            Else
                SQL = "SELECT DISTINCT STL_RUN FROM AM_WESM_BILL " & _
                      "WHERE BILLING_PERIOD = " & billingperiod & " AND " & _
                      "(CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                      "ORDER BY STL_RUN"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWBSSWESMBillSettlementRun(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAMWESMBillSettlementRun(ByVal reader As IDataReader) As List(Of String)
        Dim result As New List(Of String)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(.Item("STL_RUN").ToString())
                End With
            End While

            result.TrimExcess()
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get BilingPeriod in AM WESM Bill"
    Public Function GetAMWESMBillPeriod(ByVal WESMBillType As String) As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If WESMBillType = "INV" Then
                SQL = "SELECT DISTINCT A.BILLING_PERIOD, B.START_DATE, B.END_DATE, B.BILLING_DATE " & _
                      "FROM AM_WESM_BILL A, AM_CALENDAR_BP B " & _
                      "WHERE A.BILLING_PERIOD = B.BILLING_PERIOD " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') " & _
                      "ORDER BY A.BILLING_PERIOD DESC"
            Else
                SQL = "SELECT DISTINCT A.BILLING_PERIOD, B.START_DATE, B.END_DATE, B.BILLING_DATE " & _
                      "FROM AM_WESM_BILL A, AM_CALENDAR_BP B " & _
                      "WHERE A.BILLING_PERIOD = B.BILLING_PERIOD " & _
                            "AND (A.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR A.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') " & _
                      "ORDER BY A.BILLING_PERIOD DESC"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMWESMBillPeriod(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetAMWESMBillPeriod() As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT A.BILLING_PERIOD, B.START_DATE, B.END_DATE, B.BILLING_DATE " & _
                  "FROM AM_WESM_BILL A, AM_CALENDAR_BP B " & _
                  "WHERE A.BILLING_PERIOD = B.BILLING_PERIOD " & _
                  "ORDER BY A.BILLING_PERIOD DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMWESMBillPeriod(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAMWESMBillPeriod(ByVal reader As IDataReader) As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)

        Try
            While reader.Read()
                With reader
                    result.Add(New CalendarBillingPeriod( _
                                   CInt(.Item("BILLING_PERIOD")), _
                                   CDate(.Item("START_DATE")), _
                                   CDate(.Item("END_DATE")), _
                                   CDate(.Item("BILLING_DATE"))))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Billing Period in WBSS"
    Public Function GetWBSSBillingPeriod(ByVal chargeType As EnumChargeType) As Dictionary(Of Integer, List(Of String))
        Dim result As New Dictionary(Of Integer, List(Of String))
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If chargeType = EnumChargeType.E Or chargeType = EnumChargeType.EV Then
                SQL = "SELECT DISTINCT a.billing_period, a.stl_run FROM BILL_INVOICE_FINAL a, BILL_COST_ITEMS_INV_FINAL b " & _
                      "WHERE a.invoice_id = b.invoice_num  AND a.stl_run LIKE 'F%' " & _
                      "ORDER BY a.billing_period DESC"
            Else
                SQL = "SELECT DISTINCT a.billing_period, a.stl_run FROM BILL_INVOICE_MF_FINAL a, BILL_COST_ITEMS_INV_FINAL_MF b " & _
                      "WHERE a.invoice_id = b.invoice_num  AND a.stl_run LIKE 'F%' " & _
                      "ORDER BY a.billing_period DESC"
            End If



            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWBSSBillingPeriod(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetWBSSBillingPeriod(ByVal reader As IDataReader) As Dictionary(Of Integer, List(Of String))
        Dim result As New Dictionary(Of Integer, List(Of String))

        Try
            While reader.Read()
                With reader
                    Dim billingPeriod As Integer
                    Dim stlRun As String
                    billingPeriod = CInt(.Item("BILLING_PERIOD"))
                    stlRun = CStr(.Item("STL_RUN"))

                    If result.ContainsKey(billingPeriod) Then
                        result(billingPeriod).Add(stlRun)
                    Else
                        result.Add(billingPeriod, New List(Of String))
                        result(billingPeriod).Add(stlRun)
                    End If
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bills"
    Public Function GetWESMBills(ByVal billingperiod As Integer, ByVal settlementrun As String) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE billing_period = " & billingperiod & " AND stl_run = '" & settlementrun & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(ByVal billingperiod As Integer) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE billing_period = " & billingperiod & " ORDER BY ID_NUMBER"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills() As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(Optional ByVal participantid As String = "", Optional ByVal bilingno As Nullable(Of Integer) = Nothing, Optional ByVal duedate As Nullable(Of Date) = Nothing) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            If participantid.Length <> 0 And Not bilingno Is Nothing And Not duedate Is Nothing Then
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                      "FROM AM_WESM_BILL A " & _
                      "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                      "WHERE B.PARTICIPANT_ID = '" & participantid & "' and A.billing_period = " & bilingno & " and A.due_date = TO_DATE('" & duedate & "', 'mm/dd/yyyy') " & _
                      "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"

            ElseIf participantid.Length <> 0 And Not bilingno Is Nothing And duedate Is Nothing Then
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                        "FROM AM_WESM_BILL A " & _
                        "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                        "WHERE B.PARTICIPANT_ID = '" & participantid & "' and A.billing_period = " & bilingno & " " & _
                        "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"

            ElseIf participantid.Length <> 0 And bilingno Is Nothing And Not duedate Is Nothing Then
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                      "FROM AM_WESM_BILL A " & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                      "WHERE B.PARTICIPANT_ID = '" & participantid & "' and A.due_date = TO_DATE('" & duedate & "', 'mm/dd/yyyy') " & _
                      "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"

            ElseIf participantid.Length <> 0 And bilingno Is Nothing And duedate Is Nothing Then
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                      "FROM AM_WESM_BILL A " & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                      "WHERE B.PARTICIPANT_ID = '" & participantid & "' " & _
                      "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"
            ElseIf participantid.Length = 0 And Not bilingno Is Nothing And Not duedate Is Nothing Then
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                      "FROM AM_WESM_BILL A " & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                      "WHERE A.billing_period = " & bilingno & " and A.due_date = TO_DATE('" & duedate & "', 'mm/dd/yyyy') " & _
                      "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"
            ElseIf participantid.Length = 0 And Not bilingno Is Nothing And duedate Is Nothing Then
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                      "FROM AM_WESM_BILL A " & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                      "WHERE A.billing_period = " & bilingno & " " & _
                      "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"
            ElseIf participantid.Length = 0 And bilingno Is Nothing And Not duedate Is Nothing Then
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                      "FROM AM_WESM_BILL A " & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                      "WHERE A.due_date = TO_DATE('" & duedate & "', 'mm/dd/yyyy') " & _
                      "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"
            Else
                SQL = "SELECT A.*, B.PARTICIPANT_ID " & _
                      "FROM AM_WESM_BILL A " & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                      "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillsPrentInvoice(ByVal ParentID As String, ByVal BillingPeriod As Integer, ByVal DueDate As Date) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE ID_NUMBER = '" & ParentID & "' " & _
                  "AND BILLING_PERIOD = '" & BillingPeriod & "' " & _
                  "AND DUE_DATE  = TO_DATE('" & DueDate & "', 'MM/DD/YYYY')"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(ByVal StartOfMonth As Date, ByVal EndOfMonth As Date, ByVal IDNumber As String, Optional ByVal BillNo As Long = 0) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If IDNumber.Length = 0 Then
                SQL = "SELECT * FROM AM_WESM_BILL " &
                  "WHERE INVOICE_DATE BETWEEN " &
                  "TO_DATE('" & CDate(StartOfMonth.ToShortDateString) & "','MM/DD/YYYY') " &
                  "AND TO_DATE('" & CDate(EndOfMonth.ToShortDateString) & "','MM/DD/YYYY') AND NOT INVOICE_NO LIKE '%-ADJ%'"
            Else
                SQL = "SELECT * FROM AM_WESM_BILL " &
                  "WHERE INVOICE_DATE BETWEEN " &
                  "TO_DATE('" & CDate(StartOfMonth.ToShortDateString) & "','MM/DD/YYYY') " &
                  "AND TO_DATE('" & CDate(EndOfMonth.ToShortDateString) & "','MM/DD/YYYY') " &
                  "AND ID_NUMBER = '" & IDNumber & "' AND NOT INVOICE_NO LIKE '%-ADJ%'"
            End If

            If BillNo <> 0 Then
                SQL &= "AND BILLING_PERIOD = '" & BillNo & "'"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(ByVal StartOfMonth As Date, ByVal EndOfMonth As Date, ByVal lstChildNumber As List(Of String)) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE INVOICE_DATE BETWEEN " & _
                  "TO_DATE('" & StartOfMonth & "','MM/DD/YYYY') " & _
                  "AND TO_DATE('" & EndOfMonth & "','MM/DD/YYYY') " & _
                  "AND ID_NUMBER IN ("

            Dim recCtr As Long = 0
            For Each itmChildNo In lstChildNumber
                If recCtr Mod 1000 <> 0 Then
                    SQL &= "'" & itmChildNo & "', "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR ID_NUMBER IN ("
                    End If
                    SQL &= "'" & itmChildNo & "', "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(ByVal InvoiceNumber As List(Of String)) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE invoice_no IN ("

            Dim recCtr As Long = 0
            For Each itmResult In InvoiceNumber
                If recCtr Mod 1000 <> 0 Then
                    SQL &= "'" & itmResult & "', "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR invoice_no IN ("
                    End If
                    SQL &= "'" & itmResult & "', "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(ByVal billingperiod As Integer, ByVal settlementrun As String, ByVal ChargeType As EnumChargeType) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE billing_period = " & billingperiod & " AND stl_run = '" & settlementrun & "' " & _
                  "AND charge_type = '" & ChargeType.ToString() & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(ByVal DateFrom As Date, ByVal DateTo As Date) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE INVOICE_DATE BETWEEN " & _
                  "TO_DATE('" & DateFrom & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                  "AND TO_DATE('" & DateTo & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS AM') ORDER BY INVOICE_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBills(ByVal Year As String) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & vbNewLine _
                & "WHERE TO_CHAR(DUE_DATE, 'YYYY') = '" & Year & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Public Function GetWESMBills(ByVal DueDate As Date) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & vbNewLine _
                & "WHERE DUE_DATE = TO_DATE('" & DueDate & "', 'MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBills(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBills(ByVal dr As IDataReader) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)

        Try
            While dr.Read()
                Dim item As New WESMBill

                With dr
                    item.BatchCode = .Item("BATCH_CODE").ToString()
                    item.AMCode = .Item("AM_CODE").ToString()
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.RegistrationID = CStr(.Item("REG_ID"))
                    item.ForTheAccountOf = CStr(.Item("FOR_ACCOUNT_OF").ToString())
                    item.FullName = CStr(.Item("FULL_NAME").ToString())
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    item.InvoiceDate = CDate(.Item("INVOICE_DATE"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = Trim(.Item("REMARKS").ToString())
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetWESMBillList() As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String
        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillList(ByVal dr As IDataReader) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim cntr As Long = 0
        Try
            While dr.Read()                
                cntr += 1
                With dr
                    Using _WESMBill As New WESMBill
                        _WESMBill.BatchCode = .Item("BATCH_CODE").ToString()
                        _WESMBill.AMCode = .Item("AM_CODE").ToString()
                        _WESMBill.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                        _WESMBill.SettlementRun = CStr(.Item("STL_RUN"))
                        _WESMBill.IDNumber = CStr(.Item("ID_NUMBER"))
                        _WESMBill.RegistrationID = CStr(.Item("REG_ID"))
                        _WESMBill.ForTheAccountOf = CStr(.Item("FOR_ACCOUNT_OF").ToString())
                        _WESMBill.FullName = CStr(.Item("FULL_NAME").ToString())
                        _WESMBill.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                        _WESMBill.InvoiceDate = CDate(.Item("INVOICE_DATE"))
                        _WESMBill.Amount = CDec(.Item("AMOUNT"))
                        _WESMBill.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                        _WESMBill.DueDate = CDate(.Item("DUE_DATE"))
                        _WESMBill.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                        _WESMBill.Remarks = If(IsDBNull(.Item("REMARKS").ToString()), "", .Item("REMARKS").ToString())
                        result.Add(_WESMBill)
                    End Using
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message & ".. Error starts at row no. " & cntr)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetWESMBill(ByVal InvoiceNumber As String, ByVal ChargeType As EnumChargeType) As WESMBill
        Dim result As New WESMBill
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL " & _
                  "WHERE charge_type ='" & ChargeType.ToString() & "' AND  invoice_no = '" & InvoiceNumber & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBill(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBill(ByVal dr As IDataReader) As WESMBill
        Dim result As New WESMBill

        Try
            While dr.Read()
                With dr
                    result.BatchCode = .Item("BATCH_CODE").ToString()
                    result.AMCode = .Item("AM_CODE").ToString()
                    result.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    result.SettlementRun = CStr(.Item("STL_RUN"))
                    result.IDNumber = CStr(.Item("ID_NUMBER"))
                    result.RegistrationID = CStr(.Item("REG_ID"))
                    result.ForTheAccountOf = CStr(.Item("FOR_ACCOUNT_OF").ToString())
                    result.FullName = CStr(.Item("FULL_NAME").ToString())
                    result.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    result.InvoiceDate = CDate(.Item("INVOICE_DATE"))
                    result.Amount = CDec(.Item("AMOUNT"))
                    result.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    result.DueDate = CDate(.Item("DUE_DATE"))
                    result.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    result.Remarks = .Item("REMARKS").ToString()
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    'Lance
    Public Function GetWESMBillListNew() As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String
        Try
            
            SQL = "SELECT A.* FROM AM_WESM_BILL A " & _
                  "INNER JOIN AM_WESMBILL_SUMMARY_VIEW2 B ON A.INVOICE_NO = B.INV_DM_CM AND A.CHARGE_TYPE = B.CHARGE_TYPE"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

#End Region

#Region "Get Last Inserted WESM Bill Number"
    Public Function GetWESMBillLastNumber(ByVal billingperiod As Integer, ByVal settlementrun As String) As Long
        Dim result As Long = 0
        Dim report As New DataReport
        Dim SQL As String = "", AppendText As String = ""

        Try
            

            SQL = "SELECT MAX(invoice_no) AS CNT FROM AM_WESM_BILL " & _
                  "WHERE billing_period <> " & billingperiod & " AND " & _
                  "stl_run <> ' " & settlementrun & "' "


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillLastNumber(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillLastNumber(ByVal dr As IDataReader) As Long
        Dim result As Long = 0

        Try
            While dr.Read()
                With dr
                    If Not IsDBNull(.Item("CNT")) Then
                        result = CLng(.Item("CNT"))
                    End If
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Count"

    Public Function GetWESMBillCount(ByVal billingperiod As Integer, ByVal settlementrun As String, _
                                     ByVal chargetype As EnumChargeType) As Integer
        Dim result As Integer = 0
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If chargetype = EnumChargeType.E Or chargetype = EnumChargeType.EV Then
                SQL = "SELECT COUNT(*) AS CNT FROM AM_WESM_BILL " & _
                      "WHERE billing_period = " & billingperiod & " AND stl_run = '" & settlementrun & "' " & _
                       "AND (CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' OR CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') "
            Else
                SQL = "SELECT COUNT(*) AS CNT FROM AM_WESM_BILL " & _
                     "WHERE billing_period = " & billingperiod & " AND stl_run = '" & settlementrun & "' " & _
                      "AND (CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' OR CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') "
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillCount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetWESMBillCount(ByVal dr As IDataReader) As Integer
        Dim result As Integer = 0

        Try
            While dr.Read()
                With dr
                    result = CInt(.Item("CNT"))
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Sequence ID"
    Public Function GetSequenceID(ByVal SequenceName As String) As Long
        Dim result As Long
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT " & SequenceName & ".NEXTVAL FROM Dual"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetSequenceID(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetSequenceID(ByVal dr As IDataReader) As Long
        Dim result As Long = 0

        Try
            While dr.Read()
                With dr
                    result = CLng(.Item("NEXTVAL"))
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Max Sequence ID"
    Public Function GetMaxSequenceID(ByVal listOfSequenceName As List(Of String)) As Dictionary(Of String, Long)
        Dim result As Dictionary(Of String, Long)
        Dim report As New DataReport
        Dim SQL As String
        Try            
            SQL = "SELECT SEQUENCE_NAME, LAST_NUMBER " & _
                  "FROM all_sequences " & _
                  "WHERE SEQUENCE_NAME in ('"
            For i = 0 To listOfSequenceName.Count - 1
                If i = (listOfSequenceName.Count - 1) Then
                    SQL &= listOfSequenceName.Item(i) & "')"
                Else
                    SQL &= listOfSequenceName.Item(i) & "','"
                End If
            Next
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetMaxSequenceID(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetMaxSequenceID(ByVal dr As IDataReader) As Dictionary(Of String, Long)
        Dim result As New Dictionary(Of String, Long)

        Try
            While dr.Read()
                With dr
                    If Not result.ContainsKey(CStr(.Item("SEQUENCE_NAME"))) Then
                        result.Add(CStr(.Item("SEQUENCE_NAME")), CLng(.Item("LAST_NUMBER")))
                    End If
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Max Invoice No"
    Public Function GetMaxInvoiceNo(ByVal BillingPeriod As Integer, ByVal FileType As EnumFileType, ByVal SettlementRun As String) As Long
        Dim result As Long = 0
        Dim report As New DataReport
        Dim SQL As String

        Try


            SQL = "SELECT NVL(MAX(invoice_code),0) as MaxInvoiceNo FROM AM_WESM_INVOICE " &
                  "WHERE billing_period <> " & BillingPeriod & " OR FILE_TYPE  <> " & FileType & " " &
                  "OR stl_run <> '" & SettlementRun & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetMaxInvoiceNo(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetMaxInvoiceNoNew(ByVal BillingPeriod As Integer, ByVal FileType As EnumFileType, ByVal SettlementRun As String) As Long
        Dim result As Long = 0
        Dim report As New DataReport
        Dim SQL As String

        Try

            'REGION TYPE LV = LUZON_VISAYAS, M = MINDANAO, A = ALL REGION
            If AMModule.RegionType = "LV" Then
                SQL = "SELECT NVL(MAX(invoice_code),0) as MaxInvoiceNo FROM AM_WESM_INVOICE_LVM_VIEW " &
                  "WHERE billing_period <> " & BillingPeriod & " OR FILE_TYPE  <> " & FileType & " " &
                  "OR stl_run <> '" & SettlementRun & "' OR region_type <> 'LUZON_VISAYAS'"
            ElseIf AMModule.RegionType = "M" Then
                SQL = "SELECT NVL(MAX(invoice_code),0) as MaxInvoiceNo FROM AM_WESM_INVOICE_LVM_VIEW " &
                  "WHERE billing_period <> " & BillingPeriod & " OR FILE_TYPE  <> " & FileType & " " &
                  "OR stl_run <> '" & SettlementRun & "' OR region_type <> 'MINDANAO'"
            Else
                SQL = "SELECT NVL(MAX(invoice_code),0) as MaxInvoiceNo FROM AM_WESM_INVOICE_LVM_VIEW " &
                  "WHERE billing_period <> " & BillingPeriod & " OR FILE_TYPE  <> " & FileType & " " &
                  "OR stl_run <> '" & SettlementRun & "'"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetMaxInvoiceNo(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetMaxInvoiceNo(ByVal dr As IDataReader) As Long
        Dim result As Long = 0

        Try
            While dr.Read()
                With dr
                    result = CLng(.Item("MaxInvoiceNo"))
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Due Dates in AM WESM Bill"
    Public Function GetAMWESMBillDueDates(ByVal billingperiod As Integer) As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT DUE_DATE " & _
                  "FROM AM_WESM_BILL " & _
                  "ORDER BY DUE_DATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMWESMBillDueDates(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAMWESMBillDueDates(ByVal reader As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)

        Try
            While reader.Read()
                result.Add(CDate(reader.Item("DUE_DATE")))
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Billing Period of AM WESM Bill for Offsetting"
    Public Function GetGPPostedNotOffset() As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.* FROM " & _
                  "      (SELECT * FROM AM_WESM_BILL_GP_POSTED WHERE posted = 1 AND posted_type = 'U' " & _
                  "       AND charge_type = '" & EnumChargeType.E.ToString() & "') a, " & _
                  "      (SELECT billing_period, charge_type, due_date, stl_run FROM AM_WESM_BILL_GP_POSTED " & _
                  "       WHERE posted_type = 'O' AND (charge_type = '" & EnumChargeType.E.ToString() & "' " & _
                  "       OR charge_type = '" & EnumChargeType.EV.ToString() & "') ) b " & _
                  "WHERE a.billing_period = b.billing_period(+) AND a.due_date = b.due_date(+) " & _
                  "       AND a.stl_run = b.stl_run(+) AND (b.billing_period) IS NULL " & _
                  "UNION " & _
                  "SELECT a.* FROM " & _
                  "      (SELECT * FROM AM_WESM_BILL_GP_POSTED WHERE posted = 1 AND posted_type = 'U' " & _
                  "       AND charge_type = '" & EnumChargeType.MF.ToString() & "') a, " & _
                  "      (SELECT billing_period, charge_type, due_date, stl_run FROM AM_WESM_BILL_GP_POSTED " & _
                  "       WHERE posted_type = 'O' AND (charge_type = '" & EnumChargeType.MF.ToString() & "' " & _
                  "       OR charge_type = '" & EnumChargeType.MFV.ToString() & "') ) b " & _
                  "WHERE a.billing_period = b.billing_period(+) AND a.due_date = b.due_date(+) " & _
                  "       AND a.stl_run = b.stl_run(+) AND (b.billing_period) IS NULL "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGPPostedNotOffset(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGPPostedNotOffset(ByVal dr As IDataReader) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillGPPosted
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN").ToString())
                    item.Charge = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.Posted = CInt(.Item("POSTED"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString())
                    item.Remarks = CStr(.Item("REMARKS").ToString())
                    item.GPRefNo = CStr(.Item("GP_REFNO").ToString())
                    item.DocumentAmount = CDec(.Item("DOCUMENT_AMOUNT"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bills for Offsetting"
    Public Function GetWESMBillForOffsetting(ByVal billingperiod As Integer, ByVal duedate As Date, ByVal stlrun As String) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            If stlrun = "-ALL-" Then
                SQL = "SELECT a.batch_code, a.am_code, a.billing_period, a.stl_run, a.id_number, a.reg_id,  " & _
                  "       a.for_account_of, a.full_name, a.invoice_no, a.invoice_date, a.amount, a.charge_type, " & _
                  "       a.due_date, market_fees_rate, remarks " & _
                  "FROM AM_WESM_BILL a, " & _
                  "      (SELECT DISTINCT a.batch_code " & _
                  "       FROM " & _
                  "           (SELECT billing_period, charge_type, due_date, batch_code, stl_run FROM AM_WESM_BILL_GP_POSTED " & _
                  "            WHERE posted = 1 AND posted_type = 'U') a, " & _
                  "           (SELECT billing_period, charge_type, due_date, stl_run FROM AM_WESM_BILL_GP_POSTED WHERE posted_type = 'O') b " & _
                  "       WHERE a.billing_period = b.billing_period(+) AND a.charge_type = b.charge_type(+) AND a.due_date = b.due_date(+) " & _
                  "             AND a.stl_run = b.stl_run(+) AND (b.billing_period) IS NULL AND a.billing_period = " & billingperiod & " AND " & _
                  "             a.due_date = TO_DATE('" & duedate & "','MM/DD/YYYY')) b " & _
                  "WHERE a.batch_code = b.batch_code"

            Else
                SQL = "SELECT a.batch_code, a.am_code, a.billing_period, a.stl_run, a.id_number, a.reg_id,  " & _
                  "       a.for_account_of, a.full_name, a.invoice_no, a.invoice_date, a.amount, a.charge_type, " & _
                  "       a.due_date, market_fees_rate, remarks " & _
                  "FROM AM_WESM_BILL a, " & _
                  "      (SELECT DISTINCT a.batch_code " & _
                  "       FROM " & _
                  "           (SELECT billing_period, charge_type, due_date, batch_code, stl_run FROM AM_WESM_BILL_GP_POSTED " & _
                  "            WHERE posted = 1 AND posted_type = 'U') a, " & _
                  "           (SELECT billing_period, charge_type, due_date, stl_run FROM AM_WESM_BILL_GP_POSTED WHERE posted_type = 'O') b " & _
                  "       WHERE a.billing_period = b.billing_period(+) AND a.charge_type = b.charge_type(+) AND a.due_date = b.due_date(+) " & _
                  "             AND a.stl_run = b.stl_run(+) AND (b.billing_period) IS NULL AND a.billing_period = " & billingperiod & " AND " & _
                  "             a.due_date = TO_DATE('" & duedate & "','MM/DD/YYYY') AND a.stl_run = '" & stlrun & "') b " & _
                  "WHERE a.batch_code = b.batch_code"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillForOffsetting(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillForOffsetting(ByVal dr As IDataReader) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)

        Try
            While dr.Read()
                Dim item As New WESMBill

                With dr
                    item.BatchCode = .Item("BATCH_CODE").ToString()
                    item.AMCode = .Item("AM_CODE").ToString()
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.RegistrationID = CStr(.Item("REG_ID"))
                    item.ForTheAccountOf = CStr(.Item("FOR_ACCOUNT_OF").ToString())
                    item.FullName = CStr(.Item("FULL_NAME").ToString())
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    item.InvoiceDate = CDate(.Item("INVOICE_DATE"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = CStr(.Item("REMARKS"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Debit/Credit Memo Main"
    Public Function GetDebitCreditMemoMain(ByVal dateFrom As Date, ByVal dateTo As Date) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String = ""

        Try
            

            SQL = "SELECT * FROM AM_DMCM " & _
                  "WHERE UPDATED_DATE BETWEEN TO_DATE('" & dateFrom & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                  "AND TO_DATE('" & dateTo & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            If result.Count <> 0 Then

                'GET DMCM NO LIST
                Dim _DMCMNo = (From x In result _
                               Select x.DMCMNumber Distinct).ToList

                'Get the DMCM Details
                Dim details = Me.GetDebitCreditMemoDetails(_DMCMNo)
                For Each item In result
                    Dim dmcm_no As Long = item.DMCMNumber
                    Dim list = (From x In details Where x.DMCMNumber = dmcm_no Select x).ToList()
                    item.DMCMDetails = list
                Next
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDebitCreditMemoMain(ByVal listTransType As List(Of EnumDMCMTransactionType), _
                                           ByVal dateFrom As Date?, ByVal dateTo As Date?, ByVal billingPeriod As Integer?, _
                                           ByVal dueDate As Date?, ByVal chargeType As EnumChargeType?, ByVal IDNumber As String) _
                                           As List(Of DebitCreditMemo)

        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String
        Dim WhereStatement As String = ""

        Try
            

            If dateFrom.HasValue And dateTo.HasValue Then
                WhereStatement &= " AND UPDATED_DATE BETWEEN TO_DATE('" & dateFrom & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                                  "AND TO_DATE('" & dateTo & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM')"
            End If

            If billingPeriod.HasValue Then
                WhereStatement &= " AND BILLING_PERIOD =" & billingPeriod
            End If

            If dueDate.HasValue Then
                WhereStatement &= " AND DUE_DATE = TO_DATE('" & dueDate & "','MM/DD/YYYY')"
            End If

            If IDNumber <> "" Then
                WhereStatement &= " AND ID_NUMBER = '" & IDNumber & "'"
            End If

            If chargeType.HasValue Then
                WhereStatement &= " AND CHARGE_TYPE = '" & chargeType.ToString() & "'"
            End If

            If listTransType.Count <> 0 Then
                WhereStatement &= " AND TRANS_TYPE IN ("

                For cnt As Integer = 0 To listTransType.Count - 1
                    If cnt <> listTransType.Count - 1 Then
                        WhereStatement &= listTransType(cnt) & ","
                    Else
                        WhereStatement &= listTransType(cnt)
                    End If
                Next

                WhereStatement &= ")"
            End If

            SQL = "SELECT * FROM AM_DMCM WHERE " & Mid(WhereStatement, 6, WhereStatement.Length - 4)

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            'If result.Count <> 0 Then
            '    'Get the distinct DMCM No
            '    Dim listDMCMNo = (From x In result Select x.DMCMNumber Distinct).ToList()

            '    'Get the DMCM Details
            '    Dim details = Me.GetDebitCreditMemoDetails(listDMCMNo)
            '    For Each item In result
            '        Dim dmcm_no As Long = item.DMCMNumber
            '        Dim list = (From x In details Where x.DMCMNumber = dmcm_no Select x).ToList()

            '        item.DMCMDetails = list
            '    Next
            'End If

            For Each item In result
                item.DMCMDetails = Me.GetDebitCreditMemoDetails(item.DMCMNumber)
            Next
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDebitCreditMemoMain(ByVal DMCMNo As Long) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_DMCM " & _
                  "WHERE am_dmcm_no = " & DMCMNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            'Get the DMCM Details
            For Each item In result
                item.DMCMDetails = Me.GetDebitCreditMemoDetails(DMCMNo)
            Next
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDebitCreditMemoMain(ByVal dueDate As Date) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String = ""

        Try
            

            SQL = "SELECT a.* FROM AM_DMCM a " & _
                  "LEFT JOIN AM_JV b on b.AM_JV_NO = a.AM_JV_NO " & _
                  "WHERE a.due_date = TO_DATE('" & dueDate & "','MM/DD/YYYY')  AND b.POSTED_TYPE = 'O'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            If result.Count <> 0 Then

                'GET DMCM NO LIST
                Dim _DMCMNo = (From x In result _
                               Select x.DMCMNumber Distinct).ToList

                'Get the DMCM Details
                Dim details = Me.GetDebitCreditMemoDetails(_DMCMNo)
                For Each item In result
                    Dim dmcm_no As Long = item.DMCMNumber
                    Dim list = (From x In details Where x.DMCMNumber = dmcm_no Select x).ToList()
                    item.DMCMDetails = list
                Next
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDebitCreditMemoMainFromJV(ByVal JVNumber As Long) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_DMCM " & _
                  "WHERE AM_JV_NO = " & JVNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            'Get the DMCM Details
            For Each item In result
                item.DMCMDetails = Me.GetDebitCreditMemoDetails(item.DMCMNumber)
            Next
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDebitCreditMemoMain(ByVal lstDMCMNo As List(Of Long), Optional ByVal isPayment As Boolean = False) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_DMCM " & _
                  "WHERE am_dmcm_no In ("

            Dim recCtr As Long = 0
            For Each itmDMCM In lstDMCMNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmDMCM & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR AM_DMCM_NO IN ("
                    End If
                    SQL &= itmDMCM & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            If isPayment = False Then
                'Get DMCM Details 
                Dim _DMCMDetails As New List(Of DebitCreditMemoDetails)
                _DMCMDetails = Me.GetDebitCreditMemoDetails(lstDMCMNo)

                For Each itmResult In result
                    Dim _itmResult = itmResult
                    Dim tmpDetails = (From x In _DMCMDetails _
                                        Where x.DMCMNumber = _itmResult.DMCMNumber _
                                        Select x).ToList

                    itmResult.DMCMDetails.AddRange(tmpDetails)
                Next
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDebitCreditMemoMainInvoice(ByVal InvoiceNumber As Long, ByVal ChargeType As EnumChargeType) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.* FROM AM_DMCM a, AM_DMCM_DETAILS b " & _
                  "WHERE a.am_dmcm_no = b.am_dmcm_no AND b.summary_type = '" & EnumSummaryType.INV.ToString() & "' " & _
                  "      AND a.charge_type = '" & ChargeType.ToString() & "' AND b.inv_dm_cm = " & InvoiceNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            'Get the DMCM Details
            For Each item In result
                Dim listDetails = Me.GetDebitCreditMemoDetails(item.DMCMNumber)

                item.DMCMDetails = listDetails
            Next
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDMCMMainInvoiceP2COffset(ByVal InvoiceNumber As String) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)
        Dim report As New DataReport
        Dim SQL As String

        Try


            SQL = "SELECT a.* FROM AM_DMCM a, AM_DMCM_DETAILS b " & _
                  "WHERE a.am_dmcm_no = b.am_dmcm_no AND b.summary_type = '" & EnumSummaryType.INV.ToString() & "' " & _
                  "      AND b.inv_dm_cm = '" & InvoiceNumber & "' AND a.trans_type IN (" & EnumDMCMTransactionType.WESMBillP2COffsetting & ", " & EnumDMCMTransactionType.WESMBillP2PC2COffsetting & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoMain(report.ReturnedIDatareader)

            'Get the DMCM Details
            For Each item In result
                Dim listDetails = Me.GetDebitCreditMemoDetails(item.DMCMNumber)

                item.DMCMDetails = listDetails
            Next
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDebitCreditMemoMain(ByVal dr As IDataReader) As List(Of DebitCreditMemo)
        Dim result As New List(Of DebitCreditMemo)

        Try
            While dr.Read()
                With dr
                    Dim item As New DebitCreditMemo

                    item.DMCMNumber = CInt(.Item("AM_DMCM_NO"))
                    item.JVNumber = CLng(.Item("AM_JV_NO"))

                    If IsNumeric(.Item("BILLING_PERIOD")) Then
                        item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    End If

                    If IsDate(.Item("DUE_DATE")) Then
                        item.DueDate = CDate(.Item("DUE_DATE"))
                    End If

                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.TransType = CType(System.Enum.Parse(GetType(EnumDMCMTransactionType), CStr(.Item("TRANS_TYPE"))), EnumDMCMTransactionType)
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.Particulars = .Item("PARTICULARS").ToString()
                    item.EWT = CDec(.Item("EWT"))
                    item.EWV = CDec(.Item("EWV"))
                    item.Vatable = CDec(.Item("VATABLE"))
                    item.VAT = CDec(.Item("VAT"))
                    item.VATExempt = CDec(.Item("VAT_EXEMPT"))
                    item.VatZeroRated = CDec(.Item("VAT_ZERO_RATED"))
                    item.Others = CDec(.Item("OTHERS"))
                    item.TotalAmountDue = CDec(.Item("TOTAL_AMOUNT_DUE"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))
                    item.CheckedBy = CStr(.Item("CHECKED_BY"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    result.Add(item)
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetDebitCreditMemoDetails(ByVal listDMCMNo As List(Of Long)) As List(Of DebitCreditMemoDetails)
        Dim result As New List(Of DebitCreditMemoDetails)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            Dim DMCMNoString As String = ""

            SQL = "SELECT a.*, b.participant_id FROM AM_DMCM_DETAILS a, AM_PARTICIPANTS b  " & _
                  "WHERE a.id_number = b.id_number AND a.am_dmcm_no IN ("

            Dim recCtr As Long = 0
            For Each itmDMCM In listDMCMNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmDMCM & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR A.AM_DMCM_NO IN ("
                    End If
                    SQL &= itmDMCM & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoDetails(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDebitCreditMemoDetails(ByVal DMCMNo As Long) As List(Of DebitCreditMemoDetails)
        Dim result As New List(Of DebitCreditMemoDetails)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.participant_id FROM AM_DMCM_DETAILS a, AM_PARTICIPANTS b  " & _
                  "WHERE a.id_number = b.id_number(+) AND a.am_dmcm_no = " & DMCMNo & " order by rownum desc"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDebitCreditMemoDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDebitCreditMemoDetails(ByVal dr As IDataReader) As List(Of DebitCreditMemoDetails)
        Dim result As New List(Of DebitCreditMemoDetails)

        Try
            While dr.Read()
                With dr
                    Dim item As New DebitCreditMemoDetails

                    item.DMCMNumber = CInt(.Item("AM_DMCM_NO"))
                    item.InvDMCMNo = CStr(If(IsDBNull(.Item("INV_DM_CM")), "", .Item("INV_DM_CM")))
                    item.IDNumber = New AMParticipants(.Item("ID_NUMBER").ToString(), .Item("PARTICIPANT_ID").ToString())
                    item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType)
                    item.AccountCode = CStr(.Item("ACCT_CODE"))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    item.IsComputed = CType(System.Enum.Parse(GetType(EnumDMCMComputed), CStr(.Item("IS_COMPUTE"))), EnumDMCMComputed)
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    result.Add(item)
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Billing Period of Debit/Credit Memo for Offsetting"
    Public Function GetBillingPeriodDebitCreditMemoForOffsetting() As Dictionary(Of Integer, List(Of String))
        Dim result As New Dictionary(Of Integer, List(Of String))
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT billing_period, due_date FROM AM_DMCM " & _
                  "WHERE trans_type IN (" & EnumDMCMTransactionType.WESMBillP2PC2COffsetting & "," & EnumDMCMTransactionType.WESMBillP2COffsetting & ")" & _
                  "ORDER BY billing_period DESC, due_date ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetBillingPeriodDebitCreditMemo(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetBillingPeriodDebitCreditMemo(ByVal dr As IDataReader) As Dictionary(Of Integer, List(Of String))
        Dim result As New Dictionary(Of Integer, List(Of String))

        Try
            While dr.Read()
                Dim billingperiod As Integer
                Dim duedate As String
                With dr
                    billingperiod = CInt(.Item("BILLING_PERIOD"))
                    duedate = CDate(.Item("DUE_DATE")).ToString("MM/dd/yyyy")
                End With

                If result.ContainsKey(billingperiod) Then
                    Dim items = result(billingperiod)
                    items.Add(duedate)
                    items.TrimExcess()
                    result(billingperiod) = items
                Else
                    Dim items As New List(Of String)
                    items.Add(duedate)
                    result.Add(billingperiod, items)
                End If
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get Charge Type of Debit/Credit Memo For Offsetting"
    Public Function GetChargeTypeDebitCreditMemoForOffsetting(ByVal billingperiod As Integer, ByVal duedate As Date) As List(Of String)
        Dim result As New List(Of String)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT charge_type FROM AM_DMCM " & _
                  "WHERE billing_period = " & billingperiod & " AND due_date = TO_DATE('" & duedate & "','MM/DD/YYYY') " & _
                  "AND trans_type IN (" & EnumDMCMTransactionType.WESMBillP2PC2COffsetting & "," & EnumDMCMTransactionType.WESMBillP2COffsetting & ")" & _
                  "ORDER BY charge_type"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetChargeTypeDebitCreditMemoForOffsetting(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetChargeTypeDebitCreditMemoForOffsetting(ByVal dr As IDataReader) As List(Of String)
        Dim result As New List(Of String)

        Try
            While dr.Read()
                Dim charge As EnumChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(dr.Item("CHARGE_TYPE"))), EnumChargeType)
                Select Case charge
                    Case EnumChargeType.E
                        result.Add("ENERGY")
                    Case EnumChargeType.EV
                        result.Add("ENERGY-VAT")
                    Case EnumChargeType.MF
                        result.Add("MARKET FEE")
                    Case EnumChargeType.MFV
                        result.Add("MARKET FEE-VAT")
                End Select
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Check If WESM Bills are posted"
    Public Function IsWESMBillsAllPosted(ByVal billingperiod As Integer, ByVal duedate As Date, ByVal chargeType As EnumChargeType) As Boolean
        Dim result As Boolean
        Dim report As New DataReport
        Dim SQL As String = ""

        Try
            

            Select Case chargeType
                Case EnumChargeType.E
                    SQL = "SELECT COUNT(*) AS cnt FROM AM_WESM_BILL_GP_POSTED " & _
                          "WHERE billing_period = " & billingperiod & " AND due_date = TO_DATE('" & duedate & "','MM/DD/YYYY') " & _
                          "AND posted = 0 AND posted_type = 'U' AND " & _
                          "(charge_type = '" & EnumChargeType.E.ToString() & "' OR charge_type = '" & EnumChargeType.EV.ToString() & "')"

                Case EnumChargeType.MF
                    SQL = "SELECT COUNT(*) AS cnt FROM AM_WESM_BILL_GP_POSTED " & _
                          "WHERE billing_period = " & billingperiod & " AND due_date = TO_DATE('" & duedate & "','MM/DD/YYYY') " & _
                          "AND posted = 0 AND posted_type = 'U' AND " & _
                         "(charge_type = '" & EnumChargeType.MF.ToString() & "' OR charge_type = '" & EnumChargeType.MFV.ToString() & "')"

            End Select

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.IsWESMBillsAllPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function IsWESMBillsAllPosted(ByVal dr As IDataReader) As Boolean
        Dim result As Boolean = False

        Try
            While dr.Read()
                Dim count As Integer = CInt(dr.Item("CNT"))
                If count = 0 Then
                    result = True
                End If
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Filter Values for WESMBill"
    Public Function GetFilterValuesForWESMBillInquiry() As List(Of WESMBill)

        Dim result As New List(Of WESMBill)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT charge_type, billing_period, stl_run " & _
                  "FROM AM_WESM_BILL ORDER BY billing_period DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            result = Me.GetFilterValuesForWESMBillInquiry(report.ReturnedIDatareader)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetFilterValuesForWESMBillInquiry(ByVal dr As IDataReader) As List(Of WESMBill)
        Dim result As New List(Of WESMBill)

        Try
            While dr.Read()
                With dr
                    Dim item As New WESMBill

                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    result.Add(item)
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Collections"
    Public Function GetCollectionsByYear(ByVal SelectedYear As String, ByVal resultCollAlloc As List(Of CollectionAllocation)) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & vbNewLine _
                & "WHERE to_char(allocation_date,'YYYY') = '" & SelectedYear & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations

            result = Me.GetCollections(report.ReturnedIDatareader, resultCollAlloc)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal DateFrom As Date, ByVal DateTo As Date, _
                                   ByVal IsCollectionDate As Boolean) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If IsCollectionDate Then
                SQL = "SELECT * FROM AM_COLLECTION " & _
                      "WHERE collection_date BETWEEN TO_DATE('" & FormatDateTime(DateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                      "AND TO_DATE('" & FormatDateTime(DateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM')" 'AND status <> 0"
            Else
                SQL = "SELECT * FROM AM_COLLECTION " & _
                      "WHERE allocation_date BETWEEN TO_DATE('" & FormatDateTime(DateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                      "AND TO_DATE('" & FormatDateTime(DateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM')" 'AND status <> 0"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(DateFrom, DateTo, IsCollectionDate)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal IDNumber As String, _
                                   ByVal IsCollectionDate As Boolean) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If IsCollectionDate Then
                SQL = "SELECT * FROM AM_COLLECTION " & _
                      "WHERE collection_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') " & _
                      "AND TO_DATE('" & DateTo & "','MM/DD/YYYY') AND id_number = '" & IDNumber & "'" 'AND status <> 0 "
            Else
                SQL = "SELECT * FROM AM_COLLECTION " & _
                      "WHERE allocation_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') " & _
                      "AND TO_DATE('" & DateTo & "','MM/DD/YYYY') AND id_number = '" & IDNumber & "'" 'AND status <> 0 "
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(DateFrom, DateTo, IsCollectionDate)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal CollectionNumber As Long) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE collection_no = " & CollectionNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(CollectionNumber)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal lstCollectionNumber As List(Of Long)) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE status <> 0 AND collection_no IN ("

            Dim recCtr As Long = 0
            For Each itmBillNo In lstCollectionNumber
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmBillNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR COLLECTION_NO IN ("
                    End If
                    SQL &= itmBillNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollections(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal collectionno As Long, ByVal idnumber As String, _
                                   ByVal collectiondate As Date, ByVal amount As Decimal) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE status <> 0 AND collection_date = TO_DATE('" & collectiondate & "','MM/DD/YYYY') " & _
                  "AND collection_no <> " & collectionno & " AND id_number = '" & idnumber & "' AND collected_amount = " & amount

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = New List(Of CollectionAllocation)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal AllocationDate As Date) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            AllocationDate = CDate(FormatDateTime(AllocationDate, DateFormat.ShortDate))

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE status <> 0 AND ALLOCATION_DATE = TO_DATE('" & AllocationDate & "','MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(AllocationDate)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal BatchCode As String) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE status <> 0 AND BATCH_CODE = '" & BatchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(BatchCode)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionsDaily(ByVal BatchCode As String) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE daily_batch_code = '" & BatchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(BatchCode)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)

            'Get also the deleted collections
            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE batch_code = '" & BatchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result.AddRange(Me.GetCollections(report.ReturnedIDatareader))
            result.TrimExcess()
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal status As EnumCollectionStatus) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE status = " & status

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(status)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollections(ByVal AllocationDate As Date, ByVal AllocationType As EnumAllocationType) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE allocation_date = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') " & _
                  "AND status <> 0 AND allocation_type =" & AllocationType & _
                  " AND batch_code IS NULL"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            'Get collection allocations
            Dim resultAlloc = Me.GetCollectionAllocation(AllocationDate, AllocationType)

            result = Me.GetCollections(report.ReturnedIDatareader, resultAlloc)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionsDaily(ByVal CollectionDate As Date) As List(Of Collection)
        Dim result As New List(Of Collection)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE status <> 0 AND or_no <> 0 AND collection_date = TO_DATE('" & CollectionDate & "','MM/DD/YYYY') " & _
                  "AND daily_batch_code IS NULL AND batch_code IS NULL AND ALLOCATION_TYPE = " & EnumAllocationType.Automatic

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollections(report.ReturnedIDatareader, New List(Of CollectionAllocation))
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollections(ByVal dr As IDataReader, _
                                    ByVal listCollectionAllocation As List(Of CollectionAllocation)) As List(Of Collection)
        Dim result As New List(Of Collection)

        Try
            While dr.Read()
                Dim item As New Collection

                With dr
                    item.CollectionNumber = CLng(.Item("COLLECTION_NO"))
                    item.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    item.ORNo = CLng(.Item("OR_NO"))
                    item.CollectionDate = CDate(.Item("COLLECTION_DATE"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.CollectedAmount = CDec(.Item("COLLECTED_AMOUNT"))
                    item.CollectedPrudential = CDec(.Item("COLLECTED_PRUDENTIAL"))
                    item.CollectedHeld = CDec(.Item("COLLECTED_HELD"))
                    item.CollectionCategory = CType(System.Enum.Parse(GetType(EnumCollectionCategory), CStr(.Item("COLLECTION_CATEGORY"))), EnumCollectionCategory)
                    item.AllocationType = CType(System.Enum.Parse(GetType(EnumAllocationType), CStr(.Item("ALLOCATION_TYPE"))), EnumAllocationType)
                    item.Status = CType(System.Enum.Parse(GetType(EnumCollectionStatus), CStr(.Item("STATUS"))), EnumCollectionStatus)
                    item.IsPosted = CType(System.Enum.Parse(GetType(EnumIsPosted), CStr(.Item("IS_POSTED"))), EnumIsPosted)
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString())
                    item.DailyBatchCode = CStr(.Item("DAILY_BATCH_CODE").ToString())

                    If Not IsDBNull(.Item("ALLOCATION_DATE")) Then
                        item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    End If

                    'Get the list of Collection Allocation
                    Dim items = (From x In listCollectionAllocation _
                                 Where x.CollectionNumber = item.CollectionNumber _
                                 Select x).ToList()

                    Dim _chkExisting = (From x In item.ListOfCollectionAllocation _
                                        Where x.CollectionNumber = item.CollectionNumber _
                                        Select x).ToList

                    If _chkExisting.Count = 0 Then
                        item.ListOfCollectionAllocation.AddRange(items)
                    End If


                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetCollections(ByVal dr As IDataReader) As List(Of Collection)
        Dim result As New List(Of Collection)

        Try
            While dr.Read()
                Dim item As New Collection

                With dr
                    item.CollectionNumber = CLng(.Item("COLLECTION_NO"))
                    item.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    item.ORNo = CLng(.Item("OR_NO"))
                    item.CollectionDate = CDate(.Item("COLLECTION_DATE"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.CollectedAmount = CDec(.Item("COLLECTED_AMOUNT"))
                    item.CollectedPrudential = CDec(.Item("COLLECTED_PRUDENTIAL"))
                    item.CollectedHeld = CDec(.Item("COLLECTED_HELD"))
                    item.CollectionCategory = CType(System.Enum.Parse(GetType(EnumCollectionCategory), CStr(.Item("COLLECTION_CATEGORY"))), EnumCollectionCategory)
                    item.AllocationType = CType(System.Enum.Parse(GetType(EnumAllocationType), CStr(.Item("ALLOCATION_TYPE"))), EnumAllocationType)
                    item.Status = CType(System.Enum.Parse(GetType(EnumCollectionStatus), CStr(.Item("STATUS"))), EnumCollectionStatus)
                    item.IsPosted = CType(System.Enum.Parse(GetType(EnumIsPosted), CStr(.Item("IS_POSTED"))), EnumIsPosted)
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString())
                    item.DailyBatchCode = CStr(.Item("DAILY_BATCH_CODE").ToString())

                    If Not IsDBNull(.Item("ALLOCATION_DATE")) Then
                        item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    End If
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Collection By ORNo"
    Public Function GetCollectionByORNo(ByVal ORNo As Long) As Collection
        Dim result As New Collection
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION " & _
                  "WHERE status <> 0 AND or_no = " & ORNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionByORNo(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionOR() As Boolean
        Dim result As New Boolean
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_COLLECTION WHERE ALLOCATION_DATE IS NULL AND STATUS = 1"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionORNo(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollectionORNo(ByVal dr As IDataReader) As Boolean
        Dim result As New Boolean
        result = False
        Try
            While dr.Read()
                result = True
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetCollectionByORNo(ByVal dr As IDataReader) As Collection
        Dim result As New Collection
        Try
            While dr.Read()
                With dr
                    result.CollectionNumber = CLng(.Item("COLLECTION_NO"))
                    result.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    result.ORNo = CLng(.Item("OR_NO"))
                    result.CollectionDate = CDate(.Item("COLLECTION_DATE"))
                    result.IDNumber = CStr(.Item("ID_NUMBER"))
                    result.CollectedAmount = CDec(.Item("COLLECTED_AMOUNT"))
                    result.CollectedPrudential = CDec(.Item("COLLECTED_PRUDENTIAL"))
                    result.CollectedHeld = CDec(.Item("COLLECTED_HELD"))
                    result.CollectionCategory = CType(System.Enum.Parse(GetType(EnumCollectionCategory), CStr(.Item("COLLECTION_CATEGORY"))), EnumCollectionCategory)
                    result.AllocationType = CType(System.Enum.Parse(GetType(EnumAllocationType), CStr(.Item("ALLOCATION_TYPE"))), EnumAllocationType)
                    result.Status = CType(System.Enum.Parse(GetType(EnumCollectionStatus), CStr(.Item("STATUS"))), EnumCollectionStatus)
                    result.IsPosted = CType(System.Enum.Parse(GetType(EnumIsPosted), CStr(.Item("IS_POSTED"))), EnumIsPosted)
                    result.BatchCode = CStr(.Item("BATCH_CODE").ToString())
                    result.DailyBatchCode = CStr(.Item("DAILY_BATCH_CODE").ToString())
                    result.ListOfCollectionAllocation = Me.GetCollectionAllocation(result.CollectionNumber)
                    If Not IsDBNull(.Item("ALLOCATION_DATE")) Then
                        result.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    End If

                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary for Collection Allocation"
    Public Function GetWESMBillSummaryForCollectionAllocation() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.id_number,  a.wesmbill_summary_no, b.participant_id, b.participant_address, " & _
                  "       a.billing_period, a.charge_type, a.due_date, a.beginning_balance, a.ending_balance, " & _
                  "       a.new_duedate, a.is_mfwtax_deducted, a.inv_dm_cm, a.summary_type, a.energy_withhold, a.energy_withhold_status " & _
                  "FROM AM_WESM_BILL_SUMMARY a, AM_PARTICIPANTS b " & _
                  "WHERE (a.id_number = b.id_number AND a.ending_balance < 0 AND a.ending_balance < a.energy_withhold) " & _
                  "OR (a.id_number = b.id_number AND a.ending_balance = 0 AND a.energy_withhold < 0 AND a.energy_withhold_status = 1  AND a.charge_type = 'E') " & _                 
                  "ORDER BY a.due_date, a.charge_type"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryForCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryForCollectionAllocation(ByVal IDNumber As String) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If AMModule.BIRWHTAgent = "FALSE" Then
                'For Regular allocation '05/27/2018
                SQL = "SELECT a.id_number, a.wesmbill_summary_no, b.participant_id, b.participant_address, " &
                      "       a.billing_period, a.charge_type, a.due_date, a.beginning_balance, a.ending_balance, " &
                      "       a.new_duedate, a.is_mfwtax_deducted, a.inv_dm_cm, a.summary_type, a.energy_withhold, a.energy_withhold_status, a.NO_DEFINT " &
                      "FROM AM_WESM_BILL_SUMMARY a, AM_PARTICIPANTS b " &
                      "WHERE (a.balance_type = 'AR' AND a.id_number = b.id_number AND a.ending_balance < 0 AND a.ending_balance < a.energy_withhold AND a.id_number = '" & IDNumber & "') " &
                      "OR (a.balance_type = 'AR' AND a.id_number = b.id_number AND a.ending_balance = 0 AND a.energy_withhold < 0 AND a.energy_withhold_status = 1 AND a.charge_type = 'E' AND a.id_number = '" & IDNumber & "') " &
                      "ORDER BY a.due_date, a.charge_type"
            Else
                'For Withholding Tax Agent '05/27/2018
                SQL = "SELECT a.id_number, a.wesmbill_summary_no, b.participant_id, b.participant_address, " & _
                     "       a.billing_period, a.charge_type, a.due_date, a.beginning_balance, a.ending_balance, " & _
                     "       a.new_duedate, a.is_mfwtax_deducted, a.inv_dm_cm, a.summary_type, a.energy_withhold, a.energy_withhold_status, a.NO_DEFINT " & _
                     "FROM AM_WESM_BILL_SUMMARY a, AM_PARTICIPANTS b " & _
                     "WHERE a.id_number = b.id_number AND a.ending_balance < 0 AND (a.ending_balance < a.energy_withhold OR (a.ending_balance = a.energy_withhold AND a.energy_withhold_status = 1) OR (a.ending_balance >= a.energy_withhold AND a.energy_withhold_status <> 0)) AND a.id_number = '" & IDNumber & "' " & _
                     "ORDER BY a.due_date, a.charge_type"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryForCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryForCollectionAllocation(ByVal IDNumber As String, ByVal InvNumber As String) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If AMModule.BIRWHTAgent = "FALSE" Then
                'For Regular allocation '05/27/2018
                SQL = "SELECT a.id_number, a.wesmbill_summary_no, b.participant_id, b.participant_address, " & _
                      "       a.billing_period, a.charge_type, a.due_date, a.beginning_balance, a.ending_balance, " & _
                      "       a.new_duedate, a.is_mfwtax_deducted, a.inv_dm_cm, a.summary_type, a.energy_withhold, a.energy_withhold_status, a.NO_DEFINT " & _
                      "FROM AM_WESM_BILL_SUMMARY a, AM_PARTICIPANTS b " & _
                      "WHERE (a.id_number = b.id_number AND a.ending_balance < 0 AND a.ending_balance < a.energy_withhold AND a.id_number = '" & IDNumber & "' AND a.inv_dm_cm = '" & InvNumber & "') " & _
                      "OR (a.id_number = b.id_number AND a.ending_balance = 0 AND a.energy_withhold < 0 AND a.energy_withhold_status = 1 AND a.charge_type = 'E' AND a.id_number = '" & IDNumber & "' AND a.inv_dm_cm = '" & InvNumber & "') " & _
                      "ORDER BY a.due_date, a.charge_type"
            Else
                'For Withholding Tax Agent '05/27/2018
                SQL = "SELECT a.id_number, a.wesmbill_summary_no, b.participant_id, b.participant_address, " & _
                     "       a.billing_period, a.charge_type, a.due_date, a.beginning_balance, a.ending_balance, " & _
                     "       a.new_duedate, a.is_mfwtax_deducted, a.inv_dm_cm, a.summary_type, a.energy_withhold, a.energy_withhold_status, a.NO_DEFINT " & _
                     "FROM AM_WESM_BILL_SUMMARY a, AM_PARTICIPANTS b " & _
                     "WHERE a.id_number = b.id_number AND a.ending_balance < 0 AND (a.ending_balance < a.energy_withhold OR (a.ending_balance = a.energy_withhold AND a.energy_withhold_status = 1) OR (a.ending_balance > a.energy_withhold AND a.energy_withhold_status <> 0)) AND a.id_number = '" & IDNumber & "' " & _
                     "ORDER BY a.due_date, a.charge_type"
            End If            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryForCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryForCollectionAllocation(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.BillPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.BeginningBalance = CDec(.Item("BEGINNING_BALANCE"))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE"))
                    item.IsMFWTaxDeducted = CInt(.Item("IS_MFWTAX_DEDUCTED"))
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM"))
                    item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType)
                    item.EnergyWithhold = If(CInt(.Item("ENERGY_WITHHOLD_STATUS")) = 2, 0D, CDec(.Item("ENERGY_WITHHOLD")))
                    item.EnergyWithholdStatus = CType(.Item("ENERGY_WITHHOLD_STATUS"), EnumEnergyWithholdStatus)
                    item.NoDefInt = CBool(IIf(CInt(.Item("NO_DEFINT")) = 1, True, False))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Transaction Cover Summary"
    Public Function GetListWESMTransCoverSummary(ByVal bp As Integer, ByVal stlrun As String, ByVal dueDate As Date) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE A.BILLING_PERIOD = " & bp & " AND STL_RUN = '" & stlrun & "' AND A.DUE_DATE = TO_DATE('" & dueDate.ToShortDateString & "','MM/DD/yyyy')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransCoverSummary3(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetListWESMTransCoverSummaryAllPerDueDate(ByVal dueDate As Date) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE A.DUE_DATE = TO_DATE('" & dueDate.ToShortDateString & "','MM/DD/yyyy') " & vbNewLine

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransCoverSummary3(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetListWESMTransCoverSummaryPerDueDate(ByVal dueDate As Date) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE LAST_DAY(A.DUE_DATE) = LAST_DAY(TO_DATE('" & dueDate.ToShortDateString & "','MM/DD/yyyy')) " & vbNewLine _
                              & "AND (A.VATABLE_SALES + A.ZERO_RATED_SALES + ZERO_RATED_ECOZONE_SALES + VAT_ON_SALES) > 0"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransCoverSummary3(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetListWTACoverSummaryPerTransNo(ByVal wesmTransNo As String) As WESMBillAllocCoverSummary
        Dim ret As New WESMBillAllocCoverSummary
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE A.TRANSACTION_NUMBER = '" & wesmTransNo & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWTASummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetListWESMTransCoverSummaryPerTransNo(ByVal wesmTransNo As String) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE A.TRANSACTION_NUMBER = '" & wesmTransNo & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransCoverSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetWESMTransCoverSummaryPerTransNo(ByVal wesmTransNo As String) As WESMBillAllocCoverSummary
        Dim ret As New WESMBillAllocCoverSummary
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE A.TRANSACTION_NUMBER = '" & wesmTransNo & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMTransCoverSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetListWESMTransCoverSummaryPerWBatch(ByVal wesmBatchNo As String) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE B.WESMBILL_BATCH_NO = '" & wesmBatchNo & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransCoverSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function
    Public Function GetListWESMTransCoverSummary2(ByVal paidTo As String) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE A.STL_ID LIKE  '" & paidTo & "%'"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransCoverSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetListWESMTransCoverSummary2(ByVal listOfInvoices As List(Of String)) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine _
                              & "WHERE A.TRANSACTION_NUMBER IN ("
            Dim x As Integer = 0
            For Each item In listOfInvoices
                Dim modVal As Integer = (x Mod 1000)
                If modVal = 0 And x <> 0 Then
                    SQL = Left(SQL, SQL.Length - 1) & ") OR A.TRANSACTION_NUMBER IN ("
                    SQL &= "'" & item & "',"
                Else
                    SQL &= "'" & item & "',"
                End If
                x += 1
            Next
            SQL = Left(SQL, SQL.Length - 1) & ")"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransCoverSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetWESMTransCoverSummary(ByVal dr As IDataReader) As WESMBillAllocCoverSummary
        Dim result As New WESMBillAllocCoverSummary
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillAllocCoverSummary
                    item.STLRun = CStr(.Item("STL_RUN"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.StlID = CStr(.Item("STL_ID"))
                    item.BillingID = CStr(.Item("BILLING_ID"))
                    item.NonVatableTag = CStr(.Item("NON_VATABLE_TAG"))
                    item.ZeroRatedTag = CStr(.Item("ZERO_RATED_TAG"))
                    item.WHT = CStr(.Item("WHT_TAG"))
                    item.ITH = CStr(.Item("ITH_TAG"))
                    item.NetSellerBuyerTag = CStr(.Item("NET_SELLER_BUYER_TAG"))
                    item.TransactionNo = CStr(.Item("TRANSACTION_NUMBER"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcoZoneSales = CDec(.Item("ZERO_RATED_ECOZONE_SALES"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.ZeroRatedEcoZonePurchases = CDec(.Item("ZERO_RATED_ECOZONE_PURCHASES"))
                    item.NSSFlowBack = CDec(.Item("NSS_FLOWBACK"))
                    item.VatOnSales = CDec(.Item("VAT_ON_SALES"))
                    item.VatOnPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.EWTSales = CDec(.Item("EWT_SALES"))
                    item.EWTPurchases = CDec(.Item("EWT_PURCHASES"))
                    item.GMR = CDec(.Item("GMR"))
                    item.SpotQty = CDec(.Item("SPOT_QTY"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = CStr(.Item("REMARKS"))
                    If item.NetSale = 0 And item.NetPurchase <> 0 Then
                        item.ListWBAllocDisDetails = GetWBAllocDisDetails(CLng(.Item("SUMMARY_ID")))
                    End If
                    result = item
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetListWESMTransCoverSummary(ByVal dr As IDataReader) As List(Of WESMBillAllocCoverSummary)
        Dim result As New List(Of WESMBillAllocCoverSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillAllocCoverSummary
                    item.STLRun = CStr(.Item("STL_RUN"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.StlID = CStr(.Item("STL_ID"))
                    item.BillingID = CStr(.Item("BILLING_ID"))
                    item.NonVatableTag = CStr(.Item("NON_VATABLE_TAG"))
                    item.ZeroRatedTag = CStr(.Item("ZERO_RATED_TAG"))
                    item.WHT = CStr(.Item("WHT_TAG"))
                    item.ITH = CStr(.Item("ITH_TAG"))
                    item.NetSellerBuyerTag = CStr(.Item("NET_SELLER_BUYER_TAG"))
                    item.TransactionNo = CStr(.Item("TRANSACTION_NUMBER"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcoZoneSales = CDec(.Item("ZERO_RATED_ECOZONE_SALES"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.ZeroRatedEcoZonePurchases = CDec(.Item("ZERO_RATED_ECOZONE_PURCHASES"))
                    item.NSSFlowBack = CDec(.Item("NSS_FLOWBACK"))
                    item.VatOnSales = CDec(.Item("VAT_ON_SALES"))
                    item.VatOnPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.EWTSales = CDec(.Item("EWT_SALES"))
                    item.EWTPurchases = CDec(.Item("EWT_PURCHASES"))
                    item.GMR = CDec(.Item("GMR"))
                    item.SpotQty = CDec(.Item("SPOT_QTY"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = CStr(.Item("REMARKS"))
                    If item.NetSale = 0 And item.NetPurchase <> 0 Then
                        item.ListWBAllocDisDetails = GetWBAllocDisDetails(CLng(.Item("SUMMARY_ID")))
                    End If
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetListWTASummary(ByVal dr As IDataReader) As WESMBillAllocCoverSummary
        Dim result As New WESMBillAllocCoverSummary
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillAllocCoverSummary
                    item.STLRun = CStr(.Item("STL_RUN"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.StlID = CStr(.Item("STL_ID"))
                    item.BillingID = CStr(.Item("BILLING_ID"))
                    item.NonVatableTag = CStr(.Item("NON_VATABLE_TAG"))
                    item.ZeroRatedTag = CStr(.Item("ZERO_RATED_TAG"))
                    item.WHT = CStr(.Item("WHT_TAG"))
                    item.ITH = CStr(.Item("ITH_TAG"))
                    item.NetSellerBuyerTag = CStr(.Item("NET_SELLER_BUYER_TAG"))
                    item.TransactionNo = CStr(.Item("TRANSACTION_NUMBER"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcoZoneSales = CDec(.Item("ZERO_RATED_ECOZONE_SALES"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.ZeroRatedEcoZonePurchases = CDec(.Item("ZERO_RATED_ECOZONE_PURCHASES"))
                    item.NSSFlowBack = CDec(.Item("NSS_FLOWBACK"))
                    item.VatOnSales = CDec(.Item("VAT_ON_SALES"))
                    item.VatOnPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.EWTSales = CDec(.Item("EWT_SALES"))
                    item.EWTPurchases = CDec(.Item("EWT_PURCHASES"))
                    item.GMR = CDec(.Item("GMR"))
                    item.SpotQty = CDec(.Item("SPOT_QTY"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = CStr(.Item("REMARKS"))
                    item.ListWBAllocDisDetails = GetWBAllocDisDetails(CLng(.Item("SUMMARY_ID")))
                    result = item
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetListWESMTransCoverSummary2(ByVal dr As IDataReader) As List(Of WESMBillAllocCoverSummary)
        Dim result As New List(Of WESMBillAllocCoverSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillAllocCoverSummary
                    item.SummaryId = CLng(.Item("SUMMARY_ID"))
                    item.STLRun = CStr(.Item("STL_RUN"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.StlID = CStr(.Item("STL_ID"))
                    item.BillingID = CStr(.Item("BILLING_ID"))
                    item.NonVatableTag = CStr(.Item("NON_VATABLE_TAG"))
                    item.ZeroRatedTag = CStr(.Item("ZERO_RATED_TAG"))
                    item.WHT = CStr(.Item("WHT_TAG"))
                    item.ITH = CStr(.Item("ITH_TAG"))
                    item.NetSellerBuyerTag = CStr(.Item("NET_SELLER_BUYER_TAG"))
                    item.TransactionNo = CStr(.Item("TRANSACTION_NUMBER"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcoZoneSales = CDec(.Item("ZERO_RATED_ECOZONE_SALES"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.NSSFlowBack = CDec(.Item("NSS_FLOWBACK"))
                    item.VatOnSales = CDec(.Item("VAT_ON_SALES"))
                    item.VatOnPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.EWTSales = CDec(.Item("EWT_SALES"))
                    item.EWTPurchases = CDec(.Item("EWT_PURCHASES"))
                    item.GMR = CDec(.Item("GMR"))
                    item.SpotQty = CDec(.Item("SPOT_QTY"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = CStr(.Item("REMARKS"))
                    item.ListWBAllocDisDetails = New List(Of WESMBillAllocDisaggDetails)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetListWESMTransCoverSummary3(ByVal dr As IDataReader) As List(Of WESMBillAllocCoverSummary)
        Dim result As New List(Of WESMBillAllocCoverSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillAllocCoverSummary
                    item.SummaryId = CLng(.Item("SUMMARY_ID"))
                    item.STLRun = CStr(.Item("STL_RUN"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.StlID = CStr(.Item("STL_ID"))
                    item.BillingID = CStr(.Item("BILLING_ID"))
                    item.NonVatableTag = CStr(.Item("NON_VATABLE_TAG"))
                    item.ZeroRatedTag = CStr(.Item("ZERO_RATED_TAG"))
                    item.WHT = CStr(.Item("WHT_TAG"))
                    item.ITH = CStr(.Item("ITH_TAG"))
                    item.NetSellerBuyerTag = CStr(.Item("NET_SELLER_BUYER_TAG"))
                    item.TransactionNo = CStr(.Item("TRANSACTION_NUMBER"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcoZoneSales = CDec(.Item("ZERO_RATED_ECOZONE_SALES"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.ZeroRatedEcoZonePurchases = CDec(.Item("ZERO_RATED_ECOZONE_PURCHASES"))
                    item.NSSFlowBack = CDec(.Item("NSS_FLOWBACK"))
                    item.VatOnSales = CDec(.Item("VAT_ON_SALES"))
                    item.VatOnPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.EWTSales = CDec(.Item("EWT_SALES"))
                    item.EWTPurchases = CDec(.Item("EWT_PURCHASES"))
                    item.GMR = CDec(.Item("GMR"))
                    item.SpotQty = CDec(.Item("SPOT_QTY"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = CStr(.Item("REMARKS"))
                    item.ListWBAllocDisDetails = GetWBAllocDisDetails(CLng(.Item("SUMMARY_ID")))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
    Public Function GetWBAllocDisDetails(ByVal summaryID As Long) As List(Of WESMBillAllocDisaggDetails)
        Dim ret As New List(Of WESMBillAllocDisaggDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_DISAGG_DETAILS A " & vbNewLine _
                              & "WHERE A.SUMMARY_ID =  " & summaryID
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWBAllocDisDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetWTAllocDisDetailsList(ByVal dueDate As Date) As List(Of WESMBillAllocDisaggDetails)
        Dim ret As New List(Of WESMBillAllocDisaggDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_ALLOC_DISAGG_DETAILS A " & vbNewLine _
                              & "LEFT JOIN  AM_WESM_ALLOC_COVER_SUMMARY B ON B.SUMMARY_ID = A.SUMMARY_ID " & vbNewLine _
                              & "WHERE B.DUE_DATE = TO_DATE('" & dueDate & "','MM/DD/YYYY')"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWBAllocDisDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetWBAllocDisDetails(ByVal dr As IDataReader) As List(Of WESMBillAllocDisaggDetails)
        Dim result As New List(Of WESMBillAllocDisaggDetails)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillAllocDisaggDetails
                    item.STLID = CStr(.Item("STL_ID"))
                    item.BillingID = CStr(.Item("BILLING_ID"))
                    item.FacilityType = CStr(.Item("FACILITY_TYPE"))
                    item.NonVatableTag = CStr(.Item("NON_VATABLE_TAG"))
                    item.ZeroRatedTag = CStr(.Item("ZERO_RATED_TAG"))
                    item.WHTTag = CStr(.Item("WHT"))
                    item.ITHTag = CStr(.Item("ITH"))
                    item.NetSellerBuyerTag = CStr(.Item("NET_SELLER_BUYER_TAG"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcoZoneSales = CDec(.Item("ZERO_RATED_ECOZONE_SALES"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.ZeroRatedEcoZonePurchases = CDec(.Item("ZERO_RATED_ECOZONE_PURCHASES"))
                    item.VatOnSales = CDec(.Item("VAT_ON_SALES"))
                    item.VatOnPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.EWT = CDec(.Item("EWT"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get WESM Transaction Summary Movement Balance"
    Public Function GetListWESMTransDetailsSummary(ByVal transNo As String) As List(Of WESMTransDetailsSummary)
        Dim ret As New List(Of WESMTransDetailsSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_TRANS_DETAILS_SUMMARY A " & vbNewLine _
                              & "WHERE A.BUYER_TRANS_NO = '" & transNo & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransDetailsSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function
    Public Function GetListWESMTransDetailsSummary(ByVal remittanceDate As Date) As List(Of WESMTransDetailsSummary)
        Dim ret As New List(Of WESMTransDetailsSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_TRANS_DETAILS_SUMMARY A " & vbNewLine _
                              & "WHERE LAST_DAY(A.DUE_DATE) = LAST_DAY(TO_DATE('" & remittanceDate.ToShortDateString & "','MM/DD/yyyy'))"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransDetailsSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetListWESMTransDetailsSummary(ByVal dr As IDataReader) As List(Of WESMTransDetailsSummary)
        Dim result As New List(Of WESMTransDetailsSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMTransDetailsSummary
                    item.BuyerTransNo = CStr(.Item("BUYER_TRANS_NO"))
                    item.BuyerBillingID = CStr(.Item("BUYER_BILLING_ID"))
                    item.SellerTransNo = CStr(.Item("SELLER_TRANS_NO"))
                    item.SellerBillingID = CStr(.Item("SELLER_BILLING_ID"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.NewDueDate = CDate(.Item("NEW_DUE_DATE"))
                    item.OrigBalanceInEnergy = CDec(.Item("ORIG_AMOUNT_ENERGY"))
                    item.OrigBalanceInVAT = CDec(.Item("ORIG_AMOUNT_VAT"))
                    item.OrigBalanceInEWT = CDec(.Item("ORIG_AMOUNT_EWT"))
                    item.OutstandingBalanceInEnergy = CDec(.Item("OBIN_ENERGY"))
                    item.OutstandingBalanceInVAT = CDec(.Item("OBIN_VAT"))
                    item.OutstandingBalanceInEWT = CDec(.Item("OBIN_EWT"))
                    item.Status = EnumWESMTransDetailsSummaryStatus.CURRENT.ToString
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get Daily Interest Rate"
    Public Function GetDailyInterestRate() As Dictionary(Of Date, Decimal)
        Dim result As New Dictionary(Of Date, Decimal)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_DAILY_INTEREST_RATE ORDER BY transaction_date"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDailyInterestRate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDailyInterestRate(ByVal dr As IDataReader) As Dictionary(Of Date, Decimal)
        Dim result As New Dictionary(Of Date, Decimal)

        Try
            While dr.Read()
                With dr
                    result.Add(CDate(.Item("TRANSACTION_DATE")), CDec(.Item("INTEREST_RATE")))
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Collection Allocation"

    Public Function GetCollAllocDate() As List(Of AllocationDate)
        Dim result As New List(Of AllocationDate)
        Dim report As New DataReport
        Try

            Dim SQL As String = "SELECT DISTINCT * FROM (" & vbNewLine & _
                                                        "SELECT A.ALLOCATION_DATE FROM AM_COLLECTION A, AM_COLLECTION_ALLOCATION B " & vbNewLine & _
                                                        "WHERE A.COLLECTION_NO = B.COLLECTION_NO AND A.IS_ALLOCATED = 1 AND A.IS_POSTED = 1 AND B.STATUS = 1 " & vbNewLine & _
                                                        "UNION " & vbNewLine & _
                                                        "SELECT A.ALLOCATION_DATE FROM AM_COLLECTION A, AM_COLLECTION_MONITORING B " & vbNewLine & _
                                                        "WHERE A.COLLECTION_NO = B.COLLECTION_NO AND A.IS_ALLOCATED = 1 AND A.IS_POSTED = 1 AND B.STATUS = 1 " & vbNewLine & _
                                                        "AND B.TRANS_TYPE IN (" & vbNewLine & _
                                                                                EnumCollectionMonitoringType.AppliedHeldCollection & ", " & _
                                                                                EnumCollectionMonitoringType.TransferToHeldCollection & ", " & _
                                                                                EnumCollectionMonitoringType.TransferToExcessCollection & ", " & _
                                                                                EnumCollectionMonitoringType.TransferToPRReplenishment & ", " & _
                                                                                EnumCollectionMonitoringType.TransferToPRDrawdown & ", " & _
                                                                                EnumCollectionMonitoringType.TransferToPEMCAccount & ")" & _
                                                                                ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollAllocDateList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetCollAllocDateList(ByVal reader As IDataReader) As List(Of AllocationDate)
        Dim result As New List(Of AllocationDate)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(New AllocationDate(CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")))), 0))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetCollectionAllocation(ByVal DateFrom As Date, ByVal DateTo As Date) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND a.allocation_date BETWEEN to_date('" & _
                  DateFrom & "', 'mm/dd/yyyy') AND to_date('" & DateTo & "', 'mm/dd/yyyy')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocation() As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDicCollectionAllocation(ByVal alloc_date As String, ByVal col_no As Long) As Dictionary(Of Long, Date)
        Dim result As New Dictionary(Of Long, Date)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.wesmbill_summary_no, TO_CHAR(a.updated_date,'mm/dd/yyyy HH:MI:SS') as UPDATED_DATE, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b, AM_COLLECTION c " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND a.collection_no = " & col_no & " AND " & _
                  "a.allocation_date = to_date('" & alloc_date & "','mm/dd/yyyy')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDicCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocationList(ByVal alloc_date As String, ByVal col_no As Long, ByVal updated_date As Date) As Dictionary(Of Long, Long)
        Dim result As New Dictionary(Of Long, Long)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type, c.or_no FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b, AM_COLLECTION c " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND a.collection_no = c.collection_no AND a.collection_no <> " & col_no & " AND " & _
                  "a.allocation_date = to_date('" & alloc_date & "','mm/dd/yyyy') AND TO_DATE(TO_CHAR(a.updated_date,'mm/dd/yyyy hh:mi:ss'),'mm/dd/yyyy hh:mi:ss') > TO_DATE('" & updated_date.ToString("MM/dd/yyyy hh:mm:ss") & "','mm/dd/yyyy hh:mi:ss')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDicCollectionAllocation2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Public Function GetCollectionAllocation(ByVal alloc_date As String, ByVal col_no As Integer, ByVal or_no As Integer) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND a.collection_no = " & col_no & " AND " & _
                  "a.allocation_date = to_date('" & alloc_date & "','mm/dd/yyyy') AND "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocationBySummaryNo(ByVal WESMBillNo As Long) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND WESMBILL_SUMMARY_NO = " & WESMBillNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocation(ByVal AllocationDate As Date) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 " & _
                  "AND A.ALLOCATION_DATE = TO_DATE('" & AllocationDate & "','MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocationPerWESMBillNo(ByVal WESMBillNo As Long) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 " & _
                  "AND A.WESMBILL_SUMMARY_NO = " & WESMBillNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocation(ByVal CollectionNumber As Long) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND a.collection_no = " & CollectionNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocationByYear(ByVal SelectedYear As String) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            SQL = "SELECT b.*, c.inv_dm_cm, c.summary_type, c.charge_type, b.id_number, d.participant_id " & vbNewLine _
                & "FROM am_collection a, am_collection_allocation b, am_wesm_bill_summary c, am_participants d " & vbNewLine _
                & "WHERE a.collection_no = b.collection_no And b.wesmbill_summary_no = c.wesmbill_summary_no " & vbNewLine _
                & "AND a.status <> 0 AND b.status = 1 AND b.id_number = d.id_number AND " & vbNewLine _
                & "to_char(a.collection_date, 'YYYY') = '" & SelectedYear & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocationParticipant(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Public Function GetCollectionAllocation(ByVal DateFrom As Date, ByVal DateTo As Date, _
                                            ByVal IsCollectionDate As Boolean) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If IsCollectionDate Then
                SQL = "SELECT b.*, c.inv_dm_cm, c.summary_type, c.charge_type " & _
                      "FROM AM_COLLECTION a, AM_COLLECTION_ALLOCATION b, AM_WESM_BILL_SUMMARY c " & _
                      "WHERE a.collection_no = b.collection_no And b.wesmbill_summary_no = c.wesmbill_summary_no " & _
                      "AND a.status <> 0 AND  b.status = 1 AND " & _
                      "a.collection_date BETWEEN TO_DATE('" & FormatDateTime(DateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') " & _
                      "AND TO_DATE('" & FormatDateTime(DateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY hh:mi:ss PM') "
            Else
                SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type " & _
                      "FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b " & _
                      "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no " & _
                      "AND a.status = 1 AND " & _
                      "a.allocation_date BETWEEN TO_DATE('" & FormatDateTime(DateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') " & _
                      "AND TO_DATE('" & FormatDateTime(DateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY hh:mi:ss PM') "
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocation(ByVal BillingPeriod As Integer, ByVal DueDate As Date, _
                                            ByVal ChargeType As EnumChargeType) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If ChargeType = EnumChargeType.E Or ChargeType = EnumChargeType.EV Then
                SQL = "SELECT b.ID_NUMBER, c.PARTICIPANT_ID, b.INV_DM_CM, b.SUMMARY_TYPE, b.CHARGE_TYPE, a.*  " & _
                      "FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b, AM_PARTICIPANTS c " & _
                      "WHERE a.WESMBILL_SUMMARY_NO = b.WESMBILL_SUMMARY_NO And b.ID_NUMBER = c.ID_NUMBER " & _
                      "AND a.status = 1 AND (b.CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' " & _
                      "OR b.CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') AND " & _
                      "b.BILLING_PERIOD = " & BillingPeriod & " AND b.DUE_DATE = TO_DATE('" & DueDate & "','MM/DD/YYYY')"
            Else
                SQL = "SELECT b.ID_NUMBER, c.PARTICIPANT_ID, b.INV_DM_CM, b.SUMMARY_TYPE, b.CHARGE_TYPE, a.*  " & _
                      "FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b, AM_PARTICIPANTS c " & _
                      "WHERE a.WESMBILL_SUMMARY_NO = b.WESMBILL_SUMMARY_NO And b.ID_NUMBER = c.ID_NUMBER " & _
                      "AND a.status = 1 AND (b.CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' " & _
                      "OR b.CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') AND " & _
                      "b.BILLING_PERIOD = " & BillingPeriod & " AND b.DUE_DATE = TO_DATE('" & DueDate & "','MM/DD/YYYY')"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocationParticipant(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocation(ByVal BatchCode As String) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type " & _
                  "FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b, AM_COLLECTION c " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND a.collection_no = c.collection_no " & _
                  "AND c.batch_code ='" & BatchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocation(ByVal status As EnumCollectionStatus) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.inv_dm_cm, b.summary_type, b.charge_type " & _
                  "FROM AM_COLLECTION_ALLOCATION a, AM_WESM_BILL_SUMMARY b, AM_COLLECTION c " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND a.status = 1 AND a.collection_no = c.collection_no " & _
                  "AND c.status = " & status

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocation(ByVal AllocationDate As Date, ByVal AllocationType As EnumAllocationType) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT b.*, c.inv_dm_cm, c.summary_type, c.charge_type " & _
                  "FROM AM_COLLECTION a, AM_COLLECTION_ALLOCATION b, AM_WESM_BILL_SUMMARY c " & _
                  "WHERE a.collection_no = b.collection_no And b.wesmbill_summary_no = c.wesmbill_summary_no " & _
                  "AND a.status <> 0 AND  b.status = 1 AND " & _
                  "a.allocation_date = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') " & _
                  "AND a.batch_code IS NULL AND a.allocation_type = " & AllocationType


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionDISummary(ByVal FromDate As Date, ByVal ToDate As Date) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT b.*,c.due_date as BillDue, c.inv_dm_cm, c.summary_type, c.charge_type, d.id_number " & _
                  "FROM AM_COLLECTION a, AM_COLLECTION_ALLOCATION b, AM_WESM_BILL_SUMMARY c, AM_PARTICIPANTS d " & _
                  "WHERE a.collection_no = b.collection_no And b.wesmbill_summary_no = c.wesmbill_summary_no " & _
                  "AND a.status <> 0 AND  b.status = 1 AND C.ID_NUMBER = D.ID_NUMBER AND " & _
                  "a.allocation_date BETWEEN TO_DATE('" & FromDate & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS PM') " & _
                  "AND TO_DATE('" & ToDate & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionDISummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocationAging(ByVal lstWESMBillNo As List(Of Long)) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT b.*, c.inv_dm_cm, c.summary_type, c.charge_type " & _
                      "FROM AM_COLLECTION a, AM_COLLECTION_ALLOCATION b, AM_WESM_BILL_SUMMARY c " & _
                      "WHERE a.collection_no = b.collection_no And b.wesmbill_summary_no = c.wesmbill_summary_no " & _
                      "AND a.status <> 0 AND  b.status = 1 " & _
                      "AND B.WESMBILL_SUMMARY_NO IN ("

            Dim recCtr As Long = 0
            For Each itmWESMNo In lstWESMBillNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmWESMNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR B.WESMBILL_SUMMARY_NO IN ("
                    End If
                    SQL &= itmWESMNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDicCollectionAllocation2(ByVal dr As IDataReader) As Dictionary(Of Long, Long)

        Dim result As New Dictionary(Of Long, Long)

        Try
            While dr.Read()
                With dr
                    If Not result.ContainsKey(CLng(.Item("WESMBILL_SUMMARY_NO"))) Then
                        result.Add(CLng(.Item("WESMBILL_SUMMARY_NO")), CLng(.Item("OR_NO").ToString))
                    End If
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Private Function GetDicCollectionAllocation(ByVal dr As IDataReader) As Dictionary(Of Long, Date)

        Dim result As New Dictionary(Of Long, Date)

        Try
            While dr.Read()
                With dr
                    If Not result.ContainsKey(CLng(.Item("WESMBILL_SUMMARY_NO"))) Then
                        result.Add(CLng(.Item("WESMBILL_SUMMARY_NO")), CDate(.Item("UPDATED_DATE").ToString))
                    End If
                End With                
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Private Function GetCollectionAllocation(ByVal dr As IDataReader) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)

        Try
            While dr.Read()
                Dim item As New CollectionAllocation

                With dr
                    item.WESMBillSummaryNo = New WESMBillSummary(CLng(.Item("WESMBILL_SUMMARY_NO")), CStr(.Item("INV_DM_CM")), _
                                                                 CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType), _
                                                                 CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType), _
                                                                 CDate(.Item("DUE_DATE")), CDec(.Item("ENERGY_WITHHOLD")))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD").ToString)
                    item.CollectionNumber = CLng(.Item("COLLECTION_NO").ToString)
                    item.Amount = CDec(.Item("AMOUNT").ToString)
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE").ToString)
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE").ToString)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString)
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString)
                    item.CollectionType = CType(System.Enum.Parse(GetType(EnumCollectionType), CStr(.Item("COLLECTION_TYPE").ToString)), EnumCollectionType)
                    item.Status = CInt(.Item("STATUS").ToString)
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE").ToString)
                    item.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    item.ReferenceNumber = CStr(.Item("AM_REF_NO"))
                    item.ReferenceType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("AM_REF_TYPE").ToString)), EnumSummaryType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetCollectionAllocationParticipant(ByVal dr As IDataReader) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)

        Try
            While dr.Read()
                Dim item As New CollectionAllocation

                With dr
                    item.WESMBillSummaryNo = New WESMBillSummary(CLng(.Item("WESMBILL_SUMMARY_NO")), CStr(.Item("INV_DM_CM")), _
                                                                 CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType), _
                                                                 CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType), _
                                                                 New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID"))))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD").ToString)
                    item.CollectionNumber = CLng(.Item("COLLECTION_NO").ToString)
                    item.Amount = CDec(.Item("AMOUNT").ToString)
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE").ToString)
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE").ToString)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString)
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString)
                    item.CollectionType = CType(System.Enum.Parse(GetType(EnumCollectionType), CStr(.Item("COLLECTION_TYPE").ToString)), EnumCollectionType)
                    item.Status = CInt(.Item("STATUS").ToString)
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE").ToString)
                    item.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    item.ReferenceNumber = CStr(.Item("AM_REF_NO"))
                    item.ReferenceType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("AM_REF_TYPE").ToString)), EnumSummaryType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetCollectionDISummary(ByVal dr As IDataReader) As List(Of CollectionAllocation)
        Dim result As New List(Of CollectionAllocation)

        Try
            While dr.Read()
                Dim item As New CollectionAllocation

                With dr
                    item.WESMBillSummaryNo = New WESMBillSummary(CLng(.Item("WESMBILL_SUMMARY_NO")), CStr(.Item("INV_DM_CM")), _
                                                                 CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType), _
                                                                 CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType), _
                                                                 CDate(.Item("BillDue")))
                    item.WESMBillSummaryNo.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD").ToString)
                    item.CollectionNumber = CLng(.Item("COLLECTION_NO").ToString)
                    item.Amount = CDec(.Item("AMOUNT").ToString)
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE").ToString)
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE").ToString)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString)
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString)
                    item.CollectionType = CType(System.Enum.Parse(GetType(EnumCollectionType), CStr(.Item("COLLECTION_TYPE").ToString)), EnumCollectionType)
                    item.Status = CInt(.Item("STATUS").ToString)
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE").ToString)
                    item.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    item.ReferenceNumber = CStr(.Item("AM_REF_NO"))
                    item.ReferenceType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("AM_REF_TYPE").ToString)), EnumSummaryType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Invoices for NSSRA"
    Public Function GetWESMInvoicesForNSSAndNSSRA(ByVal billingperiod As Integer) As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT * FROM AM_WESM_INVOICE  " & _
                                "WHERE charge_id ='" & AMModule.NSSRACode & "' " & _
                                "AND billing_period = " & billingperiod

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoices(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Invoices"
    Public Function GetWESMInvoices(ByVal StartOfMonth As Date, ByVal EndOfMonth As Date, ByVal IDNumber As String) As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)
        Dim report As New DataReport
        Dim SQL As String
        Try            
            If IDNumber.Length = 0 Then
                SQL = "SELECT * FROM AM_WESM_INVOICE " & _
                  "WHERE INVOICE_DATE BETWEEN " & _
                  "TO_DATE('" & CDate(StartOfMonth.ToShortDateString) & "','MM/DD/YYYY') " & _
                  "AND TO_DATE('" & CDate(EndOfMonth.ToShortDateString) & "','MM/DD/YYYY') "
            Else
                SQL = "SELECT * FROM AM_WESM_INVOICE " & _
                  "WHERE INVOICE_DATE BETWEEN " & _
                  "TO_DATE('" & CDate(StartOfMonth.ToShortDateString) & "','MM/DD/YYYY') " & _
                  "AND TO_DATE('" & CDate(EndOfMonth.ToShortDateString) & "','MM/DD/YYYY') " & _
                  "AND ID_NUMBER = '" & IDNumber & "' "
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoices(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMInvoices(ByVal billingperiod As Integer, ByVal settlementrun As String, _
                                    ByVal filetype As EnumFileType) As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_INVOICE_PRINT  " & _
                  "WHERE billing_period = " & billingperiod & " " & _
                  "AND stl_run = '" & settlementrun & "' AND file_type = " & CInt(filetype) & " " & _
                  "ORDER BY invoice_no, charge_id"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoices(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetNewWESMInvoicesDueDate() As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT DUE_DATE FROM AM_WESM_INVOICE"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetNewWESMInvoicesDueDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetNewWESMInvoicesDueDate(ByVal dr As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)

        Try
            While dr.Read()
                With dr
                    result.Add(CDate(.Item("DUE_DATE")))
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Public Function GetWESMInvoices() As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_INVOICE"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoices(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMInvoices(ByVal InvoiceNumber As String) As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_INVOICE  " & _
                  "WHERE INVOICE_NO = '" & InvoiceNumber & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoices(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
    Public Function GetWESMInvoices(ByVal duedate As Date) As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_INVOICE WHERE DUE_DATE = TO_DATE('" & duedate & "', 'mm/dd/yyyy')"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoices(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetWESMInvoices(ByVal dr As IDataReader) As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)

        Try
            While dr.Read()
                Dim item As New WESMInvoice

                With dr
                    item.FileType = CType(System.Enum.Parse(GetType(EnumFileType), CStr(.Item("FILE_TYPE"))), EnumFileType)
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.RegistrationID = CStr(.Item("REG_ID"))
                    item.ForTheAccountOf = CStr(.Item("FOR_ACCOUNT_OF").ToString())
                    item.FullName = CStr(.Item("FULL_NAME").ToString())
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    item.InvoiceDate = CDate(.Item("INVOICE_DATE"))
                    item.Quantity = CDec(.Item("QUANTITY"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.ChargeID = CStr(.Item("CHARGE_ID"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = .Item("REMARKS").ToString()
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Filter Values for WESMBill"
    Public Function GetFilterValuesForWESMInvoice() As List(Of WESMInvoice)

        Dim result As New List(Of WESMInvoice)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT file_type, billing_period, stl_run " & _
                  "FROM AM_WESM_INVOICE"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            result = Me.GetFilterValuesForWESMInvoice(report.ReturnedIDatareader)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetFilterValuesForWESMInvoice(ByVal dr As IDataReader) As List(Of WESMInvoice)
        Dim result As New List(Of WESMInvoice)

        Try
            While dr.Read()
                With dr
                    Dim item As New WESMInvoice

                    item.FileType = CType(System.Enum.Parse(GetType(EnumFileType), CStr(.Item("FILE_TYPE"))), EnumFileType)
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    result.Add(item)
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Save AM Participants"
    Public Sub SaveAMParticipant(ByVal item As AMParticipants, ByVal Tag As Boolean)
        Dim report As New DataReport
        Dim ds As New DataSet, dt As New DataTable
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            If Tag Then
                dt.TableName = "AM_PARTICIPANTS"
                With dt.Columns
                    .Add("ID_NUMBER", GetType(String))
                    .Add("PARTICIPANT_ID", GetType(String))
                    .Add("FULL_NAME", GetType(String))
                    .Add("BUSINESS_STYLE", GetType(String))
                    .Add("ECOZONE_REG_CERT_NO", GetType(String))
                    .Add("ECOZONE_EFFECTIVITY_DATE", GetType(Date))
                    .Add("GEN_LOAD", GetType(String))
                    .Add("PARTICIPANT_ADDRESS", GetType(String))
                    .Add("BILLING_ADDRESS", GetType(String))
                    .Add("CITY", GetType(String))
                    .Add("PROVINCE", GetType(String))
                    .Add("ZIP_CODE", GetType(String))
                    .Add("REGION", GetType(String))
                    .Add("MFWHTAX", GetType(Decimal))
                    .Add("MFWHVAT", GetType(Decimal))
                    .Add("ENERGY_WHTAX", GetType(Decimal))
                    .Add("ENERGY_WHVAT", GetType(Decimal))
                    .Add("BANK_TRANS_CODE", GetType(String))
                    .Add("BANK_ACCT_NO", GetType(String))
                    .Add("BANK", GetType(String))
                    .Add("BANK_BRANCH", GetType(String))
                    .Add("CHECK_PAY", GetType(String))
                    .Add("VIRTUAL_ACCOUNT_NO", GetType(String))
                    .Add("PAYMENT_TYPE", GetType(Integer))
                    .Add("REP_TITLE", GetType(String))
                    .Add("REP_FNAME", GetType(String))
                    .Add("REP_MNAME", GetType(String))
                    .Add("REP_LNAME", GetType(String))
                    .Add("REP_POSITION", GetType(String))
                    .Add("REP_CONTACT", GetType(String))
                    .Add("REP_EMAIL", GetType(String))
                    .Add("TIN", GetType(String))
                    .Add("BIR_ATC_TYPE", GetType(String))
                    .Add("ZERO_RATED_MARKET_FEES", GetType(Integer))
                    .Add("ZERO_RATED_ENERGY", GetType(Integer))
                    .Add("STATUS", GetType(Integer))
                    .Add("UPDATED_BY", GetType(String))
                End With
                dt.AcceptChanges()

                With item
                    Dim row = dt.NewRow()                    
                    row("ID_NUMBER") = .IDNumber
                    row("PARTICIPANT_ID") = .ParticipantID

                    row("FULL_NAME") = .FullName.ToString
                    row("BUSINESS_STYLE") = .BusinessStyle.ToString
                    row("ECOZONE_REG_CERT_NO") = .EcoZoneRegCertificateNo
                    If .EcoZoneRegCertificateNo.Length <> 0 Then
                        row("ECOZONE_EFFECTIVITY_DATE") = .EcoZoneEffectiveDate
                    End If

                    row("GEN_LOAD") = .GenLoad.ToString
                    row("PARTICIPANT_ADDRESS") = .ParticipantAddress.ToString
                    row("BILLING_ADDRESS") = .BillingAddress.ToString
                    row("CITY") = .City.ToString
                    row("PROVINCE") = .Province.ToString
                    row("ZIP_CODE") = .ZipCode.ToString
                    row("REGION") = .Region.ToString

                    row("MFWHTAX") = .MarketFeesWHTax
                    row("MFWHVAT") = .MarketFeesWHVAT
                    row("ENERGY_WHTAX") = .EnergyWHTax
                    row("ENERGY_WHVAT") = .EnergyWHVAT

                    row("BANK_TRANS_CODE") = .BankTransactionCode
                    row("BANK_ACCT_NO") = .BankAccountNo
                    row("BANK") = .Bank
                    row("BANK_BRANCH") = .BankBranch
                    row("CHECK_PAY") = .CheckPay

                    row("PAYMENT_TYPE") = .PaymentType
                    row("REP_TITLE") = .Representative.Title
                    row("REP_FNAME") = .Representative.FName
                    row("REP_MNAME") = .Representative.MName
                    row("REP_LNAME") = .Representative.LName
                    row("REP_POSITION") = .Representative.Position
                    row("REP_CONTACT") = .Representative.Contact
                    row("REP_EMAIL") = .Representative.EmailAddress

                    row("TIN") = .TIN
                    row("BIR_ATC_TYPE") = .BIRATCType.ToString
                    row("ZERO_RATED_MARKET_FEES") = IIf(.ZeroRatedEnergy, 1, 0)
                    row("ZERO_RATED_ENERGY") = IIf(.ZeroRatedMarketFees, 1, 0)
                    row("STATUS") = .Status
                    row("UPDATED_BY") = AMModule.UserName

                    dt.Rows.Add(row)
                End With

                ds.Tables.Add(dt)
                ds.AcceptChanges()

            Else
                With item
                    Dim EcozoneEffectivityDate As String = ""
                    Dim ZeroRatedMF As Integer, ZeroRatedEnergy As Integer

                    If .EcoZoneEffectiveDate <> Nothing Then
                        EcozoneEffectivityDate = "ECOZONE_EFFECTIVITY_DATE = TO_DATE('" & .EcoZoneEffectiveDate & "','MM/DD/YYYY') "
                    Else
                        EcozoneEffectivityDate = " ECOZONE_EFFECTIVITY_DATE = NULL "
                    End If

                    If .ZeroRatedMarketFees Then
                        ZeroRatedMF = 1
                    Else
                        ZeroRatedMF = 0
                    End If

                    If .ZeroRatedEnergy Then
                        ZeroRatedEnergy = 1
                    Else
                        ZeroRatedEnergy = 0
                    End If

                    SQL = "UPDATE AM_PARTICIPANTS SET PARTICIPANT_ID ='" & .ParticipantID & "', " & _
                                                      "FULL_NAME ='" & .FullName & "', " & _
                                                      "BUSINESS_STYLE ='" & .BusinessStyle & "', " & _
                                                      "ECOZONE_REG_CERT_NO = '" & .EcoZoneRegCertificateNo & "', " & _
                                                      EcozoneEffectivityDate & ", " & _
                                                      "GEN_LOAD = '" & .GenLoad.ToString() & "'," & _
                                                      "PARTICIPANT_ADDRESS = '" & .ParticipantAddress & "'," & _
                                                      "BILLING_ADDRESS = '" & .BillingAddress & "'," & _
                                                      "CITY = '" & .City & "'," & _
                                                      "PROVINCE = '" & .Province & "'," & _
                                                      "ZIP_CODE = '" & .ZipCode & "'," & _
                                                      "REGION = '" & .Region & "'," & _
                                                      "MFWHTAX = " & .MarketFeesWHTax & "," & _
                                                      "MFWHVAT =" & .MarketFeesWHVAT & "," & _
                                                      "ENERGY_WHTAX = " & .EnergyWHTax & "," & _
                                                      "ENERGY_WHVAT = " & .EnergyWHVAT & "," & _
                                                      "BANK_TRANS_CODE = '" & .BankTransactionCode & "'," & _
                                                      "BANK_ACCT_NO = '" & .BankAccountNo & "'," & _
                                                      "BANK = '" & .Bank & "'," & _
                                                      "BANK_BRANCH = '" & .BankBranch & "'," & _
                                                      "CHECK_PAY ='" & .CheckPay & "'," & _
                                                      "PAYMENT_TYPE = " & CInt(.PaymentType) & "," & _
                                                      "REP_TITLE = '" & .Representative.Title & "'," & _
                                                      "REP_FNAME = '" & .Representative.FName & "'," & _
                                                      "REP_MNAME = '" & .Representative.MName & "'," & _
                                                      "REP_LNAME = '" & .Representative.LName & "'," & _
                                                      "REP_POSITION = '" & .Representative.Position & "'," & _
                                                      "REP_CONTACT = '" & .Representative.Contact & "'," & _
                                                      "REP_EMAIL = '" & .Representative.EmailAddress & "'," & _
                                                      "TIN = '" & .TIN & "'," & _
                                                      "BIR_ATC_TYPE = '" & .BIRATCType & "', " & _
                                                      "ZERO_RATED_MARKET_FEES = " & ZeroRatedMF & "," & _
                                                      "ZERO_RATED_ENERGY = " & ZeroRatedEnergy & "," & _
                                                      "STATUS = " & CInt(.Status) & "," & _
                                                      "UPDATED_BY ='" & AMModule.UserName & "', " & _
                                                      "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE id_number = '" & .IDNumber & "'"
                End With
                listSQL.Add(SQL)
            End If
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub SaveAMParticipantList(ByVal participantList As List(Of AMParticipants))
        Dim report As New DataReport
        Dim ds As New DataSet, dt As New DataTable
        Dim listSQL As New List(Of String)
        Try
            dt.TableName = "AM_PARTICIPANTS"
            With dt.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("PARTICIPANT_ID", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("BUSINESS_STYLE", GetType(String))
                .Add("ECOZONE_REG_CERT_NO", GetType(String))
                .Add("ECOZONE_EFFECTIVITY_DATE", GetType(Date))
                .Add("GEN_LOAD", GetType(String))
                .Add("PARTICIPANT_ADDRESS", GetType(String))
                .Add("BILLING_ADDRESS", GetType(String))
                .Add("CITY", GetType(String))
                .Add("PROVINCE", GetType(String))
                .Add("ZIP_CODE", GetType(String))
                .Add("REGION", GetType(String))
                .Add("MFWHTAX", GetType(Decimal))
                .Add("MFWHVAT", GetType(Decimal))
                .Add("ENERGY_WHTAX", GetType(Decimal))
                .Add("ENERGY_WHVAT", GetType(Decimal))
                .Add("BANK_TRANS_CODE", GetType(String))
                .Add("BANK_ACCT_NO", GetType(String))
                .Add("BANK", GetType(String))
                .Add("BANK_BRANCH", GetType(String))
                .Add("CHECK_PAY", GetType(String))
                .Add("VIRTUAL_ACCOUNT_NO", GetType(String))
                .Add("PAYMENT_TYPE", GetType(Integer))
                .Add("REP_TITLE", GetType(String))
                .Add("REP_FNAME", GetType(String))
                .Add("REP_MNAME", GetType(String))
                .Add("REP_LNAME", GetType(String))
                .Add("REP_POSITION", GetType(String))
                .Add("REP_CONTACT", GetType(String))
                .Add("REP_EMAIL", GetType(String))
                .Add("TIN", GetType(String))
                .Add("BIR_ATC_TYPE", GetType(String))
                .Add("ZERO_RATED_MARKET_FEES", GetType(Integer))
                .Add("ZERO_RATED_ENERGY", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dt.AcceptChanges()
            For Each item In participantList
                With item
                    Dim row = dt.NewRow()
                    row("ID_NUMBER") = .IDNumber
                    row("PARTICIPANT_ID") = .ParticipantID

                    row("FULL_NAME") = .FullName.ToString
                    row("BUSINESS_STYLE") = .BusinessStyle.ToString
                    If IsNothing(.EcoZoneRegCertificateNo) Then
                        row("ECOZONE_REG_CERT_NO") = ""
                    Else
                        row("ECOZONE_REG_CERT_NO") = .EcoZoneRegCertificateNo
                        If .EcoZoneRegCertificateNo.ToString.Length <> 0 Then
                            row("ECOZONE_EFFECTIVITY_DATE") = .EcoZoneEffectiveDate
                        End If
                    End If


                    row("GEN_LOAD") = .GenLoad.ToString
                    row("PARTICIPANT_ADDRESS") = .ParticipantAddress.ToString
                    row("BILLING_ADDRESS") = .BillingAddress.ToString
                    row("CITY") = .City.ToString
                    row("PROVINCE") = .Province.ToString
                    row("ZIP_CODE") = .ZipCode.ToString
                    row("REGION") = .Region.ToString

                    row("MFWHTAX") = .MarketFeesWHTax
                    row("MFWHVAT") = .MarketFeesWHVAT
                    row("ENERGY_WHTAX") = .EnergyWHTax
                    row("ENERGY_WHVAT") = .EnergyWHVAT

                    row("BANK_TRANS_CODE") = .BankTransactionCode
                    row("BANK_ACCT_NO") = .BankAccountNo
                    row("BANK") = .Bank
                    row("BANK_BRANCH") = .BankBranch
                    row("CHECK_PAY") = .CheckPay

                    row("PAYMENT_TYPE") = .PaymentType
                    row("REP_TITLE") = .Representative.Title
                    row("REP_FNAME") = .Representative.FName
                    row("REP_MNAME") = .Representative.MName
                    row("REP_LNAME") = .Representative.LName
                    row("REP_POSITION") = .Representative.Position
                    row("REP_CONTACT") = .Representative.Contact
                    row("REP_EMAIL") = .Representative.EmailAddress

                    row("TIN") = .TIN
                    row("BIR_ATC_TYPE") = .BIRATCType.ToString
                    row("ZERO_RATED_MARKET_FEES") = IIf(.ZeroRatedEnergy, 1, 0)
                    row("ZERO_RATED_ENERGY") = IIf(.ZeroRatedMarketFees, 1, 0)
                    row("STATUS") = .Status
                    row("UPDATED_BY") = AMModule.UserName

                    dt.Rows.Add(row)
                End With
            Next            
            ds.Tables.Add(dt)
            ds.AcceptChanges()
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get AM Participants"
    Public Function GetAMParticipantsAll() As List(Of AMParticipants)
        Dim result As New List(Of AMParticipants)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_PARTICIPANTS ORDER BY PARTICIPANT_ID"

            Me.DataAccess.ConnectionString = AMModule.ConnectionString
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetAMParticipants() As List(Of AMParticipants)
        Dim result As New List(Of AMParticipants)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_PARTICIPANTS " & _
                                "WHERE status = " & EnumStatus.Active & " ORDER BY PARTICIPANT_ID"

            Me.DataAccess.ConnectionString = AMModule.ConnectionString
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetAMParticipants(ByVal IDNumber As String) As List(Of AMParticipants)
        Dim result As New List(Of AMParticipants)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_PARTICIPANTS " & _
                                "WHERE ID_NUMBER = '" & IDNumber & "'"

            Me.DataAccess.ConnectionString = AMModule.ConnectionString
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAMParticipants(ByVal dr As IDataReader) As List(Of AMParticipants)
        Dim result As New List(Of AMParticipants)
        Dim index As Integer = 0
        Try
            While dr.Read()
                With dr
                    index += 1
                    Dim item As New AMParticipants                    
                    item.IDNumber = CStr(.Item("ID_NUMBER").ToString())
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID").ToString())
                    item.FullName = CStr(.Item("FULL_NAME").ToString())
                    item.BusinessStyle = CStr(.Item("BUSINESS_STYLE").ToString())
                    item.EcoZoneRegCertificateNo = CStr(.Item("ECOZONE_REG_CERT_NO").ToString())
                    item.EcoZoneEffectiveDate = CDate(IIf(.Item("ECOZONE_EFFECTIVITY_DATE").ToString().Length <> 0, _
                                                          .Item("ECOZONE_EFFECTIVITY_DATE"), Nothing))                    
                    item.GenLoad = CType(System.Enum.Parse(GetType(EnumGenLoad), CStr(.Item("GEN_LOAD"))), EnumGenLoad)
                    item.ParticipantAddress = CStr(.Item("PARTICIPANT_ADDRESS").ToString())
                    item.BillingAddress = CStr(.Item("BILLING_ADDRESS").ToString())
                    item.City = CStr(.Item("CITY").ToString())
                    item.Province = CStr(.Item("PROVINCE").ToString())
                    item.ZipCode = CStr(.Item("ZIP_CODE").ToString())
                    item.Region = CStr(.Item("REGION").ToString())
                    item.MarketFeesWHTax = CDec(.Item("MFWHTAX").ToString())
                    item.MarketFeesWHVAT = CDec(.Item("MFWHVAT").ToString())
                    item.EnergyWHTax = CDec(.Item("ENERGY_WHTAX").ToString())
                    item.EnergyWHVAT = CDec(.Item("ENERGY_WHVAT").ToString())
                    item.BankTransactionCode = CStr(.Item("BANK_TRANS_CODE").ToString())
                    item.BankAccountNo = CStr(.Item("BANK_ACCT_NO").ToString())
                    item.Bank = CStr(.Item("BANK").ToString())
                    item.BankBranch = CStr(.Item("BANK_BRANCH").ToString())
                    item.CheckPay = CStr(.Item("CHECK_PAY").ToString())
                    item.VirtualAccountNo = CStr(.Item("VIRTUAL_ACCOUNT_NO").ToString())
                    item.PaymentType = CType(System.Enum.Parse(GetType(EnumParticipantPaymentType), CStr(.Item("PAYMENT_TYPE"))),  _
                                        EnumParticipantPaymentType)
                    item.Representative = New ParticipantRepresentative(.Item("REP_TITLE").ToString, .Item("REP_FNAME").ToString(),
                                                                        .Item("REP_MNAME").ToString(), .Item("REP_LNAME").ToString(),
                                                                        .Item("REP_POSITION").ToString(),.Item("REP_CONTACT").ToString(), .Item("REP_EMAIL").ToString())
                    item.TIN = CStr(.Item("TIN").ToString())
                    item.BIRATCType = CStr(.Item("BIR_ATC_TYPE").ToString)
                    item.ZeroRatedMarketFees = CBool(IIf(CInt(.Item("ZERO_RATED_MARKET_FEES")) = 1, True, False))
                    item.ZeroRatedEnergy = CBool(IIf(CInt(.Item("ZERO_RATED_ENERGY")) = 1, True, False))
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), CStr(.Item("STATUS"))), EnumStatus)
                    item.MembershipType = CStr(.Item("MEMBERSHIP_TYPE").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message & ":Index(" & index & ")")
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetDicAMParticipantsByParticipantID() As Dictionary(Of String, AMParticipants)
        Dim result As New Dictionary(Of String, AMParticipants)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_PARTICIPANTS ORDER BY PARTICIPANT_ID"

            Me.DataAccess.ConnectionString = AMModule.ConnectionString
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDicAMParticipantsByParticipantID(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDicAMParticipantsByParticipantID(ByVal dr As IDataReader) As Dictionary(Of String, AMParticipants)
        Dim result As New Dictionary(Of String, AMParticipants)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1               
                With dr
                    Dim item As New AMParticipants                    
                    item.IDNumber = CStr(.Item("ID_NUMBER").ToString())
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID").ToString())
                    item.FullName = CStr(.Item("FULL_NAME").ToString())
                    item.BusinessStyle = CStr(.Item("BUSINESS_STYLE").ToString())
                    item.EcoZoneRegCertificateNo = CStr(.Item("ECOZONE_REG_CERT_NO").ToString())
                    item.EcoZoneEffectiveDate = CDate(IIf(.Item("ECOZONE_EFFECTIVITY_DATE").ToString().Length <> 0, _
                                                          .Item("ECOZONE_EFFECTIVITY_DATE"), Nothing))
                    item.GenLoad = CType(System.Enum.Parse(GetType(EnumGenLoad), CStr(.Item("GEN_LOAD"))), EnumGenLoad)
                    item.ParticipantAddress = CStr(.Item("PARTICIPANT_ADDRESS").ToString())
                    item.City = CStr(.Item("CITY").ToString())
                    item.Province = CStr(.Item("PROVINCE").ToString())
                    item.ZipCode = CStr(.Item("ZIP_CODE").ToString())
                    item.Region = CStr(.Item("REGION").ToString())
                    item.MarketFeesWHTax = CDec(.Item("MFWHTAX"))
                    item.MarketFeesWHVAT = CDec(.Item("MFWHVAT"))
                    item.EnergyWHTax = CDec(.Item("ENERGY_WHTAX"))
                    item.EnergyWHVAT = CDec(.Item("ENERGY_WHVAT"))
                    item.BankTransactionCode = .Item("BANK_TRANS_CODE").ToString()
                    item.BankAccountNo = .Item("BANK_ACCT_NO").ToString()
                    item.Bank = .Item("BANK").ToString()
                    item.BankBranch = .Item("BANK_BRANCH").ToString()
                    item.CheckPay = .Item("CHECK_PAY").ToString()
                    item.VirtualAccountNo = .Item("VIRTUAL_ACCOUNT_NO").ToString()
                    item.PaymentType = CType(System.Enum.Parse(GetType(EnumParticipantPaymentType), CStr(.Item("PAYMENT_TYPE"))),  _
                                        EnumParticipantPaymentType)
                    item.Representative = New ParticipantRepresentative(.Item("REP_TITLE").ToString, .Item("REP_FNAME").ToString(),
                                                                        .Item("REP_MNAME").ToString(), .Item("REP_LNAME").ToString(),
                                                                        .Item("REP_POSITION").ToString(), .Item("REP_CONTACT").ToString(), .Item("REP_EMAIL").ToString())
                    item.TIN = CStr(.Item("TIN").ToString())
                    item.BIRATCType = CStr(.Item("BIR_ATC_TYPE").ToString)
                    item.ZeroRatedMarketFees = CBool(IIf(CInt(.Item("ZERO_RATED_MARKET_FEES")) = 1, True, False))
                    item.ZeroRatedEnergy = CBool(IIf(CInt(.Item("ZERO_RATED_ENERGY")) = 1, True, False))
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), CStr(.Item("STATUS"))), EnumStatus)
                    result.Add(CStr(.Item("PARTICIPANT_ID")), item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message & index)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get Participants Prudential"
    Public Function GetParticipantsPrudential() As List(Of Prudential)
        Dim result As New List(Of Prudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_PRUDENTIAL WHERE ID_NUMBER IS NOT NULL ORDER BY ID_NUMBER"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantsPrudential(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetParticipantsPrudential(ByVal Type As EnumGenLoad) As List(Of Prudential)
        Dim result As New List(Of Prudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.ID_NUMBER, a.PRUDENTIAL_AMOUNT, a.INTEREST_AMOUNT  " & _
                                "FROM AM_PRUDENTIAL a, AM_PARTICIPANTS b " & _
                                "WHERE a.ID_NUMBER = b.ID_NUMBER AND b.gen_load = '" & Type.ToString() & "' ORDER BY ID_NUMBER"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantsPrudential(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetParticipantsPrudential(ByVal dr As IDataReader) As List(Of Prudential)
        Dim result As New List(Of Prudential)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New Prudential
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.PrudentialAmount = CDec(.Item("PRUDENTIAL_AMOUNT"))
                    item.InterestAmount = CDec(.Item("INTEREST_AMOUNT"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Participant Prudential"
    Public Function GetParticipantPrudential(ByVal IDNumber As String) As Prudential
        Dim result As New Prudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_PRUDENTIAL WHERE ID_NUMBER = '" & IDNumber & "'"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantPrudential(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetParticipantPrudential(ByVal dr As IDataReader) As Prudential
        Dim result As New Prudential
        Try
            While dr.Read()
                With dr
                    Dim item As New Prudential
                    result.IDNumber = CStr(.Item("ID_NUMBER"))
                    result.PrudentialAmount = CDec(.Item("PRUDENTIAL_AMOUNT"))
                    result.InterestAmount = CDec(.Item("INTEREST_AMOUNT"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Participants Prudential History"
    Public Function GetParticipantsPrudentialHistoryParticipant(ByVal IDNumber As String) As List(Of PrudentialHistory)
        Dim result As New List(Of PrudentialHistory)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id, b.full_name " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number and a.id_number = '" & IDNumber & "' " & _
                                "ORDER BY a.trans_date DESC"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantsPrudentialHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try


        Return result
    End Function

    Public Function GetParticipantsPrudentialHistory(ByVal BatchCode As String) As List(Of PrudentialHistory)
        Dim result As New List(Of PrudentialHistory)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id, b.full_name " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number and a.batch_code = '" & BatchCode & "' " & _
                                "ORDER BY a.trans_date DESC"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantsPrudentialHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetParticipantsPrudentialHistory(ByVal StartDate As Date, ByVal EndDate As Date) As List(Of PrudentialHistory)
        Dim result As New List(Of PrudentialHistory)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id, b.full_name " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND " & _
                                "a.trans_date BETWEEN TO_DATE('" & FormatDateTime(StartDate, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') AND TO_DATE('" & FormatDateTime(EndDate, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY hh:mi:ss PM') " & _
                                "AND a.batch_code IS NOT NULL ORDER BY a.trans_date DESC"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantsPrudentialHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetParticipantsPrudentialHistoryNotPosted(ByVal TransDate As Date, ByVal TransType As EnumPrudentialTransType) As List(Of PrudentialHistory)
        Dim result As New List(Of PrudentialHistory)
        Dim report As New DataReport
        Dim SQL As String = ""

        Try
            Select Case TransType
                Case EnumPrudentialTransType.Replenishment
                    SQL = "SELECT a.*, b.participant_id, b.full_name " & _
                          "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                          "WHERE a.id_number = b.id_number AND a.trans_type = " & TransType & " AND " & _
                          "a.trans_date = TO_DATE('" & TransDate & "','MM/DD/YYYY') AND a.or_no = 0 "

                Case EnumPrudentialTransType.InterestAmount
                    SQL = "SELECT a.*, b.participant_id, b.full_name " & _
                          "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                          "WHERE a.id_number = b.id_number AND a.trans_type = " & TransType & " AND " & _
                          "a.trans_date = TO_DATE('" & TransDate & "','MM/DD/YYYY') AND a.am_dmcm_no = 0 "

                Case EnumPrudentialTransType.TransferInterestAmount
                    SQL = "SELECT a.*, b.participant_id, b.full_name " & _
                          "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                          "WHERE a.id_number = b.id_number AND a.trans_type = " & TransType & " AND " & _
                          "a.trans_date = TO_DATE('" & TransDate & "','MM/DD/YYYY') AND a.batch_code IS NULL "

            End Select


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantsPrudentialHistory(report.ReturnedIDatareader, TransType)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetParticipantsPrudentialHistory(ByVal dr As IDataReader, _
                                                      ByVal TransType As EnumPrudentialTransType) As List(Of PrudentialHistory)
        Dim result As New List(Of PrudentialHistory)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New PrudentialHistory
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), _
                                                       CStr(.Item("PARTICIPANT_ID")), _
                                                       CStr(.Item("FULL_NAME")))
                    item.ORNo = CLng(.Item("OR_NO"))
                    item.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    item.FTFNumber = CLng(.Item("FTF_REF_NO"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.TransDate = CDate(.Item("TRANS_DATE"))
                    item.TransType = CType(System.Enum.Parse(GetType(EnumPrudentialTransType), _
                                                             CStr(.Item("TRANS_TYPE"))), EnumPrudentialTransType)
                    Select Case TransType
                        Case EnumPrudentialTransType.Replenishment
                            item.BatchCode = EnumPostedType.PRR.ToString() & "-XXXX"

                        Case EnumPrudentialTransType.InterestAmount
                            item.BatchCode = EnumPostedType.PRI.ToString() & "-XXXX"

                        Case EnumPrudentialTransType.TransferInterestAmount
                            item.BatchCode = EnumPostedType.PRTI.ToString() & "-XXXX"
                    End Select

                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetParticipantsPrudentialHistory(ByVal dr As IDataReader) As List(Of PrudentialHistory)
        Dim result As New List(Of PrudentialHistory)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New PrudentialHistory
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), _
                                                       CStr(.Item("PARTICIPANT_ID")), _
                                                       CStr(.Item("FULL_NAME")))
                    item.ORNo = CLng(.Item("OR_NO"))
                    item.DMCMNumber = CLng(.Item("AM_DMCM_NO"))
                    item.FTFNumber = CLng(.Item("FTF_REF_NO"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.TransDate = CDate(.Item("TRANS_DATE"))
                    item.TransType = CType(System.Enum.Parse(GetType(EnumPrudentialTransType), _
                                                             CStr(.Item("TRANS_TYPE"))), EnumPrudentialTransType)

                    item.BatchCode = .Item("BATCH_CODE").ToString()
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Count"
    Public Function GetCollectionMonitoringCount(ByVal CollectionNo As Long, _
                                                 ByVal TransType As EnumCollectionMonitoringType) As Integer
        Dim result As Integer = 0
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT COUNT(COLLECTION_NO) AS CNT " & _
                  "FROM AM_COLLECTION_MONITORING " & _
                  "WHERE COLLECTION_NO = " & CollectionNo & " " & _
                  "AND TRANS_TYPE = " & TransType & " AND STATUS = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoringCount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollectionMonitoringCount(ByVal dr As IDataReader) As Integer
        Dim result As Integer = 0

        Try
            While dr.Read()
                With dr
                    result = CInt(.Item("CNT"))
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Wesm Bill Sales and Purchased Count"

    Public Function GetWESMBillSalesAndPurchasedCount(ByVal JVNo As Long) As Boolean
        Dim result As Boolean = False
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.* FROM AM_WESM_BILL a, AM_JV B " & _
                  "WHERE a.batch_code = b.batch_code  AND B.am_jv_no = " & JVNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim listWESMBill = Me.GetWESMBills(report.ReturnedIDatareader)

            Dim itemWESMBill = listWESMBill.First()
            If itemWESMBill.ChargeType = EnumChargeType.E Or itemWESMBill.ChargeType = EnumChargeType.EV Then
                Dim listWESMBillSalesAndPurchased = Me.GetWESMInvoiceSalesAndPurchased(itemWESMBill.BillingPeriod, itemWESMBill.SettlementRun)

                If listWESMBillSalesAndPurchased.Count > 0 Then
                    result = True
                Else
                    result = False
                End If
            Else
                result = True
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

#End Region

#Region "Get Collection Monitoring"
    Public Function GetCollectionMonitoringNotPosted() As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.batch_code IS NULL AND a.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoring(ByVal TransType As EnumCollectionMonitoringType) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.collection_no_tag = 0 AND a.trans_type = " & TransType & " " & _
                                "AND a.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoringPerParticipant(ByVal IDNumber As String, _
                                                          ByVal TransType As EnumCollectionMonitoringType) _
                                                          As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport
        Dim SQL As String

        Try
            If TransType = EnumCollectionMonitoringType.TransferToHeldCollection Then
                SQL = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                      "WHERE a.id_number = b.id_number AND a.trans_type = " & TransType & " " & _
                      "AND a.id_number = '" & IDNumber & "' AND a.collection_no_tag = 0 AND a.status = " & EnumStatus.Active
            Else
                SQL = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                      "WHERE a.id_number = b.id_number AND a.trans_type = " & TransType & " " & _
                      "AND a.id_number = '" & IDNumber & "' AND a.status = " & EnumStatus.Active
            End If

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoring(ByVal CollectionNumber As Long) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.collection_no = " & CollectionNumber & " " & _
                                "AND a.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoring(ByVal BatchCode As String) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.batch_code = '" & BatchCode & "' " & _
                                "AND a.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoring(ByVal AllocationDAte As Date) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.allocation_date = TO_DATE('" & AllocationDAte & "','MM-DD-YYYY') " & _
                                "AND a.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoring(ByVal StartDate As Date, ByVal EndDate As Date, ByVal IDNumber As String) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.allocation_date between TO_DATE('" & StartDate & "','MM-DD-YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM-DD-YYYY') AND a.id_number = '" & IDNumber & "' " & _
                                "AND a.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoring(ByVal selMonth As Integer, ByVal selYear As Integer) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.allocation_date BETWEEN " & _
                                "TO_DATE( '1-" & MonthName(selMonth, True) & "-" & selYear & " 12:00:00 AM','DD-MM-YYYY HH:MI:SS AM') " & _
                                "AND TO_DATE( '" & Date.DaysInMonth(selYear, selMonth) & "-" & MonthName(selMonth, True) & "-" & selYear & " " & _
                                "11:59:59 PM', 'DD-MM-YYYY HH:MI:SS PM') AND a.status = " & EnumStatus.Active


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionMonitoring(ByVal CollectionNumber As Long, _
                                            ByVal TransType As EnumCollectionMonitoringType) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_COLLECTION_MONITORING a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.collection_no = " & CollectionNumber & " " & _
                                "AND a.trans_type = " & TransType & " AND a.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollectionMonitoring(ByVal dr As IDataReader) As List(Of CollectionMonitoring)
        Dim result As New List(Of CollectionMonitoring)
        Try
            While dr.Read()
                With dr
                    Dim item As New CollectionMonitoring
                    item.CollectionMonitoringNo = CLng(.Item("COL_MON_NO"))
                    item.BatchCode = .Item("BATCH_CODE").ToString()
                    item.CollectionNo = CLng(.Item("COLLECTION_NO"))
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    item.AllocationType = CType(System.Enum.Parse(GetType(EnumAllocationType), CStr(.Item("ALLOCATION_TYPE"))), EnumAllocationType)
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.ORNo = CLng(.Item("OR_NO"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.TransType = CType(System.Enum.Parse(GetType(EnumCollectionMonitoringType), _
                                                             CStr(.Item("TRANS_TYPE"))), EnumCollectionMonitoringType)
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), CStr(.Item("STATUS"))), EnumStatus)
                    item.CollectionNoTag = CLng(IIf(.Item("COLLECTION_NO_TAG").ToString().Length = 0, 0, .Item("COLLECTION_NO_TAG")))

                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get Fund Transfer Form"
    Public Function GetFundTransferForm(ByVal dateFrom As Date, ByVal dateTo As Date, _
                                        ByVal transType As EnumFTFTransType) As List(Of FundTransferFormMain)
        Dim result As New List(Of FundTransferFormMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_FTF_MAIN " & _
                                "WHERE ALLOCATION_DATE BETWEEN TO_DATE('" & dateFrom & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & dateTo & "','MM/DD/YYYY') " & _
                                "AND trans_type = " & transType

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim resultParticpant = Me.GetFundTransferFormParticipants(dateFrom, dateTo, transType)
            Dim resultDetails = Me.GetFundTransferFormDetails(dateFrom, dateTo, transType)

            result = Me.GetFundTransferForm(report.ReturnedIDatareader, resultParticpant, resultDetails)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferForm(ByVal AllocationDate As Date) As List(Of FundTransferFormMain)
        Dim result As New List(Of FundTransferFormMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_FTF_MAIN " & _
                                "WHERE ALLOCATION_DATE = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim resultParticpant = Me.GetFundTransferFormParticipants(AllocationDate)
            Dim resultDetails = Me.GetFundTransferFormDetails(AllocationDate)

            result = Me.GetFundTransferForm(report.ReturnedIDatareader, resultParticpant, resultDetails)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferForm(ByVal AllocationBegin As Date, ByVal AllocationEnd As Date) As List(Of FundTransferFormMain)
        Dim result As New List(Of FundTransferFormMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_FTF_MAIN " & _
                                "WHERE ALLOCATION_DATE BETWEEN TO_DATE('" & FormatDateTime(AllocationBegin, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') AND TO_DATE('" & FormatDateTime(AllocationEnd, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY hh:mi:ss PM') " & _
                                "AND BATCH_CODE LIKE 'C%'"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim resultParticpant = Me.GetFundTransferFormParticipants(AllocationBegin, AllocationEnd)
            Dim resultDetails = Me.GetFundTransferFormDetails(AllocationBegin, AllocationEnd)

            result = Me.GetFundTransferForm(report.ReturnedIDatareader, resultParticpant, resultDetails)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferForm(FTFRefNo As Long) As List(Of FundTransferFormMain)
        Dim result As New List(Of FundTransferFormMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_FTF_MAIN " & _
                                "WHERE ref_no = " & FTFRefNo

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim resultParticpant = Me.GetFundTransferFormParticipants(FTFRefNo)
            Dim resultDetails = Me.GetFundTransferFormDetails(FTFRefNo)

            result = Me.GetFundTransferForm(report.ReturnedIDatareader, resultParticpant, resultDetails)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferForm(ByVal batchcode As String) As List(Of FundTransferFormMain)
        Dim result As New List(Of FundTransferFormMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_FTF_MAIN " & _
                                "WHERE batch_code = '" & batchcode & "'"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim resultParticpant = Me.GetFundTransferFormParticipants(batchcode)
            Dim resultDetails = Me.GetFundTransferFormDetails(batchcode)

            result = Me.GetFundTransferForm(report.ReturnedIDatareader, resultParticpant, resultDetails)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetFundTransferForm(ByVal dr As IDataReader, ByVal listParticipants As List(Of FundTransferFormParticipant), _
                                         ByVal listDetails As List(Of FundTransferFormDetails)) As List(Of FundTransferFormMain)
        Dim result As New List(Of FundTransferFormMain)
        Try
            While dr.Read()
                With dr
                    Dim item As New FundTransferFormMain
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString())
                    item.RefNo = CLng(.Item("REF_NO"))
                    item.DRDate = CDate(FormatDateTime(CDate(.Item("DR_DATE")), DateFormat.ShortDate))
                    item.CRDate = CDate(FormatDateTime(CDate(.Item("CR_DATE")), DateFormat.ShortDate))
                    item.TotalAmount = CDec(.Item("TOTAL_AMOUNT"))
                    item.TransType = CType(System.Enum.Parse(GetType(EnumFTFTransType), CStr(.Item("TRANS_TYPE"))), EnumFTFTransType)
                    item.PreparedBy = CStr(.Item("UPDATED_BY"))
                    item.RequestingApproval = CStr(.Item("REQUESTING_APPROVAL").ToString())
                    item.ApprovedBy = CStr(.Item("APPROVED_BY").ToString())
                    item.IsPosted = CType(System.Enum.Parse(GetType(EnumIsPosted), CStr(.Item("IS_POSTED"))), EnumIsPosted)

                    item.ListOfFTFParticipants = (From x In listParticipants _
                                                  Where x.RefNo = item.RefNo _
                                                  Select x).ToList()

                    item.ListOfFTFDetails = (From x In listDetails _
                                             Where x.RefNo = item.RefNo _
                                             Select x).ToList()
                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormParticipants(ByVal dateFrom As Date, ByVal dateTo As Date, _
                                                    ByVal transType As EnumFTFTransType) As List(Of FundTransferFormParticipant)
        Dim result As New List(Of FundTransferFormParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.*, c.participant_id FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_PARTICIPANTS c " & _
                                "WHERE a.ref_no = b.ref_no AND b.id_number = c.id_number " & _
                                "AND a.allocation_date BETWEEN TO_DATE('" & dateFrom & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & dateTo & "','MM/DD/YYYY') " & _
                                "AND a.trans_type = " & transType

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormParticipants(ByVal dateFrom As Date, ByVal dateTo As Date) As List(Of FundTransferFormParticipant)
        Dim result As New List(Of FundTransferFormParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.*, c.participant_id FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_PARTICIPANTS c " & _
                                "WHERE a.ref_no = b.ref_no AND b.id_number = c.id_number " & _
                                "AND a.allocation_date BETWEEN TO_DATE('" & FormatDateTime(dateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') AND TO_DATE('" & FormatDateTime(dateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY hh:mi:ss PM') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormParticipants(ByVal AllocationDate As Date) As List(Of FundTransferFormParticipant)
        Dim result As New List(Of FundTransferFormParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.*, c.participant_id FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_PARTICIPANTS c " & _
                                "WHERE a.ref_no = b.ref_no AND b.id_number = c.id_number " & _
                                "AND a.allocation_date = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') "


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormParticipants(ByVal FTFRefNo As Long) As List(Of FundTransferFormParticipant)
        Dim result As New List(Of FundTransferFormParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM  AM_FTF_PARTICIPANT a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.ref_no = " & FTFRefNo


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormParticipants(ByVal batchcode As String) As List(Of FundTransferFormParticipant)
        Dim result As New List(Of FundTransferFormParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM  AM_FTF_PARTICIPANT a, AM_PARTICIPANTS b, AM_FTF_MAIN c " & _
                                "WHERE a.id_number = b.id_number AND a.ref_no = c.ref_no AND c.BATCH_CODE = '" & batchcode & "'"


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetFundTransferFormParticipants(ByVal dr As IDataReader) As List(Of FundTransferFormParticipant)
        Dim result As New List(Of FundTransferFormParticipant)
        Try
            While dr.Read()
                With dr
                    Dim item As New FundTransferFormParticipant
                    item.RefNo = CLng(.Item("REF_NO"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.Amount = CDec(.Item("AMOUNT"))

                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormDetails(ByVal dateFrom As Date, ByVal dateTo As Date, _
                                               ByVal transType As EnumFTFTransType) As List(Of FundTransferFormDetails)
        Dim result As New List(Of FundTransferFormDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.* FROM AM_FTF_MAIN a, AM_FTF_DETAILS b " & _
                                "WHERE a.ref_no = b.ref_no " & _
                                "AND a.allocation_date BETWEEN TO_DATE('" & dateFrom & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & dateTo & "','MM/DD/YYYY') " & _
                                "AND a.trans_type = " & transType & " ORDER BY b.debit"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormDetails(ByVal dateFrom As Date, ByVal dateTo As Date) As List(Of FundTransferFormDetails)
        Dim result As New List(Of FundTransferFormDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.* FROM AM_FTF_MAIN a, AM_FTF_DETAILS b " & _
                                "WHERE a.ref_no = b.ref_no " & _
                                "AND a.allocation_date BETWEEN TO_DATE('" & FormatDateTime(dateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') AND TO_DATE('" & FormatDateTime(dateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY hh:mi:ss PM') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormDetails(ByVal AllocationDate As Date) As List(Of FundTransferFormDetails)
        Dim result As New List(Of FundTransferFormDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.* FROM AM_FTF_MAIN a, AM_FTF_DETAILS b " & _
                                "WHERE a.ref_no = b.ref_no " & _
                                "AND a.allocation_date = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') "


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormDetails(ByVal FTFRefNo As Long) As List(Of FundTransferFormDetails)
        Dim result As New List(Of FundTransferFormDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_FTF_DETAILS  " & _
                                "WHERE ref_no = " & FTFRefNo & " ORDER BY debit DESC"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetFundTransferFormDetails(ByVal batchcode As String) As List(Of FundTransferFormDetails)
        Dim result As New List(Of FundTransferFormDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_FTF_DETAILS a, AM_FTF_MAIN b " & _
                                "WHERE a.ref_no = b.ref_no and b.BATCH_CODE = '" & batchcode & "'"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetFundTransferFormDetails(ByVal dr As IDataReader) As List(Of FundTransferFormDetails)
        Dim result As New List(Of FundTransferFormDetails)
        Try
            While dr.Read()
                With dr
                    Dim item As New FundTransferFormDetails
                    item.RefNo = CLng(.Item("REF_NO"))
                    item.BankAccountNo = CStr(.Item("BANK_ACCNT_NO").ToString)
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))

                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetOfficialReceipt"
    Public Function GetOfficialReceipt(ByVal ORNo As Long) As OfficialReceiptMain
        Dim result As New OfficialReceiptMain
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_MAIN " & _
                                "WHERE OR_NO = " & ORNo

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceipt(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetOfficialReceipt(ByVal lstORNo As List(Of Long)) As List(Of OfficialReceiptMain)
        Dim result As New List(Of OfficialReceiptMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_MAIN " & _
                                "WHERE OR_NO IN ("

            Dim recCtr As Long = 0
            For Each itmORNo In lstORNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmORNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR OR_NO IN ("
                    End If
                    SQL &= itmORNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceiptList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetOfficialReceipt(ByVal SelectedYear As String) As List(Of OfficialReceiptMain)
        Dim result As New List(Of OfficialReceiptMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_MAIN " & _
                                "WHERE TO_CHAR(OR_DATE, 'YYYY') ='" & SelectedYear & "' AND BATCH_CODE LIKE 'PA%'"


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceiptList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetOfficialReceipt(ByVal ORDate As Date) As List(Of OfficialReceiptMain)
        Dim result As New List(Of OfficialReceiptMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_MAIN " & _
                                "WHERE OR_DATE = TO_DATE('" & ORDate & "', 'MM/DD/YYYY')"

           
            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceiptList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetOfficialReceiptByAllocDate(ByVal AllocDate As Date) As List(Of OfficialReceiptMain)
        Dim result As New List(Of OfficialReceiptMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "select a.* from AM_OFFICIAL_RECEIPT_MAIN a " & vbNewLine & _
                                "left join am_collection b on b.or_no = a.OR_NO " & vbNewLine & _
                                "where b.allocation_date = to_date('" & AllocDate & "', 'MM/DD/YYYY') " & vbNewLine & _
                                "and b.batch_code IS NULL"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceiptList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetOfficialReceiptList(ByVal dr As IDataReader) As List(Of OfficialReceiptMain)
        Dim result As New List(Of OfficialReceiptMain)
        Try
            While dr.Read()
                Dim res As New OfficialReceiptMain
                With dr
                    res.ORNo = CLng(.Item("OR_NO"))
                    res.ORDate = CDate(.Item("OR_DATE"))
                    res.IDNumber = CStr(.Item("ID_NUMBER"))
                    res.Amount = CDec(.Item("OR_AMOUNT"))
                    res.Status = CInt(.Item("STATUS"))
                    res.BatchCode = .Item("BATCH_CODE").ToString()
                    res.Remarks = .Item("REMARKS").ToString()
                    res.WithholdingTax = CDec(.Item("WITHHOLDING_TAX"))
                    res.WithholdingVAT = CDec(.Item("WITHHOLDING_VAT"))
                    res.VATExempt = CDec(.Item("VAT_EXEMPT"))
                    res.Vatable = CDec(.Item("VATABLE"))
                    res.VAT = CDec(.Item("VAT"))
                    res.VATZeroRated = CDec(.Item("VAT_ZERO_RATED"))
                    res.Others = CDec(.Item("OTHERS"))                    
                    res.TransactionType = CType(System.Enum.Parse(GetType(EnumORTransactionType), CStr(.Item("TRANS_TYPE"))), EnumORTransactionType)
                    res.ListORDetails = Me.GetOfficialReceiptDetails(CLng(.Item("OR_NO")))
                    res.ListORSummary = Me.GetOfficialReceiptSummaries(CLng(.Item("OR_NO")))
                End With
                result.Add(res)
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetOfficialReceipt(ByVal dr As IDataReader) As OfficialReceiptMain
        Dim result As New OfficialReceiptMain
        Try
            While dr.Read()
                With dr
                    result.ORNo = CLng(.Item("OR_NO"))
                    result.ORDate = CDate(.Item("OR_DATE"))
                    result.IDNumber = CStr(.Item("ID_NUMBER"))
                    result.Amount = CDec(.Item("OR_AMOUNT"))
                    result.Status = CInt(.Item("STATUS"))
                    result.BatchCode = .Item("BATCH_CODE").ToString()
                    result.Remarks = .Item("REMARKS").ToString()
                    result.WithholdingTax = CDec(.Item("WITHHOLDING_TAX"))
                    result.WithholdingVAT = CDec(.Item("WITHHOLDING_VAT"))
                    result.VATExempt = CDec(.Item("VAT_EXEMPT"))
                    result.Vatable = CDec(.Item("VATABLE"))
                    result.VAT = CDec(.Item("VAT"))
                    result.VATZeroRated = CDec(.Item("VAT_ZERO_RATED"))
                    result.Others = CDec(.Item("OTHERS"))
                    result.TransactionType = CType(System.Enum.Parse(GetType(EnumORTransactionType), CStr(.Item("TRANS_TYPE"))), EnumORTransactionType)
                    result.ListORDetails = Me.GetOfficialReceiptDetails(CLng(.Item("OR_NO")))
                    result.ListORSummary = Me.GetOfficialReceiptSummaries(CLng(.Item("OR_NO")))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetOfficialReceiptDetails(ByVal ORNo As Long) As List(Of OfficialReceiptDetails)
        Dim result As New List(Of OfficialReceiptDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_DETAILS " & _
                                "WHERE OR_NO = " & ORNo

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceiptDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetOfficialReceiptDetails(ByVal dr As IDataReader) As List(Of OfficialReceiptDetails)
        Dim result As New List(Of OfficialReceiptDetails)
        Try
            While dr.Read()
                With dr
                    Dim item As New OfficialReceiptDetails

                    item.ORNo = CLng(.Item("OR_NO").ToString)
                    item.AccountCode = CStr(.Item("ACCT_CODE").ToString)
                    item.Description = CStr(.Item("DESCRIPTION").ToString)
                    item.Debit = CDec(.Item("DEBIT").ToString)
                    item.Credit = CDec(.Item("CREDIT").ToString)

                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetOfficialReceiptSummaries(ByVal ORNo As Long) As List(Of OfficialReceiptSummary)
        Dim result As New List(Of OfficialReceiptSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_SUMMARY " & _
                                "WHERE OR_NO = " & ORNo

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceiptSummaries(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetOfficialReceiptSummaries(ByVal dr As IDataReader) As List(Of OfficialReceiptSummary)
        Dim result As New List(Of OfficialReceiptSummary)
        Try
            While dr.Read()
                With dr
                    Dim item As New OfficialReceiptSummary
                    item.ORNo = CLng(.Item("OR_NO").ToString)
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO").ToString)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString)
                    item.Amount = CDec(.Item("AMOUNT").ToString)
                    item.CollectionType = CType(.Item("COLLECTION_TYPE"), EnumCollectionType)                    
                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


#End Region

#Region "GetOfficialReceipts"
    Public Function GetOfficialReceipts(ByVal DateFrom As Date, ByVal DateTo As Date) As List(Of OfficialReceiptMain)
        Dim result As New List(Of OfficialReceiptMain)
        Dim report As New DataReport

        Try
            'Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_MAIN " & _
            '                    "WHERE status = 1 AND or_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') " & _
            '                    "AND TO_DATE('" & DateTo & "','MM/DD/YYYY') "

            Dim SQL As String = "SELECT * FROM AM_OFFICIAL_RECEIPT_MAIN " & _
                                "WHERE or_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & DateTo & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOfficialReceipts(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
            'MsgBox(ex.ToString)
        End Try

        Return result
    End Function

    Private Function GetOfficialReceipts(ByVal dr As IDataReader) As List(Of OfficialReceiptMain)
        Dim result As New List(Of OfficialReceiptMain)
        Try
            While dr.Read()
                With dr
                    Dim item As New OfficialReceiptMain
                    item.ORNo = CLng(.Item("OR_NO"))
                    item.ORDate = CDate(.Item("OR_DATE"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.Amount = CDec(.Item("OR_AMOUNT"))
                    item.Status = CInt(.Item("STATUS"))
                    item.BatchCode = .Item("BATCH_CODE").ToString()
                    item.Remarks = .Item("REMARKS").ToString()
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumORTransactionType), _
                                                                   CStr(.Item("TRANS_TYPE"))), EnumORTransactionType)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "GetSystemDateTime"
    Public Function GetSystemDateTime() As Date
        Dim result As Date
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT TO_CHAR(SYSDATE, 'MM/dd/yyyy HH24:MI:SS') AS SYSDATETIME FROM DUAL"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetSystemDateTime(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetSystemDateTime(ByVal dr As IDataReader) As Date
        Dim result As Date
        Try
            While dr.Read()
                result = CDate(dr.Item("SYSDATETIME"))
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetSystemDate"
    Public Function GetSystemDate() As Date
        Dim result As Date
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT SYSDATE FROM DUAL"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetSystemDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetSystemDate(ByVal dr As IDataReader) As Date
        Dim result As Date
        Try
            While dr.Read()
                result = CDate(FormatDateTime(CDate(dr.Item("SYSDATE")), DateFormat.ShortDate))
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetNSSMonitoringMain"
    Public Function GetNSSMonitoringMain(ByVal BillFrom As Integer, ByVal Billto As Integer) As List(Of NetSettlementSurplusMain)
        Dim result As New List(Of NetSettlementSurplusMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.start_date, b.billing_date, b.end_date " & _
                                "FROM am_nss_monitoring_main a, AM_CALENDAR_BP b " & _
                                "WHERE a.billing_period BETWEEN " & BillFrom & " AND " & Billto

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetNSSMonitoringMain(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetNSSMonitoringMain(ByVal dr As IDataReader) As List(Of NetSettlementSurplusMain)
        Dim result As New List(Of NetSettlementSurplusMain)
        Try
            While dr.Read()
                With dr
                    Dim item As New NetSettlementSurplusMain
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.BillingPeriod = New CalendarBillingPeriod(CInt(.Item("BILLING_PERIOD")), CDate(.Item("START_DATE")), _
                                                                   CDate(.Item("END_DATE")), CDate(.Item("BILLING_DATE")))
                    item.NetSettlementSurplus = CDec(.Item("NET_SETTLEMENT_SURPLUS"))
                    item.NetSettlementSurplusAdjustment = CDec(.Item("NET_SETTLEMENT_SURPLUS_AJUSTMENT"))
                    item.NSSRetentionBalance = CDec(.Item("NSS_RETENTION_BALANCE"))
                    item.Interest = CDec(.Item("INTEREST"))
                    item.ReturnOfInterest = CDec(.Item("RETURN_OF_INTEREST"))
                    item.InterestOnInterest = CDec(.Item("INTEREST_ON_INTEREST"))
                    item.NSSRABankStatement = CDec(.Item("NSSRA_BANK_STATEMENT"))
                    item.BankRate = CDec(.Item("BANK_RATE"))
                    item.IsPosted = CType(System.Enum.Parse(GetType(EnumIsPosted), CStr(.Item("IS_POSTED"))), EnumIsPosted)

                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetNSSMonitoringDetails"
    Public Function GetNSSMonitoringDetails(ByVal BillingPeriod As Integer) As List(Of NetSettlementSurplusDetails)
        Dim result As New List(Of NetSettlementSurplusDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.billing_period, a.id_number, a.amount, b.participant_id, b.full_name, " & _
                                "c.start_date, c.billing_date, c.end_date " & _
                                "FROM am_wesm_invoice a, am_participants b, AM_CALENDAR_BP c " & _
                                "WHERE a.id_number = b.id_number AND a.billing_period = c.billing_period " & _
                                "AND a.charge_id = 'NSS' AND a.billing_period = " & BillingPeriod

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetNSSMonitoringDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetNSSMonitoringDetails(ByVal BillingPeriodFrom As Integer, _
                                            ByVal BillingPeriodTo As Integer) As List(Of NetSettlementSurplusDetails)
        Dim result As New List(Of NetSettlementSurplusDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.billing_period, a.id_number, a.amount, b.participant_id, b.full_name, " & _
                                "c.start_date, c.billing_date, c.end_date " & _
                                "FROM am_wesm_invoice a, am_participants b, AM_CALENDAR_BP c " & _
                                "WHERE a.id_number = b.id_number AND a.billing_period = c.billing_period " & _
                                "AND a.charge_id = 'NSS' AND a.billing_period BETWEEN " & BillingPeriodFrom & " " & _
                                "AND " & BillingPeriodTo

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetNSSMonitoringDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetNSSMonitoringDetails(ByVal dr As IDataReader) As List(Of NetSettlementSurplusDetails)
        Dim result As New List(Of NetSettlementSurplusDetails)
        Try
            While dr.Read()
                With dr
                    Dim item As New NetSettlementSurplusDetails
                    Dim bp = New CalendarBillingPeriod(CInt(.Item("BILLING_PERIOD")), CDate(.Item("START_DATE")), _
                                                       CDate(.Item("END_DATE")), CDate(.Item("BILLING_DATE")))
                    Dim IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")), _
                                                      CStr(.Item("FULL_NAME")))
                    item.BillingPeriod = bp
                    item.IDNumber = IDNumber
                    item.NSSAmount = CDec(.Item("AMOUNT"))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetNSSSummary"
    Public Function GetNSSSummary(ByVal YearPeriod As Integer, ByVal QuarterlyPeriod As EnumQuarterlyPeriod) As List(Of NetSettlementSurplusSummary)
        Dim result As New List(Of NetSettlementSurplusSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.*, b.participant_id FROM AM_NSS_SUMMARY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.quarterly_period = " & QuarterlyPeriod & " " & _
                                "AND a.year_period = " & YearPeriod & " ORDER BY a.id_number"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetNSSSummary(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetNSSSummary(ByVal dr As IDataReader) As List(Of NetSettlementSurplusSummary)
        Dim result As New List(Of NetSettlementSurplusSummary)
        Try
            While dr.Read()
                With dr
                    Dim item As New NetSettlementSurplusSummary
                    item.BatchCode = CStr(.Item("BATCH_CODE"))
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    item.QuarterlyPeriod = CType(System.Enum.Parse(GetType(EnumQuarterlyPeriod), CStr(.Item("QUARTERLY_PERIOD"))), EnumQuarterlyPeriod)
                    item.YearPeriod = CInt(.Item("YEAR_PERIOD"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.TotalNSSInterest = CDec(.Item("TOTAL_NSS_INTEREST"))
                    item.TotalNSSInterestNetWTax = CDec(.Item("TOTAL_NSS_INTEREST_NET_WTAX"))
                    item.TotalSTLInterest = CDec(.Item("TOTAL_STL_INTEREST"))
                    item.TotalSTLInterestNetWTax = CDec(.Item("TOTAL_STL_INTEREST_NET_WTAX"))
                    item.Total = CDec(.Item("TOTAL"))

                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetNSSSummaryCount"
    Public Function GetNSSSummaryBatchCode(ByVal QuarterlyPeriod As EnumQuarterlyPeriod, ByVal YearPeriod As Integer) As String
        Dim result As String = ""
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT DISTINCT batch_code FROM AM_NSS_SUMMARY " & _
                  "WHERE quarterly_period = " & QuarterlyPeriod & " AND year_period = " & YearPeriod

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetNSSSummaryBatchCode(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetNSSSummaryBatchCode(ByVal dr As IDataReader) As String
        Dim result As String = ""

        Try
            While dr.Read()
                With dr
                    result = .Item("batch_code").ToString()
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetBillingPeriodsNotYetComputedForNSSInterest"
    Public Function GetBillingPeriodsNotYetComputedForNSSInterest() As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT a.billing_period, c.start_date, c.billing_date, c.end_date " & _
                                "FROM am_wesm_bill_gp_posted a, am_nss_monitoring_main b, AM_CALENDAR_BP c " & _
                                "WHERE a.billing_period = b.billing_period(+) AND a.billing_period = c.billing_period " & _
                                "AND a.posted_type = '" & EnumPostedType.U.ToString() & "' " & _
                                "AND a.charge_type= '" & EnumChargeType.E.ToString() & "' " & _
                                "AND b.billing_period IS NULL " & _
                                "ORDER BY a.billing_period "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetBillingPeriodsNotYetComputedForNSSInterest(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetBillingPeriodsNotYetComputedForNSSInterest(ByVal dr As IDataReader) As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Try
            While dr.Read()
                With dr
                    result.Add(New CalendarBillingPeriod(CInt(.Item("BILLING_PERIOD")), CDate(.Item("START_DATE")), _
                                                          CDate(.Item("END_DATE")), CDate(.Item("BILLING_DATE"))))

                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetBillingPeriodsWithNSS"
    Public Function GetBillingPeriodsWithNSS() As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT a.billing_period, b.start_date, b.billing_date, b.end_date " & _
                                "FROM am_wesm_bill_gp_posted a, AM_CALENDAR_BP b " & _
                                "WHERE a.billing_period = b.billing_period " & _
                                "AND a.posted_type = '" & EnumPostedType.U.ToString() & "' " & _
                                "AND a.charge_type= '" & EnumChargeType.E.ToString() & "' " & _
                                "AND a.stl_run = 'F' " & _
                                "ORDER BY a.billing_period DESC "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetBillingPeriodsWithNSS(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetBillingPeriodsWithNSS(ByVal dr As IDataReader) As List(Of CalendarBillingPeriod)
        Dim result As New List(Of CalendarBillingPeriod)
        Try
            While dr.Read()
                With dr
                    result.Add(New CalendarBillingPeriod(CInt(.Item("BILLING_PERIOD")), CDate(.Item("START_DATE")), _
                                                          CDate(.Item("END_DATE")), CDate(.Item("BILLING_DATE"))))

                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetParticipantsWithNSSRA"
    Public Function GetParticipantsWithNSSRA(ByVal BillingPeriodFrom As Integer, _
                                             ByVal BillingPeriodTo As Integer) As List(Of AMParticipants)
        Dim result As New List(Of AMParticipants)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT a.id_number, b.participant_id, b.full_name " & _
                                "FROM am_wesm_invoice a, am_participants b " & _
                                "WHERE a.id_number = b.id_number " & _
                                "AND a.billing_period BETWEEN " & BillingPeriodFrom & " " & _
                                "AND " & BillingPeriodTo & " AND charge_id ='" & AMModule.NSSRACode & "' " & _
                                "ORDER BY b.participant_id"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParticipantsWithNSSRA(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetParticipantsWithNSSRA(ByVal dr As IDataReader) As List(Of AMParticipants)
        Dim result As New List(Of AMParticipants)
        Try
            While dr.Read()
                With dr
                    result.Add(New AMParticipants(CStr(.Item("ID_NUMBER")), _
                                                  CStr(.Item("PARTICIPANT_ID")), _
                                                  CStr(.Item("FULL_NAME"))))

                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Invoice Sales and Purchased With DMCM"
    Public Function GetWESMInvoiceSalesAndPurchasedWithDMCM(ByVal DMCMNo As Long) As List(Of WESMBillSalesAndPurchased)

        Dim result As New List(Of WESMBillSalesAndPurchased)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.participant_id " & _
                  "FROM AM_WESM_BILL_SALES_PURCHASED a, AM_PARTICIPANTS b, AM_DMCM_DETAILS c " & _
                  "WHERE a.id_number = b.id_number AND a.invoice_no = c.inv_dm_cm AND " & _
                  "c.summary_type = '" & EnumSummaryType.INV.ToString() & "' AND c.is_compute = " & EnumDMCMComputed.Compute & " " & _
                  "AND c.AM_DMCM_NO = " & DMCMNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoiceSalesAndPurchased(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Invoice Sales and Purchased"
    Public Function GetWESMInvoiceSalesAndPurchased(ByVal billingperiod As Integer, ByVal settlementrun As String) _
                                                    As List(Of WESMBillSalesAndPurchased)

        Dim result As New List(Of WESMBillSalesAndPurchased)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.participant_id " & _
                  "FROM AM_WESM_SALES_PURCHASES_PRINT a, AM_PARTICIPANTS b " & _
                  "WHERE a.id_number = b.id_number AND a.billing_period = " & billingperiod & " " & _
                  "AND a.stl_run = '" & settlementrun & "' "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoiceSalesAndPurchased(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMInvoiceSalesAndPurchased(ByVal ListInvoiceNumber As List(Of String)) As List(Of WESMBillSalesAndPurchased)

        Dim result As New List(Of WESMBillSalesAndPurchased)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            Dim FinalListInvoiceNumber = From x In ListInvoiceNumber _
                                         Select x Distinct

            Dim InStatement As String = ""
            Dim cntY As Integer = 0
            For cntX As Integer = 0 To FinalListInvoiceNumber.Count - 1
                If cntY = 0 Then
                    InStatement = "'" & FinalListInvoiceNumber(cntX).ToString() & "'"
                Else
                    InStatement = InStatement & ",'" & FinalListInvoiceNumber(cntX).ToString() & "'"
                End If

                cntY += 1

                If cntY = 10 Or cntX = FinalListInvoiceNumber.Count - 1 Then
                    cntY = 0

                    SQL = "SELECT a.*, b.participant_id " & _
                          "FROM AM_WESM_BILL_SALES_PURCHASED a, AM_PARTICIPANTS b " & _
                          "WHERE a.id_number = b.id_number AND a.invoice_no IN (" & InStatement & ")"



                    report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
                    If report.ErrorMessage.Length <> 0 Then
                        Throw New ApplicationException(report.ErrorMessage)
                    End If

                    result.AddRange(Me.GetWESMInvoiceSalesAndPurchased(report.ReturnedIDatareader))
                    result.TrimExcess()
                End If
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMInvoiceSalesAndPurchased(ByVal InvoiceNumber As String) As List(Of WESMBillSalesAndPurchased)

        Dim result As New List(Of WESMBillSalesAndPurchased)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT a.*, b.participant_id " & _
                  "FROM AM_WESM_BILL_SALES_PURCHASED a, AM_PARTICIPANTS b " & _
                  "WHERE a.id_number = b.id_number AND a.invoice_no = '" & InvoiceNumber & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMInvoiceSalesAndPurchased(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMInvoiceSalesAndPurchased(ByVal dr As IDataReader) As List(Of WESMBillSalesAndPurchased)
        Dim result As New List(Of WESMBillSalesAndPurchased)

        Try
            While dr.Read()
                Dim item As New WESMBillSalesAndPurchased

                With dr
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.RegistrationID = CStr(.Item("REG_ID"))
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcozone = CDec(.Item("ZERO_RATED_ECOZONE"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.NetSettlementAmount = CDec(.Item("TTA"))
                    item.VATonSales = CDec(.Item("VAT_ON_SALES"))
                    item.VATonPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.WithholdingTAX = CDec(.Item("WITHHOLDING_TAX"))
                    item.GMR = CDec(.Item("GMR"))
                    item.NSSRA = CDec(.Item("NSSRA"))
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumWESMBillSalesAndPurchasedTransType), _
                                                                   CStr(.Item("TRANSACTION_TYPE"))), EnumWESMBillSalesAndPurchasedTransType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetMarketFeesSummary"
    Public Function GetMarketFeesSummary(ByVal DateFrom As Date, ByVal DateTo As Date, ByVal TransType As Integer) As List(Of MarketFeesSummary)
        Dim result As New List(Of MarketFeesSummary)
        Dim report As New DataReport
        Dim SQL As String

        Try
            '1 for allocation date and 2 for transaction date
            If TransType = 1 Then
                SQL = "SELECT b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type," & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.MarketFees & ",amount,0)) AS MF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.VatOnMarketFees & ",amount,0)) AS VATOnMF," & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingVatonMF & ",amount,0)) AS WithholdVATOnMF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingTaxOnMF & ",amount,0)) AS WithholdTAXOnMF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.DefaultInterestOnMF & ",amount,0)) AS DIOnMF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.DefaultInterestOnVatOnMF & ",amount,0)) AS VATOnDI, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingVatOnDefaultInterest & ",amount,0)) AS WithholdVATOnDI, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingTaxOnDefaultInterest & ",amount,0)) AS WithholdTAXOnDI, " & _
                      "1 AS collection_payment_trans_type " & _
                      "FROM am_collection_allocation a, am_wesm_bill_summary b, am_participants c " & _
                      "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND b.id_number = c.id_number AND " & _
                      "a.status = 1 AND " & _
                      "(a.collection_type = " & EnumCollectionType.MarketFees & " OR " & _
                      "a.collection_type = " & EnumCollectionType.VatOnMarketFees & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingVatonMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingTaxOnMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.DefaultInterestOnMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.DefaultInterestOnVatOnMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingVatOnDefaultInterest & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingTaxOnDefaultInterest & ") AND " & _
                      "a.allocation_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') AND " & _
                      "TO_DATE('" & DateTo & "','MM/DD/YYYY') " & _
                      "GROUP BY b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type " & _
                      "UNION ALL " & _
                      "SELECT b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type, " & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMF & ",a.payment_amount,0)) +  " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHTax & ",a.payment_amount,0))) AS MF," & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFV & ",a.payment_amount,0)) +  " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHVAT & ",a.payment_amount,0))) AS VATOnMF," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHVAT & ",a.payment_amount,0)) AS WithholdVATOnMF," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHTax & ",a.payment_amount,0)) AS WithholdTAXOnMF," & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFDefault & ",a.payment_amount,0)) + " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHTaxDefault & ",a.payment_amount,0))) AS DIOnMF," & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFVDefault & ",payment_amount,0)) + " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHVATDefault & ",a.payment_amount,0))) AS VATOnDI," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHVATDefault & ",a.payment_amount,0)) AS WithholdVATOnDI," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHTaxDefault & ",a.payment_amount,0)) AS WithholdTAXOnDI, " & _
                      "2 AS collection_payment_trans_type " & _
                      "FROM am_payment_details_account a, am_wesm_bill_summary b, am_participants c, am_payment d " & _
                      "WHERE a.wesmbill_no = b.wesmbill_summary_no AND b.id_number = c.id_number AND a.payment_perbp_no = d.payment_perbp_no " & _
                      "AND (a.payment_type = " & EnumPaymentType.UnpaidMF & " OR a.payment_type = " & EnumPaymentType.UnpaidMFWHTax & " OR " & _
                      "a.payment_type = " & EnumPaymentType.UnpaidMFV & " OR a.payment_type = " & EnumPaymentType.UnpaidMFWHVAT & " OR " & _
                      "a.payment_type = " & EnumPaymentType.UnpaidMFDefault & " OR a.payment_type = " & EnumPaymentType.WHTaxDefault & " OR " & _
                      "a.payment_type = " & EnumPaymentType.UnpaidMFVDefault & " OR a.payment_type = " & EnumPaymentType.WHVATDefault & ") AND " & _
                      "d.collection_allocation_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') AND " & _
                      "TO_DATE('" & DateTo & "','MM/DD/YYYY') " & _
                      "GROUP BY b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type"
            Else
                SQL = "SELECT b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type," & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.MarketFees & ",amount,0)) AS MF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.VatOnMarketFees & ",amount,0)) AS VATOnMF," & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingVatonMF & ",amount,0)) AS WithholdVATOnMF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingTaxOnMF & ",amount,0)) AS WithholdTAXOnMF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.DefaultInterestOnMF & ",amount,0)) AS DIOnMF, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.DefaultInterestOnVatOnMF & ",amount,0)) AS VATOnDI, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingVatOnDefaultInterest & ",amount,0)) AS WithholdVATOnDI, " & _
                      "SUM(DECODE(collection_type," & EnumCollectionType.WithholdingTaxOnDefaultInterest & ",amount,0)) AS WithholdTAXOnDI, " & _
                      "1 AS collection_payment_trans_type " & _
                      "FROM am_collection_allocation a, am_wesm_bill_summary b, am_participants c " & _
                      "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no AND b.id_number = c.id_number AND " & _
                      "a.status = 1 AND " & _
                      "(a.collection_type = " & EnumCollectionType.MarketFees & " OR " & _
                      "a.collection_type = " & EnumCollectionType.VatOnMarketFees & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingVatonMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingTaxOnMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.DefaultInterestOnMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.DefaultInterestOnVatOnMF & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingVatOnDefaultInterest & " OR " & _
                      "a.collection_type = " & EnumCollectionType.WithholdingTaxOnDefaultInterest & ") AND " & _
                      "a.updated_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') AND " & _
                      "TO_DATE('" & DateTo & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM') " & _
                      "GROUP BY b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type " & _
                      "UNION ALL " & _
                      "SELECT b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type, " & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMF & ",a.payment_amount,0)) +  " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHTax & ",a.payment_amount,0))) AS MF," & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFV & ",a.payment_amount,0)) +  " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHVAT & ",a.payment_amount,0))) AS VATOnMF," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHVAT & ",a.payment_amount,0)) AS WithholdVATOnMF," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFWHTax & ",a.payment_amount,0)) AS WithholdTAXOnMF," & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFDefault & ",a.payment_amount,0)) + " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHTaxDefault & ",a.payment_amount,0))) AS DIOnMF," & _
                      "(SUM(DECODE(a.payment_type," & EnumPaymentType.UnpaidMFVDefault & ",payment_amount,0)) + " & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHVATDefault & ",a.payment_amount,0))) AS VATOnDI," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHVATDefault & ",a.payment_amount,0)) AS WithholdVATOnDI," & _
                      "SUM(DECODE(a.payment_type," & EnumPaymentType.WHTaxDefault & ",a.payment_amount,0)) AS WithholdTAXOnDI, " & _
                      "2 AS collection_payment_trans_type " & _
                      "FROM am_payment_details_account a, am_wesm_bill_summary b, am_participants c, am_payment d " & _
                      "WHERE a.wesmbill_no = b.wesmbill_summary_no AND b.id_number = c.id_number AND a.payment_perbp_no = d.payment_perbp_no " & _
                      "AND (a.payment_type = " & EnumPaymentType.UnpaidMF & " OR a.payment_type = " & EnumPaymentType.UnpaidMFWHTax & " OR " & _
                      "a.payment_type = " & EnumPaymentType.UnpaidMFV & " OR a.payment_type = " & EnumPaymentType.UnpaidMFWHVAT & " OR " & _
                      "a.payment_type = " & EnumPaymentType.UnpaidMFDefault & " OR a.payment_type = " & EnumPaymentType.WHTaxDefault & " OR " & _
                      "a.payment_type = " & EnumPaymentType.UnpaidMFVDefault & " OR a.payment_type = " & EnumPaymentType.WHVATDefault & ") AND " & _
                      "d.updated_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') AND " & _
                      "TO_DATE('" & DateTo & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM') " & _
                      "GROUP BY b.id_number, c.participant_id, b.inv_dm_cm, b.summary_type"

            End If

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetMarketFeesSummary(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetMarketFeesSummary(ByVal dr As IDataReader) As List(Of MarketFeesSummary)
        Dim result As New List(Of MarketFeesSummary)
        Try
            While dr.Read()
                With dr
                    Dim item As New MarketFeesSummary
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM"))
                    item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType)
                    item.MarketFees = CDec(.Item("MF"))
                    item.VATOnMarketFees = CDec(.Item("VATONMF"))
                    item.WithholdingVATOnMarketFees = CDec(.Item("WITHHOLDVATONMF"))
                    item.WithholdingTAXOnMarketFees = CDec(.Item("WITHHOLDTAXONMF"))
                    item.DefaultInterestOnMarketFees = CDec(.Item("DIONMF"))
                    item.DefaultInterestOnVATOnMarketFees = CDec(.Item("VATONDI"))
                    item.DefaultInterestOnWithholdingVAT = CDec(.Item("WITHHOLDVATONDI"))
                    item.DefaultInterestOnWithholdingTAX = CDec(.Item("WITHHOLDTAXONDI"))
                    item.CollectionPaymentTransactionType = CType(System.Enum.Parse(GetType(EnumCollectionPaymentTransactionType), _
                                                            CStr(.Item("collection_payment_trans_type"))), EnumCollectionPaymentTransactionType)

                    result.Add(item)
                    result.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "GetAdminSettings"
    Public Function GetAdminSettings() As List(Of AdminSettings)
        Dim result As New List(Of AdminSettings)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_ADMIN_SETTINGS ORDER BY code_name"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAdminSettings(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAdminSettings(ByVal dr As IDataReader) As List(Of AdminSettings)
        Dim result As New List(Of AdminSettings)
        Try
            While dr.Read()
                Dim item As New AdminSettings
                With dr
                    item.CodeName = CStr(.Item("CODE_NAME"))
                    item.Description = CStr(.Item("DESCRIPTION"))
                    item.Value = CStr(.Item("VALUE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                End With
                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetDicAdminSettings"
    Public Function GetDicAdminSettings() As Dictionary(Of String, AdminSettings)
        Dim result As New Dictionary(Of String, AdminSettings)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * FROM AM_ADMIN_SETTINGS ORDER BY code_name"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDicAdminSettings(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDicAdminSettings(ByVal dr As IDataReader) As Dictionary(Of String, AdminSettings)
        Dim result As New Dictionary(Of String, AdminSettings)
        Try
            While dr.Read()
                Dim item As New AdminSettings
                With dr
                    item.CodeName = CStr(.Item("CODE_NAME"))
                    item.Description = CStr(.Item("DESCRIPTION"))
                    item.Value = If(IsDBNull(.Item("VALUE")), "", CStr(.Item("VALUE")))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                End With
                result.Add(item.CodeName, item)
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetOutstandingBalance"
    Public Function GetOutstandingBalance(ByVal BillingDate As Date, ByVal IDNumber As String) As Decimal
        Dim result As Decimal = 0
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT " & _
                                "((SELECT NVL(SUM(a.ending_balance),0) AS invoice_ending " & _
                                "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL b " & _
                                "WHERE a.inv_dm_cm = b.invoice_no AND a.charge_type = '" & EnumChargeType.E.ToString() & "' " & _
                                "AND b.charge_type = '" & EnumChargeType.E.ToString() & "' AND a.ending_balance <> 0 " & _
                                "AND a.summary_type ='" & EnumSummaryType.INV.ToString() & "' " & _
                                "AND b.invoice_date < TO_DATE('" & BillingDate & "','MM/DD/YYYY') " & _
                                "AND a.id_number = '" & IDNumber & "')  + " & _
                                "(SELECT NVL(SUM(a.ending_balance),0) AS dmcm_ending " & _
                                "FROM AM_WESM_BILL_SUMMARY a, AM_DMCM b " & _
                                "WHERE a.inv_dm_cm = b.am_dmcm_no AND a.charge_type = '" & EnumChargeType.E.ToString() & "' " & _
                                "AND a.ending_balance <> 0 " & _
                                "AND a.summary_type ='" & EnumSummaryType.DMCM.ToString() & "' " & _
                                 "AND b.updated_date < TO_DATE('" & BillingDate & "','MM/DD/YYYY') " & _
                                "AND a.id_number = '" & IDNumber & "')) AS sum_ending " & _
                                "FROM DUAL"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetOutstandingBalance(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetOutstandingBalance(ByVal dr As IDataReader) As Decimal
        Dim result As Decimal = 0
        Try
            While dr.Read()
                With dr
                    result = CDec(.Item("SUM_ENDING"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetDailyJournalVoucher"
    Public Function GetDailyJournalVoucher(ByVal StartDate As Date, ByVal EndDate As Date) As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT DISTINCT a.am_jv_no, b.daily_batch_code as batch_code, b.collection_date as am_jv_date " & _
                                "FROM AM_JV a, AM_COLLECTION b " & _
                                "WHERE a.batch_code = b.daily_batch_codE " & _
                                "AND b.collection_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY HH:MI:SS PM') AND a.posted_type IN ('" & EnumPostedType.DC.ToString() & "', '" & EnumPostedType.DCC.ToString() & "')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDailyJournalVoucher(report.ReturnedIDatareader)

            'Get also the deleted OR
            SQL = "SELECT DISTINCT a.am_jv_no, b.batch_code, b.collection_date as am_jv_date " & _
                  "FROM AM_JV a, AM_COLLECTION b " & _
                  "WHERE a.batch_code = b.batch_code " & _
                  "AND b.collection_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                  "AND TO_DATE('" & EndDate & "','MM/DD/YYYY HH:MI:SS PM') AND a.posted_type IN ('" & EnumPostedType.DC.ToString() & "', '" & EnumPostedType.DCC.ToString() & "')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            result.AddRange(Me.GetDailyJournalVoucher(report.ReturnedIDatareader))
            result.TrimExcess()

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDailyJournalVoucher(ByVal dr As IDataReader) As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New JournalVoucher
                    item.JVDate = CDate(.Item("AM_JV_DATE"))
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetPrudentialDrawdown"
    Public Function GetPrudentialDrawdown(ByVal TransactionDate As Date, ByVal Flag As Boolean) As List(Of PrudentialDrawdown)
        Dim result As New List(Of PrudentialDrawdown)
        Dim report As New DataReport
        Dim SQL As New StringBuilder

        Try
            If Flag Then
                SQL.Append("SELECT a.*, b.participant_id, b.full_name, ")
                SQL.Append("b.rep_name, b.rep_position, b.participant_address, b.city, b.province, b.zip_code ")
                SQL.Append("FROM am_prudential_drawdown a, am_participants b ")
                SQL.Append("WHERE a.id_number = b.id_number ")
                SQL.Append("AND a.trans_date = TO_DATE('" & TransactionDate & "','MM/DD/YYYY') ORDER BY b.participant_id ")
            Else
                SQL.Append("SELECT a.collection_no, a.ID_NUMBER, b.due_date, a.collection_date AS TRANS_DATE, ")
                SQL.Append("a.collected_amount * -1 AS drawdown_amount, ")
                SQL.Append("NVL((c.prudential_amount + c.interest_amount),0) AS remaining_prudential, ")
                SQL.Append("d.participant_id, d.full_name, d.rep_name, d.rep_position, d.participant_address, ")
                SQL.Append("d.city, d.province, d.zip_code ")
                SQL.Append("FROM am_collection a, ")
                SQL.Append("(SELECT a.collection_no, MAX(b.due_date) AS due_date FROM am_collection a, am_collection_allocation b ")
                SQL.Append("WHERE a.collection_no = b.collection_no AND a.collection_date BETWEEN TO_DATE('" & TransactionDate & "','MM/DD/YYYY') ")
                SQL.Append("AND TO_DATE('" & TransactionDate & "','MM/DD/YYYY') AND b.status = 1 ")
                SQL.Append("GROUP BY a.collection_no) b, ")
                SQL.Append("am_prudential c, am_participants d ")
                SQL.Append("WHERE a.collection_no = b.collection_no AND a.id_number = c.id_number(+) ")
                SQL.Append("AND a.id_number = d.id_number ")
                SQL.Append("AND a.am_dmcm_no <> 0 AND a.collection_date BETWEEN TO_DATE('" & TransactionDate & "','MM/DD/YYYY') ")
                SQL.Append("AND TO_DATE('" & TransactionDate & "','MM/DD/YYYY') ORDER BY d.participant_id")
            End If

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL.ToString)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPrudentialDrawdown(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPrudentialDrawdown(ByVal dr As IDataReader) As List(Of PrudentialDrawdown)
        Dim result As New List(Of PrudentialDrawdown)
        Try

            While dr.Read()
                Dim item As New PrudentialDrawdown
                With dr
                    Dim itemParticipant As New AMParticipants
                    Dim IDNumber As Long = CLng(.Item("ID_NUMBER"))

                    itemParticipant.IDNumber = CStr(.Item("ID_NUMBER"))
                    itemParticipant.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    itemParticipant.FullName = .Item("FULL_NAME").ToString()
                    itemParticipant.ParticipantAddress = .Item("PARTICIPANT_ADDRESS").ToString()                    
                    itemParticipant.City = .Item("CITY").ToString()
                    itemParticipant.Province = .Item("PROVINCE").ToString()
                    itemParticipant.ZipCode = .Item("ZIP_CODE").ToString()

                    item.CollectionNo = CLng(.Item("COLLECTION_NO"))
                    item.IDNumber = itemParticipant
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.DrawdownAmount = CDec(.Item("DRAWDOWN_AMOUNT"))
                    item.RemaningPrudential = CDec(.Item("REMAINING_PRUDENTIAL"))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetPrudentialDrawdownDates"
    Public Function GetPrudentialDrawdownDates(ByVal Flag As Boolean) As List(Of String)
        Dim result As New List(Of String)
        Dim report As New DataReport
        Dim SQL As String

        Try
            If Flag Then
                SQL = "SELECT DISTINCT trans_date " & _
                      "FROM am_prudential_drawdown " & _
                      "ORDER BY trans_date DESC "
            Else
                SQL = "SELECT DISTINCT collection_date AS trans_date " & _
                      "FROM am_collection WHERE am_dmcm_no <> 0" & _
                      "ORDER BY trans_date DESC "
            End If

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPrudentialDrawdownDates(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPrudentialDrawdownDates(ByVal dr As IDataReader) As List(Of String)
        Dim result As New List(Of String)
        Try
            While dr.Read()
                result.Add(CDate(dr.Item("TRANS_DATE")).ToString("MM/dd/yyyy"))
            End While
            result.TrimExcess()

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary By DueDate"
    Public Function GetDueDateInWESMBillSummary() As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT A.DUE_DATE AS DUEDATE " & vbNewLine & _
                                "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                                "WHERE ENDING_BALANCE <> 0 AND ENERGY_WITHHOLD <> ENDING_BALANCE " & vbNewLine & _
                                "ORDER BY DUEDATE "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim dr As IDataReader = report.ReturnedIDatareader
            While dr.Read()
                With dr
                    result.Add(CDate(CDate(.Item("DUEDATE").ToString).ToShortDateString))
                End With                
            End While
            result.TrimExcess()
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary By DueDate"
    Public Function GetWESMBillSummaryByDate(ByVal SelectedDueDate As Date) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " &
                                        "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, " &
                                        "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " &
                                        "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, a.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, a.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " &
                                "FROM AM_WESM_BILL_SUMMARY A " &
                                "INNER JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " &
                                "INNER JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type and c.id_number = a.id_number " &
                                "WHERE (A.due_date = to_date('" & SelectedDueDate & "', 'mm/dd/yyyy') AND  A.ENDING_BALANCE <> 0)  OR (A.due_date = to_date('" & SelectedDueDate & "', 'mm/dd/yyyy') AND A.ENDING_BALANCE = 0 AND A.ENERGY_WITHHOLD_STATUS = 1)"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary3(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryWithBalance() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " &
                                    "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, " &
                                    "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " &
                                    "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, a.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " &
                                "FROM AM_WESM_BILL_SUMMARY A " &
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " &
                                "INNER JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type and c.id_number = a.id_number " &
                                "INNER JOIN (SELECT T.WESMBILL_BATCH_NO, COUNT(T.WESMBILL_SUMMARY_NO) AS CNT " &
                                            "FROM AM_WESM_BILL_SUMMARY T WHERE T.ENDING_BALANCE < 0 GROUP BY T.WESMBILL_BATCH_NO) D ON D.WESMBILL_BATCH_NO = A.WESMBILL_BATCH_NO " &
                                "WHERE A.ENDING_BALANCE <> 0 OR (A.ENDING_BALANCE = 0 AND A.ENERGY_WITHHOLD_STATUS = 1)"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary3(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary All"
    Public Function GetWESMBillSummaryAll() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & _
                                "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, a.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & _
                                "FROM AM_WESM_BILL_SUMMARY A " & _
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                                "INNER JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & _
                                "INNER JOIN (SELECT T.CHARGE_TYPE, T.WESMBILL_BATCH_NO, COUNT(T.WESMBILL_SUMMARY_NO) AS CNT " & _
                                            "FROM AM_WESM_BILL_SUMMARY T WHERE T.ENDING_BALANCE > 0 GROUP BY T.CHARGE_TYPE, T.WESMBILL_BATCH_NO) D ON D.WESMBILL_BATCH_NO = A.WESMBILL_BATCH_NO AND D.CHARGE_TYPE = A.CHARGE_TYPE"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary All 2"
    Public Function GetWESMBillSummaryAll(ByVal AllocationDate As Date) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        'added by LAVV for Advance Collection Tagging 09/20/2021
        Dim selectedDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(AllocationDate)
        Dim selectedDate As Date = New Date(AllocationDate.Year, AllocationDate.Month, 24)

        Try
            Dim SQL As String = ""
            If selectedDay < 25 Then
                SQL = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                               "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & _
                               "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                               "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, a.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, D.REMARKS, A.BALANCE_TYPE " & _
                               "FROM AM_WESM_BILL_SUMMARY A " & _
                               "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                               "INNER JOIN (SELECT T.CHARGE_TYPE, T.WESMBILL_BATCH_NO, COUNT(T.WESMBILL_SUMMARY_NO) AS CNT " & _
                                           "FROM AM_WESM_BILL_SUMMARY T WHERE T.ENDING_BALANCE <> 0 GROUP BY T.CHARGE_TYPE, T.WESMBILL_BATCH_NO) C ON C.WESMBILL_BATCH_NO = A.WESMBILL_BATCH_NO AND C.CHARGE_TYPE = A.CHARGE_TYPE " & _
                               "INNER JOIN  AM_WESM_BILL D on D.invoice_no = a.inv_dm_cm and D.charge_type = a.charge_type " & _
                               "WHERE A.DUE_DATE <= TO_DATE('" & selectedDate & "', 'mm/dd/yyyy')"
            Else
                SQL = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                               "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & _
                               "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                               "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, a.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, D.REMARKS, A.BALANCE_TYPE " & _
                               "FROM AM_WESM_BILL_SUMMARY A " & _
                               "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                               "INNER JOIN (SELECT T.CHARGE_TYPE, T.WESMBILL_BATCH_NO, COUNT(T.WESMBILL_SUMMARY_NO) AS CNT " & _
                                           "FROM AM_WESM_BILL_SUMMARY T WHERE T.ENDING_BALANCE <> 0 GROUP BY T.CHARGE_TYPE, T.WESMBILL_BATCH_NO) C ON C.WESMBILL_BATCH_NO = A.WESMBILL_BATCH_NO AND C.CHARGE_TYPE = A.CHARGE_TYPE " & _
                               "INNER JOIN  AM_WESM_BILL D on D.invoice_no = a.inv_dm_cm and D.charge_type = a.charge_type " & _
                               "WHERE A.DUE_DATE <= LAST_DAY(TO_DATE('" & AllocationDate & "', 'mm/dd/yyyy'))"

            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary With Ending Balance"
    Public Function GetWESMBillSummaryWithAREndingBalance() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                                    "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, " & _
                                    "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                                    "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, c.remarks " & _
                                "FROM AM_WESM_BILL_SUMMARY A " & _
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                                "INNER JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & _
                                "LEFT JOIN (SELECT T.CHARGE_TYPE, T.WESMBILL_BATCH_NO, COUNT(T.WESMBILL_SUMMARY_NO) AS CNT " & _
                                            "FROM AM_WESM_BILL_SUMMARY T WHERE T.ENDING_BALANCE < 0 GROUP BY T.CHARGE_TYPE, T.WESMBILL_BATCH_NO) D ON D.WESMBILL_BATCH_NO = A.WESMBILL_BATCH_NO AND D.CHARGE_TYPE = A.CHARGE_TYPE " & _
                                "WHERE a.ENDING_BALANCE < 0 AND (a.ENDING_BALANCE - a.ENERGY_WITHHOLD) < 0 AND a.NO_SOA = 0"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryEnergy() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, " & _
                                "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, c.remarks " & _
                                "FROM AM_WESM_BILL_SUMMARY A " & _
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                                "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & _
                                "WHERE a.Charge_Type = 'E'"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Public Function GetWESMBillSummaryWithEndingBalance() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, " & _
                                "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, c.remarks " & _
                                "FROM AM_WESM_BILL_SUMMARY A " & _
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                                "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & _
                                "WHERE a.ENDING_BALANCE <> 0"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary With AR Ending Balance"
    Public Function GetWESMBillSummaryWithAREndingBalance(ByVal IDNumber As String) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                                        "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & _
                                        "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                                        "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & _
                                "FROM AM_WESM_BILL_SUMMARY A " & _
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                                "JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & _
                                "WHERE a.ENDING_BALANCE < 0 AND a.SPA_No = 0 AND a.ID_Number = '" & IDNumber & "' " & _
                                "AND NOT EXISTS(SELECT T1.* FROM AM_SPA_DETAILS T1 WHERE T1.WESMBILL_SUMMARY_NO = A.WESMBILL_SUMMARY_NO) " & _
                                "AND NOT EXISTS(SELECT T2.* FROM AM_SPA_MONITORING T2 WHERE T2.SPA_WESMBILL_SUMMARY_NO = A.WESMBILL_SUMMARY_NO)"


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary With AP Ending Balance"
    Public Function GetWESMBillSummaryWithAPEndingBalance(ByVal WESMBillBatchNo As Long, ByVal eChargeType As EnumChargeType) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.BILLING_PERIOD, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & _
                                "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & _
                                "FROM AM_WESM_BILL_SUMMARY A " & _
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                                "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & _
                                "WHERE a.ENDING_BALANCE > 0 and a.SPA_No = 0 and a.WESMBILL_BATCH_NO = '" & WESMBillBatchNo & "' " &
                                "AND a.CHARGE_TYPE = '" & eChargeType.ToString() & "'"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Get Settlement Notice Ending Balance Count"
    Public Function GetSettlementNoticeEndingBalanceCount(ByVal TransactionDate As Date) As Integer
        Dim result As Integer = 0
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT COUNT(*) AS CNT FROM AM_STL_NOTICE_BEGINNING_BAL " & _
                  "WHERE TRANSACTION_DATE = TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillCount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Sub CreateSettlementNoticeEndingBalance(ByVal TransactionDate As Date)
        If Me.GetSettlementNoticeEndingBalanceCount(TransactionDate) > 0 Then

        End If

        If Me.GetSettlementNoticeEndingBalanceCount(TransactionDate) = 0 Then
            Dim listWESMBillSummary = Me.GetWESMBillSummaryWithEndingBalance()

            'Get all participants registered in the AM_PARTICIPANTS TABLE per id number
            Dim _allParticipants As New List(Of AMParticipants)
            Dim _distinctIDNumber As New List(Of String)

            _allParticipants = Me.GetAMParticipants()
            _distinctIDNumber = (From x In _allParticipants _
                                 Select x.IDNumber Distinct _
                                 Order By IDNumber Ascending).ToList

            'Clear the list            
            For Each itmIDNumber In _distinctIDNumber
                Dim _itmIDNumber = itmIDNumber
                'Get outstanding invocies of participant
                Dim _lstInvoices = (From x In listWESMBillSummary _
                                    Where x.IDNumber.IDNumber = _itmIDNumber _
                                    And x.EndingBalance <> 0 _
                                    Select x).ToList

                If _lstInvoices.Count <> 0 Then
                    'listWESMBillSummary.AddRange(_lstInvoices)
                Else
                    Dim _tmpWESMSummary As New WESMBillSummary
                    With _tmpWESMSummary
                        .BillPeriod = 0
                        .DueDate = Date.Now
                        .NewDueDate = Date.Now
                        .IDNumber.IDNumber = itmIDNumber
                        .ChargeType = EnumChargeType.E
                        .BeginningBalance = 0
                        .EndingBalance = 0
                        .GroupNo = 0
                        .IDType = "P"
                        .IsMFWTaxDeducted = 1
                        .INVDMCMNo = ""
                        .SummaryType = EnumSummaryType.INV
                        .WESMBillSummaryNo = 0
                        .TransactionDate = TransactionDate
                        .Adjustment = 0
                        listWESMBillSummary.Add(_tmpWESMSummary)
                    End With

                End If
            Next
            'Save the invoices to the database for settlement notice
            Me.SaveSettlementNoticeBeginningBalance(TransactionDate, listWESMBillSummary)
        End If
    End Sub

    Private Function GetSettlementNoticeEndingBalanceCount(ByVal dr As IDataReader) As Integer
        Dim result As Integer = 0

        Try
            While dr.Read()
                With dr
                    result = CInt(.Item("CNT"))
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Count AM Payment"
    Public Function GetCountAMPayment(ByVal DateValue As Date) As Integer
        Dim result As Integer
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT COUNT(ALLOCATION_DATE) AS CNT " & _
                  "FROM AM_PAYMENT_NEW WHERE ALLOCATION_DATE = TO_DATE('" & DateValue & "','MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCountAMPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCountAMPayment(ByVal dr As IDataReader) As Integer
        Dim result As Integer

        Try
            While dr.Read()
                With dr
                    result = CInt(.Item("CNT"))
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Bill Summary History"
    Public Function GetWESMBillSummaryHistory(ByVal CollectionNumber As Long) As List(Of WESMBillSummaryHistory)
        Dim result As New List(Of WESMBillSummaryHistory)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * FROM AM_WESM_BILL_SUMMARY_HISTORY " & _
                  "WHERE COLLECTION_NO = " & CollectionNumber & " " & _
                  "AND STATUS = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryHistoryLstWESMSummaryNo(ByVal lstWESMBillNo As List(Of Long)) As List(Of WESMBillSummaryHistory)
        Dim result As New List(Of WESMBillSummaryHistory)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            SQL = "SELECT * FROM AM_WESM_BILL_SUMMARY_HISTORY " & _
                  "WHERE WESMBILL_SUMMARY_NO IN ("

            Dim recCtr As Long = 0
            For Each itmWESMNo In lstWESMBillNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmWESMNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR B.WESMBILL_SUMMARY_NO IN ("
                    End If
                    SQL &= itmWESMNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") ORDER BY UPDATED_DATE ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryHistory(DateFrom As Date, DateTo As Date) As List(Of WESMBillSummaryHistory)
        Dim result As New List(Of WESMBillSummaryHistory)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            SQL = "SELECT * FROM AM_WESM_BILL_SUMMARY_HISTORY " & _
                  "WHERE UPDATED_DATE >= TO_DATE('" & DateFrom & "','MM/DD/YYYY') AND " & _
                  "UPDATED_DATE <=  TO_DATE('" & DateTo & "','MM/DD/YYYY') ORDER BY UPDATED_DATE ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryHistory(DateTo As Date) As List(Of WESMBillSummaryHistory)
        Dim result As New List(Of WESMBillSummaryHistory)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            SQL = "SELECT * FROM AM_WESM_BILL_SUMMARY_HISTORY " & _
                  "WHERE " & _
                  "UPDATED_DATE <=  TO_DATE('" & DateTo & "','MM/DD/YYYY') " & _
                  "ORDER BY UPDATED_DATE ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryHistory(ByVal dr As IDataReader) As List(Of WESMBillSummaryHistory)
        Dim result As New List(Of WESMBillSummaryHistory)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryHistory

                With dr
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.CollectionNumber = CLng(.Item("COLLECTION_NO"))
                    item.PaymentBatchCode = If(IsDBNull(.Item("PAYMENT_BATCH_CODE")), Nothing, CStr(.Item("PAYMENT_BATCH_CODE").ToString()))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.CollectionType = CType(System.Enum.Parse(GetType(EnumCollectionType), CStr(.Item("COLLECTION_TYPE").ToString)), EnumCollectionType)
                    item.PaymentType = CType(System.Enum.Parse(GetType(EnumPaymentType), CStr(.Item("PAYMENT_TYPE").ToString)), EnumPaymentType)
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), CStr(.Item("STATUS").ToString())), EnumStatus)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get Official Receipt Raw Details"
    Public Function GetOfficialReceiptRawDetails(ByVal OrNo As Long) As List(Of OfficialReceiptReportRawDetailsNew)
        Dim result As New List(Of OfficialReceiptReportRawDetailsNew)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            'For WESM Invoice Energy
            SQL = "SELECT a.or_no, d.invoice_no AS doc_no, c.summary_type, d.invoice_date AS doc_date, b.wesmbill_summary_no, " & _
                        "b.due_date, b.amount, b.vat, b.defaultinterest, b.withholdingtax, b.withholdingvat, '" & EnumORTransactionType.Energy & "' AS transactiontype " & _
                        "FROM AM_OFFICIAL_RECEIPT_MAIN a, AM_OFFICIAL_RECEIPT_SUMMARY_EN b, AM_WESM_BILL_SUMMARY c, AM_WESM_BILL d " & _
                        "WHERE a.or_no = b.or_no And b.wesmbill_summary_no = c.wesmbill_summary_no AND c.inv_dm_cm = d.invoice_no AND " & _
                        "c.summary_type = '" & EnumSummaryType.INV.ToString() & "' AND c.charge_type = d.charge_type AND a.or_no = " & OrNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result.AddRange(Me.GetOfficialReceiptRawDetails(report.ReturnedIDatareader))
            result.TrimExcess()

            'For WESM Invoice MF
            SQL = "SELECT a.or_no, d.invoice_no AS doc_no, c.summary_type, d.invoice_date AS doc_date, b.wesmbill_summary_no, " & _
                        "b.due_date, b.amount, b.vat, b.defaultinterest, b.withholdingtax, b.withholdingvat, '" & EnumORTransactionType.MarketFees & "' AS transactiontype " & _
                  "FROM AM_OFFICIAL_RECEIPT_MAIN a, AM_OFFICIAL_RECEIPT_SUMMARY_MF b, AM_WESM_BILL_SUMMARY c, AM_WESM_BILL d " & _
                 "WHERE a.or_no = b.or_no And b.wesmbill_summary_no = c.wesmbill_summary_no AND c.inv_dm_cm = d.invoice_no AND " & _
                        "c.summary_type = '" & EnumSummaryType.INV.ToString() & "' AND c.charge_type = d.charge_type AND a.or_no = " & OrNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result.AddRange(Me.GetOfficialReceiptRawDetails(report.ReturnedIDatareader))
            result.TrimExcess()

            'For DMCM
            'SQL = "SELECT a.or_no, d.am_dmcm_no AS doc_no, c.summary_type, d.updated_date AS doc_date, " & _
            '      "b.wesmbill_summary_no, b.due_date, b.amount, b.collection_type  " & _
            '      "FROM AM_OFFICIAL_RECEIPT_MAIN a, AM_OFFICIAL_RECEIPT_SUMMARY b, AM_WESM_BILL_SUMMARY c, AM_DMCM d " & _
            '      "WHERE a.or_no = b.or_no AND b.wesmbill_summary_no = c.wesmbill_summary_no AND c.inv_dm_cm = d.am_dmcm_no AND " & _
            '      "c.summary_type = '" & EnumSummaryType.DMCM.ToString() & "' AND a.or_no = " & OrNo

            'report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            'If report.ErrorMessage.Length <> 0 Then
            '    Throw New ApplicationException(report.ErrorMessage)
            'End If
            'result.AddRange(Me.GetOfficialReceiptRawDetails(report.ReturnedIDatareader))
            'result.TrimExcess()

            'For Excess/pr Collection
            SQL = "SELECT a.or_no, 0 AS doc_no, null AS doc_date, 'NONE' as summary_type, b.wesmbill_summary_no, " & _
                        "null AS due_date, b.amount, b.vat, b.defaultinterest, b.withholdingtax, b.withholdingvat, b.transactiontype " & _
                  "FROM AM_OFFICIAL_RECEIPT_MAIN a, AM_OFFICIAL_RECEIPT_SUMMARY_OT b " & _
                  "WHERE a.or_no = b.or_no And a.or_no = " & OrNo & " AND b.wesmbill_summary_no = 0"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result.AddRange(Me.GetOfficialReceiptRawDetails(report.ReturnedIDatareader))
            result.TrimExcess()

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetOfficialReceiptRawDetails(ByVal dr As IDataReader) As List(Of OfficialReceiptReportRawDetailsNew)
        Dim result As New List(Of OfficialReceiptReportRawDetailsNew)

        Try
            While dr.Read()
                Dim item As New OfficialReceiptReportRawDetailsNew

                With dr
                    item.ORNo = CLng(.Item("OR_NO"))
                    item.DocumentNo = CStr(.Item("DOC_NO"))

                    If Not .Item("DOC_DATE").ToString().Length = 0 Then
                        item.DocumentDate = CDate(.Item("DOC_DATE"))
                    End If

                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))

                    If Not .Item("DUE_DATE").ToString().Length = 0 Then
                        item.DueDate = CDate(.Item("DUE_DATE"))
                    End If

                    Select Case CStr(.Item("SUMMARY_TYPE"))
                        Case EnumDocumentType.NONE.ToString()
                            item.DocumentType = EnumDocumentType.NONE

                        Case EnumDocumentType.INV.ToString()
                            item.DocumentType = EnumDocumentType.INV

                        Case EnumDocumentType.DMCM.ToString()
                            item.DocumentType = EnumDocumentType.DMCM

                    End Select

                    item.Amount = CDec(.Item("AMOUNT"))
                    item.Vat = CDec(.Item("VAT"))
                    item.DefaultInterest = CDec(.Item("DEFAULTINTEREST"))
                    item.WithHoldingTax = CDec(.Item("WITHHOLDINGTAX"))
                    item.WithHoldingVat = CDec(.Item("WITHHOLDINGVAT"))
                    item.TransactionType = CType(CType(.Item("TRANSACTIONTYPE"), Integer), EnumORTransactionType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get WESM Logs Transaction"

    Public Function GetWESMLogsTransaction(ByVal DateFrom As Date, ByVal DateTo As Date, ApplicationName As String) As List(Of WESMLogsTransaction)

        Dim result As New List(Of WESMLogsTransaction)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "SELECT * from WESMLOGS_TRANSACTION " & _
                  "WHERE application_name = '" & ApplicationName & "' AND transaction_date BETWEEN TO_DATE('" & DateFrom & "','MM/DD/YYYY') AND TO_DATE('" & DateTo & "','MM/DD/YYYY') " & _
                  "ORDER BY transaction_date DESC"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMLogsTransaction(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMLogsTransaction(ByVal dr As IDataReader) As List(Of WESMLogsTransaction)
        Dim result As New List(Of WESMLogsTransaction)

        Try
            While dr.Read()
                Dim item As New WESMLogsTransaction

                With dr
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.ModuleName = .Item("MODULE_NAME").ToString()
                    item.ComputerName = .Item("COMPUTER_NAME").ToString()
                    item.IPAddress = .Item("IP_ADDRESS").ToString()
                    item.Miscellaneous1 = .Item("MISC_1").ToString()
                    item.Miscellaneous2 = .Item("MISC_2").ToString()
                    item.Miscellaneous3 = .Item("MISC_3").ToString()
                    item.ColorCode = CType(System.Enum.Parse(GetType(EnumColorCode), _
                                                            CStr(.Item("COLOR_CODE"))), EnumColorCode)
                    item.LogType = CType(System.Enum.Parse(GetType(EnumLogType), _
                                                            CStr(.Item("LOG_TYPE"))), EnumLogType)
                    item.UpdatedBy = .Item("UPDATED_BY").ToString()
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Aging Details"
    Public Function GetAgingDetails(ByVal lstWESMBillNo As List(Of Long)) As List(Of WESMBillSummaryHistory)
        Dim result As New List(Of WESMBillSummaryHistory)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            SQL = "select a.*, b.inv_dm_cm, b.summary_type, b.charge_type, b.due_date from am_wesm_bill_summary_history a, am_wesm_bill_summary b " & _
                  "where  and b.wesmbill_summary_no = a.wesmbill_summary_no and a.wesmbill_summary_no in ("

            Dim recCtr As Long = 0
            For Each itmWESMNo In lstWESMBillNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmWESMNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR A.WESMBILL_SUMMARY_NO IN ("
                    End If
                    SQL &= itmWESMNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAgingDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAgingDetails(ByVal dr As IDataReader) As List(Of WESMBillSummaryHistory)
        Dim result As New List(Of WESMBillSummaryHistory)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryHistory

                With dr
                    'item.WESMBillSummaryNo = New WESMBillSummary(CLng(.Item("WESMBILL_SUMMARY_NO")), CStr(.Item("INV_DM_CM")), _
                    '                                             CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType), _
                    '                                             CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType), _
                    '                                             CDate(.Item("DUE_DATE")))
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.CollectionNumber = CLng(.Item("COLLECTION_NO"))
                    item.CollectionType = CType(System.Enum.Parse(GetType(EnumCollectionType), CStr(.Item("COLLECTION_TYPE"))), EnumCollectionType)
                    item.PaymentBatchCode = CStr(.Item("PAYMENT_BATCH_CODE"))
                    item.PaymentType = CType(System.Enum.Parse(GetType(EnumPaymentType), CStr(.Item("PAYMENT_TYPE"))), EnumPaymentType)
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get WESMBillSummary From Collection"
    Public Function GetWESMBillSummaryFromCollection(IDNumber As String, TransactionDate As Date) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            SQL = "SELECT b.id_number, a.wesmbill_summary_no, b.or_no," & _
                  "b.am_dmcm_no, b.collection_date, a.amount " & _
                  "FROM AM_WESM_BILL_SUMMARY_HISTORY a, AM_COLLECTION b, AM_WESM_BILL_SUMMARY c " & _
                  "WHERE a.collection_no = b.collection_no AND a.wesmbill_summary_no = c.wesmbill_summary_no AND b.status = " & EnumCollectionStatus.Allocated & " " & _
                  "AND a.collection_no <> 0 AND c.id_number = '" & IDNumber & "' AND a.status = " & EnumStatus.Active & " " & _
                  "AND b.collection_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
                  "AND a.collection_type IN (" & EnumCollectionType.MarketFees & "," & EnumCollectionType.VatOnMarketFees & "," & _
                  " " & EnumCollectionType.Energy & "," & EnumCollectionType.VatOnEnergy & ") " & _
                  "ORDER BY b.collection_date"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryFromCollection(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryFromCollection(ByVal dr As IDataReader) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryTransaction

                With dr
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()))
                    item.TransactionDate = CDate(.Item("COLLECTION_DATE").ToString())
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))

                    If CLng(.Item("OR_NO")) <> 0 Then
                        item.ReferenceNo = CLng(.Item("OR_NO"))
                        item.TransactionType = BIRDocumentsType.OfficialReceipt
                    Else
                        item.ReferenceNo = CLng(.Item("AM_DMCM_NO"))
                        item.TransactionType = BIRDocumentsType.DMCM
                    End If
                    item.Amount = CDec(.Item("AMOUNT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get WESMBillSummary From Payment Allocation"    
    Public Function GetWESMBillSummaryFromPaymentAllocationForAP(IDNumber As String, TransactionDate As Date) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)
        Dim report As New DataReport
        Dim SQL As String

        Try
            'changed from AM_WESM_BILL_SUMMARY_HISTORY to AM_PAYMENT_NEW_AP and AM_PAYMENT_NEW_OFFSETTING_AP as of 10212020
            'SQL = "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
            '      "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL_SUMMARY_HISTORY b, AM_PAYMENT_NEW c, " & _
            '      "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
            '      "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
            '      "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no And b.status = " & EnumStatus.Active & " " & _
            '      "AND a.balance_type = 'AP' AND a.id_number = '" & IDNumber & "'  AND  c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
            '      "AND b.payment_type IN (" & EnumPaymentNewType.MarketFees & "," & EnumPaymentNewType.VatOnMarketFees & "," & _
            '      " " & EnumPaymentNewType.Energy & "," & EnumPaymentNewType.VatOnEnergy & ", " & EnumPaymentNewType.EnergyAPEndingBalanceAdjustment & ") AND e.posted_type = '" & EnumPostedType.P.ToString() & "' AND b.amount <> 0 " & _
            '      "ORDER BY c.allocation_date"


            SQL = "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.allocation_amount as amount " & _
                  "FROM AM_WESM_BILL_SUMMARY a, AM_PAYMENT_NEW_AP b, AM_PAYMENT_NEW c, " & _
                  "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
                  "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no " & _
                  "AND a.balance_type = 'AP' AND a.id_number = '" & IDNumber & "'  AND  c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
                  "AND b.payment_type IN (" & EnumPaymentNewType.MarketFees & "," & EnumPaymentNewType.VatOnMarketFees & "," & _
                  " " & EnumPaymentNewType.Energy & "," & EnumPaymentNewType.VatOnEnergy & ", " & EnumPaymentNewType.EnergyAPEndingBalanceAdjustment & ") AND e.posted_type = '" & EnumPostedType.P.ToString() & "' AND b.allocation_amount <> 0 " & _
                  "UNION ALL " & _
                  "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
                  "FROM AM_WESM_BILL_SUMMARY a, " & _
                  "(SELECT PAYMENT_NO, BILLING_PERIOD, PAYMENT_TYPE, ALLOCATION_DATE, WESMBILL_SUMMARY_NO, PAYMENT_CATEGORY, SUM(ALLOCATION_AMOUNT) as AMOUNT " & _
                  "FROM AM_PAYMENT_NEW_OFFSETTING_AP " & _
                  "GROUP BY PAYMENT_NO, BILLING_PERIOD, PAYMENT_TYPE, ALLOCATION_DATE, WESMBILL_SUMMARY_NO, PAYMENT_CATEGORY) b, AM_PAYMENT_NEW c, " & _
                  "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
                  "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no " & _
                  "AND a.balance_type = 'AP' AND a.id_number = '" & IDNumber & "'  AND  c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
                  "AND b.payment_type IN (" & EnumPaymentNewType.MarketFees & "," & EnumPaymentNewType.VatOnMarketFees & "," & _
                  " " & EnumPaymentNewType.Energy & "," & EnumPaymentNewType.VatOnEnergy & ", " & EnumPaymentNewType.EnergyAPEndingBalanceAdjustment & ") AND e.posted_type = '" & EnumPostedType.PA.ToString() & "' AND b.amount <> 0 " & _
                  "UNION ALL " & _
                  "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
                  "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL_SUMMARY_HISTORY b, AM_PAYMENT_NEW c, " & _
                  "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
                  "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no And b.status = " & EnumStatus.Active & " " & _
                  "AND a.balance_type = 'AP' AND a.id_number = '" & IDNumber & "'  AND  c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
                  "AND b.payment_type IN (" & EnumPaymentNewType.EnergyAPEndingBalanceAdjustment & ") AND e.posted_type = '" & EnumPostedType.PA.ToString() & "' AND b.amount <> 0 "

            'SQL = "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
            '      "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL_SUMMARY_HISTORY b, AM_PAYMENT_NEW c, " & _
            '      "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
            '      "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
            '      "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no And b.status = " & EnumStatus.Active & " " & _
            '      "AND a.balance_type = 'AP' AND a.id_number = '" & IDNumber & "'  AND  c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
            '      "AND b.payment_type IN (" & EnumPaymentNewType.MarketFees & "," & EnumPaymentNewType.VatOnMarketFees & "," & _
            '      " " & EnumPaymentNewType.Energy & "," & EnumPaymentNewType.VatOnEnergy & ") AND e.posted_type = '" & EnumPostedType.P.ToString() & "'  " & _
            '      "ORDER BY c.allocation_date"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryFromPaymentAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryFromPaymentAllocationForAR(IDNumber As String, TransactionDate As Date) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)
        Dim report As New DataReport
        Dim SQL As String

        Try
            'changed from AM_WESM_BILL_SUMMARY_HISTORY to AM_PAYMENT_NEW_OFFSETTING_AR as of 10212020

            'SQL = "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
            '      "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL_SUMMARY_HISTORY b, AM_PAYMENT_NEW c, " & _
            '      "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
            '      "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
            '      "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no And b.status = " & EnumStatus.Active & " " & _
            '      "AND a.balance_type = 'AR' AND a.id_number = '" & IDNumber & "' AND c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
            '      "AND b.collection_type IN (" & EnumCollectionType.MarketFees & "," & EnumCollectionType.VatOnMarketFees & "," & _
            '      " " & EnumCollectionType.Energy & "," & EnumCollectionType.VatOnEnergy & ", " & EnumCollectionType.EnergyAREndingBalanceAdjustment & ") AND e.posted_type = '" & EnumPostedType.PA.ToString() & "' " & _
            '      "ORDER BY c.allocation_date"

            SQL = "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
                  "FROM AM_WESM_BILL_SUMMARY a, " & _
                  "(SELECT PAYMENT_NO, BILLING_PERIOD, COLLECTION_TYPE, ALLOCATION_DATE, WESMBILL_SUMMARY_NO, COLLECTION_CATEGORY, SUM(ALLOCATION_AMOUNT) as AMOUNT " & _
                  "FROM AM_PAYMENT_NEW_OFFSETTING_AR " & _
                  "GROUP BY PAYMENT_NO, BILLING_PERIOD, COLLECTION_TYPE, ALLOCATION_DATE, WESMBILL_SUMMARY_NO, COLLECTION_CATEGORY) b, AM_PAYMENT_NEW c, " & _
                  "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
                  "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no " & _
                  "AND a.balance_type = 'AR' AND a.id_number = '" & IDNumber & "'  AND  c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
                  "AND b.collection_type IN (" & EnumCollectionType.MarketFees & "," & EnumCollectionType.VatOnMarketFees & "," & _
                  " " & EnumCollectionType.Energy & "," & EnumCollectionType.VatOnEnergy & ", " & EnumCollectionType.EnergyAREndingBalanceAdjustment & ") AND e.posted_type = '" & EnumPostedType.PA.ToString() & "' AND b.amount <> 0 " & _
                  "UNION ALL " & _
                  "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
                  "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL_SUMMARY_HISTORY b, AM_PAYMENT_NEW c, " & _
                  "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
                  "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
                  "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no And b.status = " & EnumStatus.Active & " " & _
                  "AND a.balance_type = 'AR' AND a.id_number = '" & IDNumber & "' AND c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
                  "AND b.collection_type IN (" & EnumCollectionType.EnergyAREndingBalanceAdjustment & ") AND e.posted_type = '" & EnumPostedType.PA.ToString() & "' "


            'SQL = "SELECT a.id_number, a.wesmbill_summary_no, d.am_jv_no, c.allocation_date, b.amount " & _
            '      "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL_SUMMARY_HISTORY b, AM_PAYMENT_NEW c, " & _
            '      "AM_PAYMENT_NEW_DETAILS d, AM_JV e " & _
            '      "WHERE a.wesmbill_summary_no = b.wesmbill_summary_no And b.payment_no = c.payment_no AND " & _
            '      "c.payment_no = d.payment_no And d.am_jv_no = e.am_jv_no And b.status = " & EnumStatus.Active & " " & _
            '      "AND a.balance_type = 'AR' AND a.id_number = '" & IDNumber & "' AND c.allocation_date < TO_DATE('" & TransactionDate & "','mm/dd/yyyy') " & _
            '      "AND b.collection_type IN (" & EnumCollectionType.MarketFees & "," & EnumCollectionType.VatOnMarketFees & "," & _
            '      " " & EnumCollectionType.Energy & "," & EnumCollectionType.VatOnEnergy & ") AND e.posted_type = '" & EnumPostedType.PA.ToString() & "' " & _
            '      "ORDER BY c.allocation_date"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryFromPaymentAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryFromPaymentAllocation(ByVal dr As IDataReader) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryTransaction

                With dr
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()))
                    item.TransactionDate = CDate(.Item("ALLOCATION_DATE").ToString())
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.ReferenceNo = CLng(.Item("AM_JV_NO"))
                    item.TransactionType = BIRDocumentsType.JournalVoucher
                    item.Amount = CDec(.Item("AMOUNT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get WESMBillSummary From Parent Child Offsetting"
    Public Function GetWESMBillSummaryFromParentChildOffsetting(IDNumber As String, TransactionDate As Date) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            SQL = "SELECT a.id_number, a.transaction_date, a.am_dmcm_no, a.amount, b.wesmbill_summary_no " & _
                  "FROM (SELECT a.id_number, TO_DATE(TO_CHAR(a.updated_date,'MM/DD/YYYY'),'MM/DD/YYYY') AS transaction_date, " & _
                  "a.am_dmcm_no, (b.debit - b.credit) AS amount, a.charge_type, b.inv_dm_cm " & _
                  "FROM AM_DMCM a, AM_DMCM_DETAILS b " & _
                  "WHERE a.am_dmcm_no = b.am_dmcm_no  AND a.id_number = '" & IDNumber & "' " & _
                  "AND a.updated_date < TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                  "AND a.trans_type IN (" & EnumDMCMTransactionType.WESMBillP2COffsetting & "," & _
                  " " & EnumDMCMTransactionType.WESMBillP2PC2COffsetting & ")) a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.inv_dm_cm = b.inv_dm_cm AND a.charge_type = b.charge_type AND b.id_number = '" & IDNumber & "' " & _
                  "ORDER BY a.transaction_date"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryFromParentChildOffsetting(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryFromParentChildOffsetting(ByVal dr As IDataReader) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryTransaction

                With dr
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE").ToString())
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.ReferenceNo = CLng(.Item("AM_DMCM_NO"))
                    item.TransactionType = BIRDocumentsType.DMCM
                    item.Amount = CDec(.Item("AMOUNT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get WESMBillSummary From SPA"
    Public Function GetWESMBillSummaryFromSPA(IDNumber As String, TransactionDate As Date, BalanceType As EnumBalanceType) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            If BalanceType = EnumBalanceType.AR Then
                SQL = "SELECT a.id_number, a.transaction_date, a.am_dmcm_no, a.amount, b.wesmbill_summary_no " & _
                  "FROM (SELECT a.id_number, TO_DATE(TO_CHAR(a.updated_date,'MM/DD/YYYY'),'MM/DD/YYYY') AS transaction_date, " & _
                  "a.am_dmcm_no, (b.credit) AS amount, a.charge_type, b.inv_dm_cm " & _
                  "FROM AM_DMCM a, AM_DMCM_DETAILS b " & _
                  "WHERE a.am_dmcm_no = b.am_dmcm_no  AND a.id_number = '" & IDNumber & "' " & _
                  "AND a.updated_date < TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                  "AND a.trans_type IN (" & EnumDMCMTransactionType.SPAClosingAccountReceivable & "," & _
                  " " & EnumDMCMTransactionType.SPAClosingAccountPayable & ") AND b.acct_code = '" & AMModule.CreditCode & "') a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.inv_dm_cm = b.inv_dm_cm AND a.charge_type = b.charge_type AND b.id_number = '" & IDNumber & "' " & _
                  "ORDER BY a.transaction_date"
            Else
                SQL = "SELECT a.id_number, a.transaction_date, a.am_dmcm_no, a.amount, b.wesmbill_summary_no " & _
                  "FROM (SELECT a.id_number, TO_DATE(TO_CHAR(a.updated_date,'MM/DD/YYYY'),'MM/DD/YYYY') AS transaction_date, " & _
                  "a.am_dmcm_no, (b.debit) AS amount, a.charge_type, b.inv_dm_cm " & _
                  "FROM AM_DMCM a, AM_DMCM_DETAILS b " & _
                  "WHERE a.am_dmcm_no = b.am_dmcm_no  AND a.id_number = '" & IDNumber & "' " & _
                  "AND a.updated_date < TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                  "AND a.trans_type IN (" & EnumDMCMTransactionType.SPAClosingAccountReceivable & "," & _
                  " " & EnumDMCMTransactionType.SPAClosingAccountPayable & ") AND b.acct_code = '" & AMModule.DebitCode & "') a, AM_WESM_BILL_SUMMARY b " & _
                  "WHERE a.inv_dm_cm = b.inv_dm_cm AND a.charge_type = b.charge_type AND b.id_number = '" & IDNumber & "' " & _
                  "ORDER BY a.transaction_date"
            End If
            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryFromSPA(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryFromSPA(ByVal dr As IDataReader) As List(Of WESMBillSummaryTransaction)
        Dim result As New List(Of WESMBillSummaryTransaction)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryTransaction

                With dr
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE").ToString())
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.ReferenceNo = CLng(.Item("AM_DMCM_NO"))
                    item.TransactionType = BIRDocumentsType.DMCM
                    item.Amount = CDec(.Item("AMOUNT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get WESMBillSummary With Invoice"
    Public Function GetWESMBillSummaryWithInvoice(IDNumber As String, TransactionDate As Date, BalanceType As EnumBalanceType) As List(Of WESMBillSummaryWithInvoice)
        Dim result As New List(Of WESMBillSummaryWithInvoice)
        Dim report As New DataReport
        Dim SQL As String

        Try
            
            SQL = "SELECT a.wesmbill_summary_no, a.inv_dm_cm, a.id_number, a.charge_type, b.invoice_date, " & _
                  "b.due_date, b.amount, a.beginning_balance, a.ending_balance, a.energy_withhold, a.balance_type " & _
                  "FROM AM_WESM_BILL_SUMMARY a, AM_WESM_BILL b " & _
                  "WHERE a.inv_dm_cm = b.invoice_no and a.charge_type = b.charge_type " & _
                  "AND b.invoice_date < to_date('" & TransactionDate & "','mm/dd/yyyy') " & _
                  "AND a.id_number = '" & IDNumber & "' AND a.balance_type = '" & BalanceType.ToString.ToUpper & "' " & _
                  "ORDER BY b.due_date"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryWithInvoice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryWithInvoice(ByVal dr As IDataReader) As List(Of WESMBillSummaryWithInvoice)
        Dim result As New List(Of WESMBillSummaryWithInvoice)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryWithInvoice                
                With dr                    
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.InvoiceNumber = CStr(.Item("INV_DM_CM").ToString())
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.InvoiceDate = CDate(.Item("INVOICE_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.InvoiceAmount = CDec(.Item("AMOUNT"))
                    item.BeginningBalance = CDec(.Item("BEGINNING_BALANCE"))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.EnergyWithhold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.BalanceType = CStr(.Item("BALANCE_TYPE"))
                    item.ListOfWESMBillTransactionFromCollection = New List(Of WESMBillSummaryTransaction)

                    'If item.BeginningBalance = 0 And item.EndingBalance < 0 Then
                    '    item.BeginningBalance = item.EndingBalance
                    '    item.InvoiceAmount = item.EndingBalance
                    'End If

                    'If item.BeginningBalance = 0 And item.EndingBalance > 0 Then
                    '    item.BeginningBalance = item.EndingBalance
                    '    item.InvoiceAmount = item.EndingBalance
                    'End If

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementFTF"
    Public Function GetGeneralLedgerCashInBankSettlementFTF(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try          
            Dim SQL As String = "SELECT c.am_jv_no, a.ref_no, c.am_jv_date, b.id_number, " & _
                                       "d.full_name,  b.amount, a.trans_type " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "a.trans_type = " & EnumFTFTransType.DrawDown & " AND " & _
                                     "c.posted_type = '" & EnumPostedType.C.ToString() & "' AND " & _
                               "a.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                               "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementFTF(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementFTF(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.FTF
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))

                    If CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.DrawDown Then
                        item.Description = "FTF - Draw Down"
                        item.Debit = CDec(.Item("AMOUNT"))
                        item.Credit = 0
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.Replenishment Then
                        item.Description = "FTF - Replenishment"
                        item.Debit = 0
                        item.Credit = CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToPEMC Then
                        item.Description = "FTF - Transfer of Market Fees to IEMOP"
                        item.Debit = 0
                        item.Credit = CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToSTL Then
                        item.Description = "FTF - Transfer of Market Fees to Settlement"
                        item.Debit = CDec(.Item("AMOUNT"))
                        item.Credit = 0
                    Else
                        item.Debit = 0
                        item.Credit = 0
                    End If
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankSettlementFTFBeginning"
    Public Function GetGeneralLedgerCashInBankSettlementFTFBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS amount, a.trans_type " & _
                              "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                              "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                    "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                    "a.trans_type = " & EnumFTFTransType.DrawDown & " AND " & _
                                    "c.posted_type = '" & EnumPostedType.C.ToString() & "' AND " & _
                              "a.allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                              "GROUP BY a.trans_type"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementFTFBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementFTFBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Dim Debit As Decimal, Credit As Decimal
        Try
            Debit = 0
            Credit = 0

            While dr.Read()
                With dr
                    If CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.DrawDown Then
                        Debit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.Replenishment Then
                        Credit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToPEMC Then
                        Credit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToSTL Then
                        Debit += CDec(.Item("AMOUNT"))
                    Else
                        Debit += 0
                        Credit += 0
                    End If
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementToPrudentialFromCollection"
    Public Function GetGeneralLedgerCashInBankSettlementToPrudentialFromCollection(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT c.am_jv_no, a.ref_no, c.am_jv_date, b.id_number, " & _
                                       "d.full_name,  b.amount, a.trans_type " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "a.trans_type = " & EnumFTFTransType.Replenishment & " AND " & _
                                     "c.posted_type = '" & EnumPostedType.C.ToString() & "' AND " & _
                               "a.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                               "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToPrudentialFromCollection(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToPrudentialFromCollection(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE")) 'CDate(.Item("ALLOCATION_DATE"))
                    item.TransactionType = BIRDocumentsType.FTF
                    item.Description = "FTF - PR Replenishment from Collection"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementToFinPenFromPayment"
    Public Function GetGeneralLedgerCashInBankSettlementToFinPenFromPayment(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT c.am_jv_no, a.ref_no, c.am_jv_date, b.id_number, " & _
                                       "d.full_name,  b.amount, a.trans_type " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "a.trans_type = " & EnumFTFTransType.TransferPEMCAccount & " AND " & _
                                     "c.posted_type = '" & EnumPostedType.PEFT.ToString() & "' AND " & _
                               "a.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                               "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToFinPenFromPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToFinPenFromPayment(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.FTF
                    item.Description = "FTF - Financial Penalty Payment"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementToPrudentialFromCollectionBeginning"
    Public Function GetGeneralLedgerCashInBankSettlementToPrudentialFromCollectionBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS amount " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "a.trans_type = " & EnumFTFTransType.Replenishment & " AND " & _
                                     "c.posted_type = '" & EnumPostedType.C.ToString() & "' AND " & _
                               "a.allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToPrudentialFromCollectionBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToPrudentialFromCollectionBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Dim Debit As Decimal, Credit As Decimal
        Try
            While dr.Read()
                With dr
                    Debit = 0
                    Credit = CDec(.Item("AMOUNT"))
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementToPEMCAccount"
    Public Function GetGeneralLedgerCashInBankSettlementToPEMCAccount(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT c.am_jv_no, a.ref_no, c.am_jv_date, b.id_number, " & _
                                       "d.full_name,  b.amount, a.trans_type " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "(a.trans_type = " & EnumFTFTransType.TransferMarketFeesToSTL & " OR " & _
                                     "a.trans_type = " & EnumFTFTransType.TransferMarketFeesToPEMC & ") AND " & _
                                     "c.posted_type = '" & EnumPostedType.PEFT.ToString() & "' AND " & _
                               "a.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                               "AND TO_DATE('" & EndDate & "','MM/DD/YYYY ') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToPEMCAccount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToPEMCAccount(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE")) 'CDate(.Item("ALLOCATION_DATE"))
                    item.TransactionType = BIRDocumentsType.FTF
                    item.Description = "FTF - Transfer of Market Fees to IEMOP"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))

                    If CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToSTL Then
                        item.Debit = CDec(.Item("AMOUNT"))
                        item.Credit = 0
                    Else
                        item.Debit = 0
                        item.Credit = CDec(.Item("AMOUNT"))
                    End If

                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankSettlementToPEMCAccountBeginning"
    Public Function GeneralLedgerCashInBankSettlementToPEMCAccountBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS amount, a.trans_type " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "(a.trans_type = " & EnumFTFTransType.TransferMarketFeesToSTL & " OR  " & _
                                     "a.trans_type = " & EnumFTFTransType.TransferMarketFeesToPEMC & ") AND " & _
                                     "c.posted_type = '" & EnumPostedType.PEFT.ToString() & "' AND " & _
                                 "a.allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                                 "GROUP BY a.trans_type"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankSettlementToPEMCAccountBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankSettlementToPEMCAccountBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Dim Debit As Decimal, Credit As Decimal
        Try
            Debit = 0
            Credit = 0

            While dr.Read()
                With dr
                    If CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.DrawDown Then
                        Debit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.Replenishment Then
                        Credit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToPEMC Then
                        Credit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToSTL Then
                        Debit += CDec(.Item("AMOUNT"))
                    Else
                        Debit += 0
                        Credit += 0
                    End If
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankSettlementToPinFenFromPaymentBeginning"
    Public Function GeneralLedgerCashInBankSettlementToPinFenFromPaymentBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS amount, a.trans_type " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "a.trans_type = " & EnumFTFTransType.TransferPEMCAccount & " AND " & _
                                     "c.posted_type = '" & EnumPostedType.PEFT.ToString() & "' AND " & _
                                 "a.allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                                 "GROUP BY a.trans_type"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankSettlementToPinFenFromPaymentBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankSettlementToPinFenFromPaymentBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Dim Debit As Decimal, Credit As Decimal
        Try
            Debit = 0
            Credit = 0

            While dr.Read()
                With dr
                    If CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.DrawDown Then
                        Debit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.Replenishment Then
                        Credit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToPEMC Then
                        Credit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferMarketFeesToSTL Then
                        Debit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.TransferPEMCAccount Then
                        Credit += CDec(.Item("AMOUNT"))
                    Else
                        Debit += 0
                        Credit += 0
                    End If
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankSettlementCollection"
    Public Function GetGeneralLedgerCashInBankSettlementCollection(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.am_jv_no, a.or_no, b.am_jv_date, a.id_number, " & _
                                "c.full_name, a.collected_amount " & _
                                "FROM AM_COLLECTION a, AM_JV b, AM_PARTICIPANTS c " & _
                                "WHERE a.daily_batch_code = b.batch_code And a.id_number = c.id_number " & _
                                "AND a.status <> " & EnumCollectionStatus.Cancelled & " AND a.collection_date " & _
                                "BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') and a.or_no <> 0"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementCollection(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementCollection(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.OfficialReceipt
                    item.Description = "OR - Collection"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("OR_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("COLLECTED_AMOUNT"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankSettlementCollectionBeginning"
    Public Function GetGeneralLedgerCashInBankSettlementCollectionBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(a.collected_amount),0) AS amount " & _
                               "FROM AM_COLLECTION a, AM_JV b, AM_PARTICIPANTS c " & _
                               "WHERE a.daily_batch_code = b.batch_code And a.id_number = c.id_number " & _
                               "AND a.status <> " & EnumCollectionStatus.Cancelled & _
                               " AND a.collection_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') AND or_no <> 0"


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementCollectionBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementCollectionBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Try
            While dr.Read()
                With dr
                    result.Debit = CDec(.Item("AMOUNT"))
                    result.Credit = 0
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankSettlementPaymentEFT"
    Public Function GeneralLedgerCashInBankSettlementPaymentEFT(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT e.am_jv_no, a.reference_no, b.amount, f.am_jv_date, b.id_number, d.full_name " & _
                                "FROM AM_RFP a, AM_RFP_DETAILS b, AM_PAYMENT_NEW c, AM_PARTICIPANTS d, AM_PAYMENT_NEW_DETAILS e, AM_JV f " & _
                                "WHERE a.reference_no = b.reference_no And a.payment_no = c.payment_no And b.id_number = d.id_number " & _
                                "AND c.payment_no = e.payment_no AND e.am_jv_no = f.am_jv_no AND f.posted_type = '" & EnumPostedType.PEFT.ToString() & "' " & _
                                "AND b.rfp_payment_type = " & EnumParticipantPaymentType.EFT & " AND b.rfp_details_type = " & EnumRFPDetailsType.Payment & " " & _
                                "AND c.remittance_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY')"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankSettlementPaymentEFT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankSettlementPaymentEFT(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.RFP
                    item.Description = "Request For Payment thru EFT"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REFERENCE_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementPaymentEFTBeginning"
    Public Function GetGeneralLedgerCashInBankSettlementPaymentEFTBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS total_payment " & _
                                 "FROM AM_RFP a, AM_RFP_DETAILS b, AM_PAYMENT_NEW c, AM_PARTICIPANTS d, AM_PAYMENT_NEW_DETAILS e, AM_JV f " & _
                                 "WHERE a.reference_no = b.reference_no And a.payment_no = c.payment_no And b.id_number = d.id_number " & _
                                 "AND c.payment_no = e.payment_no AND e.am_jv_no = f.am_jv_no AND f.posted_type = '" & EnumPostedType.PEFT.ToString() & "' " & _
                                 "AND b.rfp_payment_type = " & EnumParticipantPaymentType.EFT & " AND b.rfp_details_type = " & EnumRFPDetailsType.Payment & " " & _
                                 "AND c.remittance_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY')"



            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementPaymentEFTBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementPaymentEFTBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Try
            While dr.Read()
                With dr
                    result.Debit = 0
                    result.Credit = CDec(.Item("TOTAL_PAYMENT"))
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementPaymentCheck"
    Public Function GeneralLedgerCashInBankSettlementPaymentCheck(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT b.am_jv_no, a.check_number, b.am_jv_date, a.amount, a.id_number, c.full_name " & _
                                "FROM AM_CHECKS a, AM_JV b, AM_PARTICIPANTS c, AM_PAYMENT_NEW_DETAILS d, AM_PAYMENT_NEW e " & _
                                "WHERE a.BATCH_CODE = b.BATCH_CODE And a.id_number = c.id_number And b.am_jv_no = d.am_jv_no " & _
                                "AND d.payment_no = e.payment_no AND check_number IS NOT NULL AND " & _
                                "e.remittance_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankSettlementPaymentCheck(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankSettlementPaymentCheck(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.CHECK
                    item.Description = "Request For Payment thru Check"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("CHECK_NUMBER"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementPaymentCheckBeginning"
    Public Function GeneralLedgerCashInBankSettlementPaymentCheckBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(a.amount),0) AS TOTAL_PAYMENT " & _
                                "FROM AM_CHECKS a, AM_JV b, AM_PARTICIPANTS c, AM_PAYMENT_NEW_DETAILS d, AM_PAYMENT_NEW e " & _
                                "WHERE a.BATCH_CODE = b.BATCH_CODE And a.id_number = c.id_number And b.am_jv_no = d.am_jv_no " & _
                                "AND d.payment_no = e.payment_no AND check_number IS NOT NULL AND " & _
                                "e.remittance_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankSettlementPaymentCheckBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankSettlementPaymentCheckBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Try
            While dr.Read()
                With dr
                    result.Debit = 0
                    result.Credit = CDec(.Item("TOTAL_PAYMENT"))
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementToPrudentialFromPRRefund"
    Public Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPRRefundDebit(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT c.am_jv_no, c.am_jv_date,  a.ref_no, b.id_number, f.full_name, b.amount " & _
                                "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS f " & _
                                "WHERE a.ref_no = b.ref_no And a.batch_code = c.batch_code " & _
                                "AND b.id_number = f.id_number AND  a.TRANS_TYPE = " & EnumFTFTransType.PRRefund & " " & _
                                "AND c.AM_JV_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToPrudentialFromPRRefundDebit(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPRRefundDebit(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.FTF
                    item.Description = "FTF- PR Refund From Payment (Debit)"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("AMOUNT"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Public Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPRRefundCredit(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT c.am_jv_no, c.am_jv_date, b.id_number, d.full_name, " & _
                                "b.AMOUNT_REFUND AS amount " & _
                                "FROM AM_PRUDENTIAL_REFUND_MAIN a, AM_PRUDENTIAL_REFUND_DETAILS b, AM_JV c, AM_PARTICIPANTS d, AM_PRUDENTIAL_REFUND_JV f " & _
                                "WHERE a.TRANS_NO =  b.TRANS_NO AND a.TRANS_NO = f.TRANS_NO AND f.jv_no = c.am_jv_no AND " & _
                                "b.id_number = d.id_number AND c.posted_type = '" & EnumPostedType.PRREFEFT.ToString() & "' " & _
                                "AND a.TRANS_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToPrudentialFromPRRefundCredit(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPRRefundCredit(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.JournalVoucher
                    item.Description = "JV - PR Refund (Credit)"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = 0
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementToPrudentialFromPayment"
    Public Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPayment(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT c.am_jv_no, c.am_jv_date,  a.ref_no, b.id_number, f.full_name, b.amount " & _
                                "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PAYMENT_NEW_DETAILS d, AM_PAYMENT_NEW e, AM_PARTICIPANTS f " & _
                                "WHERE a.ref_no = b.ref_no And a.batch_code = c.batch_code And c.am_jv_no = d.am_jv_no And d.payment_no = e.payment_no " & _
                                "AND b.id_number = f.id_number AND  TRANS_TYPE = " & EnumFTFTransType.Replenishment & " " & _
                                "AND e.remittance_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToPrudentialFromPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPayment(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE"))
                    item.TransactionType = BIRDocumentsType.FTF
                    item.Description = "FTF - PR Replenishment From Payment"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementToPrudentialFromPaymentBeginning"
    Public Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPaymentBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS  total_payment " & _
                                "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PAYMENT_NEW_DETAILS d, AM_PAYMENT_NEW e, AM_PARTICIPANTS f " & _
                                "WHERE a.ref_no = b.ref_no And a.batch_code = c.batch_code And c.am_jv_no = d.am_jv_no And d.payment_no = e.payment_no " & _
                                "AND b.id_number = f.id_number AND  TRANS_TYPE = " & EnumFTFTransType.Replenishment & " " & _
                                "AND e.remittance_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementToPrudentialFromPaymentBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementToPrudentialFromPaymentBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Try
            While dr.Read()
                With dr
                    result.Debit = 0
                    result.Credit = CDec(.Item("TOTAL_PAYMENT"))
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementBankReconBeginning"
    Public Function GetGeneralLedgerCashInBankSettlementBankReconBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT beginning_balance AS amount FROM AM_BANK_RECON_MAIN " & _
                                "WHERE transaction_type = " & EnumBankReconType.Settlement & " " & _
                                "AND status = " & EnumStatus.Active & " " & _
                                "AND transaction_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                                "ORDER BY transaction_date DESC"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementBankReconBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementBankReconBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Try
            While dr.Read()
                With dr
                    result.Debit = CDec(.Item("AMOUNT"))
                    result.Credit = 0
                End With

                Exit While
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementInterestEarned"
    Public Function GetGeneralLedgerCashInBankSettlementInterestEarned(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT am_jv_no, transaction_date, remarks,  int_earned " & _
                                "FROM AM_INTEREST_EARNED " & _
                                "WHERE transaction_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') AND int_status = " & EnumPostedTypeStatus.Posted

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementInterestEarned(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementInterestEarned(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim value As Decimal
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.TransactionType = BIRDocumentsType.JournalVoucher
                    item.Description = "Interest Earned"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("AM_JV_NO"))
                    item.ParticipantName = CStr(.Item("REMARKS").ToString())
                    value = CDec(.Item("INT_EARNED"))

                    If value > 0 Then
                        item.Debit = Math.Abs(value)
                        item.Credit = 0
                    Else
                        item.Debit = 0
                        item.Credit = Math.Abs(value)
                    End If
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankSettlementInterestEarnedBeginning"
    Public Function GetGeneralLedgerCashInBankSettlementInterestEarnedBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(int_earned),0) as amount FROM AM_INTEREST_EARNED " & _
                                "WHERE transaction_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankSettlementInterestEarnedBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankSettlementInterestEarnedBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Dim value As Decimal
        Try
            While dr.Read()
                With dr
                    value = CDec(.Item("AMOUNT"))

                    If value > 0 Then
                        result.Debit = Math.Abs(value)
                        result.Credit = 0
                    Else
                        result.Debit = 0
                        result.Credit = Math.Abs(value)
                    End If
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementDeferred"
    Public Function GeneralLedgerCashInBankSettlementDeferred(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.am_jv_no, a.allocation_date, c.credit " & _
                                "FROM AM_PAYMENT_NEW a, AM_PAYMENT_NEW_DETAILS b, AM_JV_DETAILS c " & _
                                "WHERE a.payment_no = b.payment_no And b.am_jv_no = c.am_jv_no " & _
                                "AND c.acct_code = '" & AMModule.DeferredPaymentCode & "'  AND c.credit <> 0 " & _
                                "AND a.allocation_date BETWEEN TO_DATE('" & StartDate & "','mm/dd/yyyy') " & _
                                "AND TO_DATE('" & EndDate & "','mm/dd/yyyy') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankSettlementDeferred(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankSettlementDeferred(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankSettlement)
        Dim result As New List(Of GeneralLedgerCashInBankSettlement)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankSettlement
                With dr
                    item.TransactionDate = CDate(.Item("ALLOCATION_DATE"))
                    item.TransactionType = BIRDocumentsType.JournalVoucher
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("AM_JV_NO"))
                    item.ParticipantName = "Deferred Amount"
                    item.Debit = CDec(.Item("CREDIT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankSettlementDeferredBeginning"
    Public Function GeneralLedgerCashInBankSettlementDeferredBeginning(TransactionDate As Date) As GeneralLedgerCashInBankSettlement
        Dim result As GeneralLedgerCashInBankSettlement
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT c.credit AS amount " & _
                                "FROM AM_PAYMENT_NEW a, AM_PAYMENT_NEW_DETAILS b, AM_JV_DETAILS c " & _
                                "WHERE a.payment_no = b.payment_no And b.am_jv_no = c.am_jv_no " & _
                                "AND c.acct_code = '" & AMModule.DeferredPaymentCode & "'  AND c.credit <> 0 " & _
                                "AND a.allocation_date <= TO_DATE('" & TransactionDate & "','mm/dd/yyyy') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankSettlementDeferredBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankSettlementDeferredBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankSettlement
        Dim result As New GeneralLedgerCashInBankSettlement
        Try
            While dr.Read()
                With dr
                    result.Debit = CDec(.Item("AMOUNT"))
                    result.Credit = 0
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankPrudentialFTF"
    Public Function GetGeneralLedgerCashInBankPrudentialFTF(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT c.am_jv_no, a.ref_no, a.allocation_date, b.id_number, " & _
                                "d.full_name,  b.amount, a.trans_type " & _
                                "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                                "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                "(a.trans_type = " & EnumFTFTransType.DrawDown & " OR " & _
                                "a.trans_type = " & EnumFTFTransType.Replenishment & ") AND " & _
                                "(c.posted_type = '" & EnumPostedType.C.ToString() & "' OR " & _
                                "c.posted_type = '" & EnumPostedType.PA.ToString() & "') " & _
                                "AND a.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialFTF(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialFTF(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("ALLOCATION_DATE"))
                    item.TransactionType = BIRDocumentsType.FTF
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))

                    If CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.DrawDown Then
                        item.Debit = 0
                        item.Credit = CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.Replenishment Then
                        item.Debit = CDec(.Item("AMOUNT"))
                        item.Credit = 0
                    Else
                        item.Debit = 0
                        item.Credit = 0
                    End If
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialFTFBeginning"
    Public Function GetGeneralLedgerCashInBankPrudentialFTFBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(total_amount),0) AS amount, trans_type " & _
                                "FROM AM_FTF_MAIN WHERE status = " & EnumStatus.Active & " AND " & _
                                "(trans_type = " & EnumFTFTransType.DrawDown & " OR " & _
                                "trans_type = " & EnumFTFTransType.Replenishment & ") AND " & _
                                "allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                                "GROUP BY trans_type"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialFTFBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialFTFBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim Debit As Decimal, Credit As Decimal
        Try
            Debit = 0
            Credit = 0

            While dr.Read()
                With dr
                    If CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.DrawDown Then
                        Credit += CDec(.Item("AMOUNT"))
                    ElseIf CInt(.Item("TRANS_TYPE")) = EnumFTFTransType.Replenishment Then
                        Debit += CDec(.Item("AMOUNT"))
                    Else
                        Debit += 0
                        Credit += 0
                    End If
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankPrudentialFromSettlementCollection"
    Public Function GetGeneralLedgerCashInBankPrudentialFromSettlementCollection(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT c.am_jv_no, a.ref_no, c.am_jv_date, b.id_number, " & _
                                "d.full_name,  b.amount, a.trans_type " & _
                                "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                                "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                "a.trans_type = " & EnumFTFTransType.Replenishment & " AND " & _
                                "c.posted_type = '" & EnumPostedType.C.ToString() & "' " & _
                                "AND a.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') AND c.status <> 0"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialFromSettlementCollection(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialFromSettlementCollection(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE")) 'CDate(.Item("ALLOCATION_DATE")) 'update by LAVV 07292019
                    item.TransactionType = BIRDocumentsType.FTF
                    item.Description = "PR Replenishment - Collection"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("AMOUNT"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankPrudentialFromSettlementCollectionBeginning"
    Public Function GetGeneralLedgerCashInBankPrudentialFromSettlementCollectionBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS total_amount " & _
                                "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                                "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                "a.trans_type = " & EnumFTFTransType.Replenishment & " AND " & _
                                "c.posted_type = '" & EnumPostedType.C.ToString() & "' " & _
                                "AND a.allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialFromSettlementCollectionBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialFromSettlementCollectionBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Try
            While dr.Read()

                With dr
                    result.Debit = CDec(.Item("TOTAL_AMOUNT"))
                    result.Credit = 0
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankPrudentialToSettlementFromCollection"
    Public Function GetGeneralLedgerCashInBankPrudentialToSettlementFromCollection(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT c.am_jv_no, a.ref_no, c.am_jv_date, b.id_number, " & _
                                       "d.full_name,  b.amount, a.trans_type " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "a.trans_type = " & EnumFTFTransType.DrawDown & " AND " & _
                                     "c.posted_type = '" & EnumPostedType.C.ToString() & "' AND " & _
                               "a.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                               "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') AND c.status <> 0"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialToSettlementFromCollection(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialToSettlementFromCollection(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE")) 'CDate(.Item("ALLOCATION_DATE")) 'update by LAVV 07292019
                    item.TransactionType = BIRDocumentsType.FTF
                    item.Description = "PR Draw Down - Collection"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("REF_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankPrudentialToSettlementFromCollectionBeginning"
    Public Function GetGeneralLedgerCashInBankPrudentialToSettlementFromCollectionBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(b.amount),0) AS total_amount " & _
                               "FROM AM_FTF_MAIN a, AM_FTF_PARTICIPANT b, AM_JV c, AM_PARTICIPANTS d " & _
                               "WHERE a.ref_no = b.ref_no AND a.batch_code = c.batch_code AND " & _
                                     "b.id_number = d.id_number AND a.status = " & EnumStatus.Active & " AND " & _
                                     "a.trans_type = " & EnumFTFTransType.DrawDown & " AND " & _
                                     "c.posted_type = '" & EnumPostedType.C.ToString() & "' AND " & _
                               "a.allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialToSettlementFromCollectionBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialToSettlementFromCollectionBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Try
            While dr.Read()
                With dr
                    result.Debit = 0
                    result.Credit = CDec(.Item("TOTAL_AMOUNT"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialOR"
    Public Function GetGeneralLedgerCashInBankPrudentialOR(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.am_jv_no, b.am_jv_date, a.or_no, a.id_number, c.full_name, a.or_amount " & _
                                "FROM AM_OFFICIAL_RECEIPT_MAIN a, AM_JV b, AM_PARTICIPANTS c " & _
                                "WHERE a.batch_code = b.batch_code And a.id_number = c.id_number " & _
                                "AND a.status = " & EnumStatus.Active & " AND a.trans_type = " & EnumORTransactionType.Replenishment & " " & _
                                "AND a.or_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialOR(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialOR(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE")) 'CDate(.Item("OR_DATE")) 'update by LAVV 07292019
                    item.TransactionType = BIRDocumentsType.OfficialReceipt
                    item.Description = "PR Replenishment - Collection"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("OR_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("OR_AMOUNT"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialORBeginning"
    Public Function GeneralLedgerCashInBankPrudentialORBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(a.or_amount),0) AS TOTAL_AMOUNT " & _
                                "FROM AM_OFFICIAL_RECEIPT_MAIN a, AM_JV b, AM_PARTICIPANTS c " & _
                                "WHERE a.batch_code = b.batch_code And a.id_number = c.id_number " & _
                                "AND a.status = " & EnumStatus.Active & " AND a.trans_type = " & EnumORTransactionType.Replenishment & " " & _
                                "AND a.or_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankPrudentialORBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankPrudentialORBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    result.Debit = CDec(.Item("TOTAL_AMOUNT"))
                    result.Credit = 0
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashINBankPrudentialFromPRRefund"
    Public Function GetGeneralLedgerCashINBankPrudentialFromPRRefund(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT c.am_jv_no, c.am_jv_date, b.id_number, d.full_name, " & _
                                "b.AMOUNT_REFUND AS total_payment " & _
                                "FROM AM_PRUDENTIAL_REFUND_MAIN a, AM_PRUDENTIAL_REFUND_DETAILS b, AM_JV c, AM_PARTICIPANTS d, AM_PRUDENTIAL_REFUND_JV e " & _
                                "WHERE a.TRANS_NO =  b.TRANS_NO AND a.TRANS_NO = e.TRANS_NO AND e.jv_no = c.am_jv_no AND " & _
                                "b.id_number = d.id_number AND c.posted_type = '" & EnumPostedType.PRREFFTF.ToString() & "' " & _
                                "AND a.TRANS_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashINBankPrudentialFromPRRefund(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashINBankPrudentialFromPRRefund(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE")) 'CDate(.Item("ALLOCATION_DATE")) 'update by LAVV 07292019
                    item.TransactionType = BIRDocumentsType.JournalVoucher
                    item.Description = "PR Refund"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = 0
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = 0
                    item.Credit = CDec(.Item("TOTAL_PAYMENT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerCashInBankPrudentialFromPayment"
    Public Function GetGeneralLedgerCashInBankPrudentialFromPayment(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT b.am_jv_no, c.am_jv_date, a.id_number, d.full_name, " & _
                                "a.transfer_to_pr AS total_payment " & _
                                "FROM am_payment_new_transfer_to_pr a, AM_PAYMENT_NEW_DETAILS b, AM_JV c, AM_PARTICIPANTS d, AM_PAYMENT_NEW e " & _
                                "WHERE a.payment_no =  b.payment_no AND b.am_jv_no = c.am_jv_no AND " & _
                                "a.id_number = d.id_number AND c.posted_type = '" & EnumPostedType.PEFT.ToString() & "' " & _
                                "AND e.payment_no = a.payment_no AND a.transfer_to_pr > 0 " & _
                                "AND e.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialFromPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialFromPayment(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("AM_JV_DATE")) 'CDate(.Item("ALLOCATION_DATE")) 'update by LAVV 07292019
                    item.TransactionType = BIRDocumentsType.JournalVoucher
                    item.Description = "PR Replenishment - Payment"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = 0
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("TOTAL_PAYMENT"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GetGeneralLedgerCashInBankPrudentialFromPaymentBeginning"
    Public Function GetGeneralLedgerCashInBankPrudentialFromPaymentBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT NVL(SUM(a.transfer_to_pr),0) AS total_payment " & _
                                "FROM am_payment_new_transfer_to_pr a, AM_PAYMENT_NEW_DETAILS b, AM_JV c, AM_PARTICIPANTS d, AM_PAYMENT_NEW e " & _
                                "WHERE a.payment_no =  b.payment_no AND b.am_jv_no = c.am_jv_no AND " & _
                                "a.id_number = d.id_number AND c.posted_type = '" & EnumPostedType.PEFT.ToString() & "' " & _
                                "AND e.payment_no = a.payment_no AND a.transfer_to_pr > 0 " & _
                                "AND e.allocation_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialFromPaymentBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialFromPaymentBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Try
            While dr.Read()
                With dr
                    result.Debit = CDec(.Item("TOTAL_PAYMENT"))
                    result.Credit = 0
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankPrudentialDMCM"
    Public Function GetGeneralLedgerCashInBankPrudentialDMCM(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.am_jv_no, a.am_dmcm_no, a.id_number, b.full_name, a.total_amount_due, " & _
                                "TO_CHAR(a.updated_date,'MM/DD/YYYY') AS transaction_date " & _
                                "FROM AM_DMCM a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number And a.status = " & EnumStatus.Active & " " & _
                                "AND a.trans_type = " & EnumDMCMTransactionType.PrudentialInterest & " " & _
                                "AND TO_DATE(TO_CHAR(a.updated_date,'MM/DD/YYYY'),'MM/DD/YYYY') " & _
                                "BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialDMCM(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialDMCM(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.TransactionType = BIRDocumentsType.DMCM
                    item.Description = "PR Interest"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("AM_DMCM_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("TOTAL_AMOUNT_DUE"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialDMCMBeginning"
    Public Function GetGeneralLedgerCashInBankPrudentialDMCMBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(total_amount_due),0) AS total_amount_due " & _
                                 "FROM AM_DMCM WHERE status = " & EnumStatus.Active & " " & _
                                 "AND trans_type = " & EnumDMCMTransactionType.PrudentialInterest & " " & _
                                 "AND TO_DATE(TO_CHAR(updated_date,'MM/DD/YYYY'),'MM/DD/YYYY') " & _
                                 "<= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialDMCMBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialDMCMBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim Debit As Decimal, Credit As Decimal
        Try
            Debit = 0
            Credit = 0

            While dr.Read()
                With dr
                    Debit += CDec(.Item("TOTAL_AMOUNT_DUE"))
                    Credit += 0
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialBankReconBeginning"
    Public Function GetGeneralLedgerCashInBankPrudentialBankReconBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT beginning_balance AS amount FROM AM_BANK_RECON_MAIN " & _
                                "WHERE transaction_type = " & EnumBankReconType.Prudential & " " & _
                                "AND status = " & EnumStatus.Active & " " & _
                                "AND transaction_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') " & _
                                "ORDER BY transaction_date DESC"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialBankReconBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialBankReconBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Try
            While dr.Read()
                With dr
                    result.Debit = CDec(.Item("AMOUNT"))
                    result.Credit = 0
                End With

                Exit While
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerInterestPayablePrudentialInterest"
    Public Function GetGeneralLedgerInterestPayablePrudentialInterest(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerInterestPayablePrudential)
        Dim result As New List(Of GeneralLedgerInterestPayablePrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.am_jv_no, a.am_dmcm_no, a.trans_date, a.id_number, " & _
                                "c.full_name,  a.amount, a.trans_type " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_JV b, AM_PARTICIPANTS c " & _
                                "WHERE a.batch_code = b.batch_code AND " & _
                                "a.id_number = c.id_number AND a.trans_type = " & EnumPrudentialTransType.InterestAmount & " " & _
                                "AND a.trans_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayablePrudentialInterest(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayablePrudentialInterest(ByVal dr As IDataReader) As List(Of GeneralLedgerInterestPayablePrudential)
        Dim result As New List(Of GeneralLedgerInterestPayablePrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerInterestPayablePrudential
                With dr
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.TransactionType = BIRDocumentsType.DMCM
                    item.Description = "PR Interest Added"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("AM_DMCM_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Credit = CDec(.Item("AMOUNT"))
                    item.Debit = 0

                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerInterestPayableBeginPrudentialInterest"
    Public Function GetGeneralLedgerInterestPayableBeginPrudentialInterest(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerInterestPayablePrudential)
        Dim result As New List(Of GeneralLedgerInterestPayablePrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.trans_date, a.id_number, b.full_name, a.amount, a.trans_type " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.trans_type = " & EnumPrudentialTransType.PRIntBegginingBalance & " " & _
                                "AND a.trans_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayableBeginPrudentialInterest(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayableBeginPrudentialInterest(ByVal dr As IDataReader) As List(Of GeneralLedgerInterestPayablePrudential)
        Dim result As New List(Of GeneralLedgerInterestPayablePrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerInterestPayablePrudential
                With dr
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.Description = "Beginning Balance of PR Interest"
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Credit = CDec(.Item("AMOUNT"))
                    item.Debit = 0

                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerInterestPayablePrudentialTransferInterest"
    Public Function GetGeneralLedgerInterestPayablePrudentialTransferInterest(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerInterestPayablePrudential)
        Dim result As New List(Of GeneralLedgerInterestPayablePrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.am_jv_no, a.trans_date, a.id_number, " & _
                                "c.full_name,  a.amount, a.trans_type " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_JV b, AM_PARTICIPANTS c " & _
                                "WHERE a.batch_code = b.batch_code AND " & _
                                "a.id_number = c.id_number AND a.trans_type = " & EnumPrudentialTransType.TransferInterestAmount & " " & _
                                "AND a.trans_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayablePrudentialTransferInterest(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayablePrudentialTransferInterest(ByVal dr As IDataReader) As List(Of GeneralLedgerInterestPayablePrudential)
        Dim result As New List(Of GeneralLedgerInterestPayablePrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerInterestPayablePrudential
                With dr
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.TransactionType = BIRDocumentsType.JournalVoucher
                    item.Description = "Transfer of PR Interest"
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.ReferenceNumber = CLng(.Item("AM_JV_NO"))
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Credit = 0
                    item.Debit = CDec(.Item("AMOUNT"))

                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerInterestPayablePrudentialInterestBeginning"
    Public Function GetGeneralLedgerInterestPayablePrudentialInterestBeginning(TransactionDate As Date) As GeneralLedgerInterestPayablePrudential
        Dim result As GeneralLedgerInterestPayablePrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(amount),0) AS amount FROM AM_PRUDENTIAL_HISTORY " & _
                                "WHERE trans_type = " & EnumPrudentialTransType.InterestAmount & " " & _
                                "AND batch_code IS NOT NULL AND trans_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayablePrudentialInterestBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayablePrudentialInterestBeginning(ByVal dr As IDataReader) As GeneralLedgerInterestPayablePrudential
        Dim result As New GeneralLedgerInterestPayablePrudential
        Dim Debit As Decimal, Credit As Decimal
        Try

            While dr.Read()
                With dr
                    Debit = 0
                    Credit = CDec(.Item("AMOUNT"))
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GetGeneralLedgerInterestPayableBeginPrudentialInterestBeginning"
    Public Function GetGeneralLedgerInterestPayableBeginPrudentialInterestBeginning(TransactionDate As Date) As GeneralLedgerInterestPayablePrudential
        Dim result As GeneralLedgerInterestPayablePrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(amount),0) AS amount FROM AM_PRUDENTIAL_HISTORY " & _
                                "WHERE trans_type = " & EnumPrudentialTransType.PRIntBegginingBalance & " " & _
                                "AND trans_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayableBeginPrudentialInterestBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayableBeginPrudentialInterestBeginning(ByVal dr As IDataReader) As GeneralLedgerInterestPayablePrudential
        Dim result As New GeneralLedgerInterestPayablePrudential
        Dim Debit As Decimal, Credit As Decimal
        Try

            While dr.Read()
                With dr
                    Debit = 0
                    Credit = CDec(.Item("AMOUNT"))
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerInterestPayablePrudentialTransferInterestBeginning"
    Public Function GetGeneralLedgerInterestPayablePrudentialTransferInterestBeginning(TransactionDate As Date) As GeneralLedgerInterestPayablePrudential
        Dim result As GeneralLedgerInterestPayablePrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(amount),0) AS amount FROM AM_PRUDENTIAL_HISTORY " & _
                                "WHERE trans_type = " & EnumPrudentialTransType.TransferInterestAmount & " " & _
                                "AND batch_code IS NOT NULL AND trans_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayablePrudentialTransferInterestBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayablePrudentialTransferInterestBeginning(ByVal dr As IDataReader) As GeneralLedgerInterestPayablePrudential
        Dim result As New GeneralLedgerInterestPayablePrudential
        Dim Debit As Decimal, Credit As Decimal
        Try
            While dr.Read()
                With dr
                    Debit = CDec(.Item("AMOUNT"))
                    Credit = 0
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerInterestPayableSettlement"
    Public Function GetGeneralLedgerInterestPayableSettlement(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerInterestPayableSettlement)
        Dim result As New List(Of GeneralLedgerInterestPayableSettlement)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT am_jv_no, transaction_date, remarks,  int_earned " & _
                                "FROM AM_INTEREST_EARNED " & _
                                "WHERE transaction_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') AND int_status = " & EnumPostedTypeStatus.Posted

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayableSettlement(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayableSettlement(ByVal dr As IDataReader) As List(Of GeneralLedgerInterestPayableSettlement)
        Dim result As New List(Of GeneralLedgerInterestPayableSettlement)
        Dim value As Decimal
        Try
            While dr.Read()
                Dim item As New GeneralLedgerInterestPayableSettlement
                With dr
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.Description = CStr(.Item("REMARKS").ToString())
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))

                    value = CDec(.Item("INT_EARNED"))

                    If value > 0 Then
                        item.Debit = 0
                        item.Credit = Math.Abs(value)
                    Else
                        item.Debit = Math.Abs(value)
                        item.Credit = 0
                    End If
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerInterestPayableSettlementBeginning"
    Public Function GetGeneralLedgerInterestPayableSettlementBeginning(TransactionDate As Date) As GeneralLedgerInterestPayableSettlement
        Dim result As GeneralLedgerInterestPayableSettlement
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(int_earned * -1),0) as amount FROM AM_INTEREST_EARNED " & _
                                "WHERE transaction_date <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerInterestPayableSettlementBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerInterestPayableSettlementBeginning(ByVal dr As IDataReader) As GeneralLedgerInterestPayableSettlement
        Dim result As New GeneralLedgerInterestPayableSettlement
        Try
            While dr.Read()
                With dr
                    result.Debit = Math.Abs(CDec(.Item("AMOUNT")))
                    result.Credit = 0
                End With

            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get GeneralLedgerCashInBankPrudentialBeginningTransaction"
    Public Function GeneralLedgerCashInBankPrudentialBeginningTransaction(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.id_number, b.full_name, a.amount, a.trans_date, a.trans_type " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.trans_type = " & EnumPrudentialTransType.PRBeginningBalance & " " & _
                                "AND a.trans_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankPrudentialBeginningTransaction(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankPrudentialBeginningTransaction(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))                    
                    item.Description = "PR Amount"
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("AMOUNT"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialInterestBeginningTransaction"
    Public Function GeneralLedgerCashInBankPrudentialInterestBeginningTransaction(StartDate As Date, EndDate As Date) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.id_number, b.full_name, a.amount, a.trans_date " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.trans_type = " & EnumPrudentialTransType.PRIntBegginingBalance & " " & _
                                "AND a.trans_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankPrudentialInterestBeginningTransaction(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankPrudentialInterestBeginningTransaction(ByVal dr As IDataReader) As List(Of GeneralLedgerCashInBankPrudential)
        Dim result As New List(Of GeneralLedgerCashInBankPrudential)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerCashInBankPrudential
                With dr
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.Description = "PR Interest Amount"
                    item.ParticipantName = CStr(.Item("FULL_NAME"))
                    item.Debit = CDec(.Item("AMOUNT"))
                    item.Credit = 0
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialBeginning"
    Public Function GetGeneralLedgerCashInBankPrudentialBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(amount),0) AS total_amount_due " & _
                                 "FROM AM_PRUDENTIAL_HISTORY WHERE (trans_type = " & EnumPrudentialTransType.PRBeginningBalance & _
                                 " OR trans_type =  " & EnumPrudentialTransType.PRIntBegginingBalance & " )" & _
                                 "AND TRANS_DATE <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerCashInBankPrudentialBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerCashInBankPrudentialBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim Debit As Decimal, Credit As Decimal
        Try
            Debit = 0
            Credit = 0

            While dr.Read()
                With dr
                    Debit += CDec(.Item("TOTAL_AMOUNT_DUE"))
                    Credit += 0
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerCashInBankPrudentialInterestBeginning"
    Public Function GeneralLedgerCashInBankPrudentialInterestBeginning(TransactionDate As Date) As GeneralLedgerCashInBankPrudential
        Dim result As GeneralLedgerCashInBankPrudential
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT NVL(SUM(amount),0) AS total_amount_due " & _
                                 "FROM AM_PRUDENTIAL_HISTORY WHERE trans_type = " & EnumPrudentialTransType.PRIntBegginingBalance & " " & _
                                 "AND TRANS_DATE <= TO_DATE('" & TransactionDate & "','MM/DD/YYYY') "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerCashInBankPrudentialInterestBeginning(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerCashInBankPrudentialInterestBeginning(ByVal dr As IDataReader) As GeneralLedgerCashInBankPrudential
        Dim result As New GeneralLedgerCashInBankPrudential
        Dim Debit As Decimal, Credit As Decimal
        Try
            Debit = 0
            Credit = 0

            While dr.Read()
                With dr
                    Debit += CDec(.Item("TOTAL_AMOUNT_DUE"))
                    Credit += 0
                End With
            End While

            result.Debit = Debit
            result.Credit = Credit

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerPrudentialPerParticipant"
    Public Function GetGeneralLedgerPrudentialPerParticipant(StartDate As Date, EndDate As Date, IDNumber As String) As List(Of GeneralLedgerPrudentialPerParticipant)
        Dim result As New List(Of GeneralLedgerPrudentialPerParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.trans_date, a.id_number, a.or_no, a.am_dmcm_no, a.amount, " & _
                                "a.trans_type, b.am_jv_no, c.full_name " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_JV b, AM_PARTICIPANTS c " & _
                                "WHERE a.batch_code = b.batch_code AND a.id_number = c.id_number " & _
                                "AND a.trans_type IN (" & EnumPrudentialTransType.Drawdown & "," & EnumPrudentialTransType.Replenishment & _
                                "," & EnumPrudentialTransType.TransferInterestAmount & ", " & EnumPrudentialTransType.PRRefund & ") AND a.id_number = '" & IDNumber & "' AND " & _
                                "TRUNC(a.trans_date) BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY')"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetGeneralLedgerPrudentialPerParticipant(report.ReturnedIDatareader, EndDate)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetGeneralLedgerPrudentialPerParticipant(ByVal dr As IDataReader, EndDate As Date) As List(Of GeneralLedgerPrudentialPerParticipant)
        Dim result As New List(Of GeneralLedgerPrudentialPerParticipant)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerPrudentialPerParticipant
                With dr
                    item.CurrentDate = EndDate
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.JournalNumber = CLng(.Item("AM_JV_NO"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), "", CStr(.Item("FULL_NAME")))

                    If CLng(.Item("OR_NO")) <> 0 Then
                        item.TransactionType = BIRDocumentsType.OfficialReceipt
                        item.ReferenceNumber = CLng(.Item("OR_NO"))

                    ElseIf CLng(.Item("AM_DMCM_NO")) <> 0 Then
                        item.TransactionType = BIRDocumentsType.DMCM
                        item.ReferenceNumber = CLng(.Item("AM_DMCM_NO"))
                    Else
                        item.TransactionType = BIRDocumentsType.JournalVoucher
                        item.ReferenceNumber = CLng(.Item("AM_JV_NO"))
                    End If

                    Dim transType As EnumPrudentialTransType = CType(CStr(System.Enum.Parse(GetType(EnumPrudentialTransType), CStr(.Item("TRANS_TYPE")))), EnumPrudentialTransType)

                    Select Case transType
                        Case EnumPrudentialTransType.Drawdown
                            item.Amount = CDec(.Item("AMOUNT")) * -1D
                        Case EnumPrudentialTransType.Replenishment
                            item.Amount = CDec(.Item("AMOUNT"))
                        Case EnumPrudentialTransType.TransferInterestAmount
                            item.Amount = CDec(.Item("AMOUNT"))
                        Case EnumPrudentialTransType.PRRefund
                            item.Amount = CDec(.Item("AMOUNT")) * -1D
                    End Select

                    item.PRTransType = CType(CStr(System.Enum.Parse(GetType(EnumPrudentialTransType), CStr(.Item("TRANS_TYPE")))), EnumPrudentialTransType)
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get GeneralLedgerPrudentialPerParticipantBeginning"
    Public Function GeneralLedgerPrudentialPerParticipantBeginning(StartDate As Date, EndDate As Date, IDNumber As String) As List(Of GeneralLedgerPrudentialPerParticipant)
        Dim result As New List(Of GeneralLedgerPrudentialPerParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.trans_date, a.id_number, a.amount, a.trans_type, b.full_name " & _
                                "FROM AM_PRUDENTIAL_HISTORY a, AM_PARTICIPANTS b " & _
                                "WHERE a.id_number = b.id_number AND a.trans_type IN (" & EnumPrudentialTransType.PRBeginningBalance & ") " & _
                                "AND a.id_number = '" & IDNumber & "' AND " & _
                                "TRUNC(a.trans_date) BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY')"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GeneralLedgerPrudentialPerParticipantBeginning(report.ReturnedIDatareader, EndDate)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GeneralLedgerPrudentialPerParticipantBeginning(ByVal dr As IDataReader, EndDate As Date) As List(Of GeneralLedgerPrudentialPerParticipant)
        Dim result As New List(Of GeneralLedgerPrudentialPerParticipant)
        Try
            While dr.Read()
                Dim item As New GeneralLedgerPrudentialPerParticipant
                With dr
                    item.CurrentDate = EndDate
                    item.TransactionDate = CDate(.Item("TRANS_DATE"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), "", CStr(.Item("FULL_NAME")))
                    item.PRTransType = CType(CStr(System.Enum.Parse(GetType(EnumPrudentialTransType), CStr(.Item("TRANS_TYPE")))), EnumPrudentialTransType)
                    item.Amount = CDec(.Item("AMOUNT"))
                End With

                result.Add(item)
                result.TrimExcess()
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get DeferredPayment"
    Public Function GetCurrentDeferredPayementMain(AllocationDate As Date) As List(Of DeferredMain)
        Dim ret As New List(Of DeferredMain)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_DEFERRED_PAYMENT_MAIN WHERE ALLOCATION_DATE = TO_DATE('" & AllocationDate & "', 'MM/dd/yyyy')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetDeferredPaymentMain(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetPrevDeferredPayementMain(PaymentNo As Long) As List(Of DeferredMain)
        Dim ret As New List(Of DeferredMain)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_DEFERRED_PAYMENT_MAIN WHERE PAYMENT_NO = '" & PaymentNo & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetDeferredPaymentMain(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetDeferredPaymentMain(ByVal dr As IDataReader) As List(Of DeferredMain)
        Dim result As New List(Of DeferredMain)
        Try
            While dr.Read()
                With dr
                    Using Item As New DeferredMain
                        Item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                        Item.DeferredPaymentNo = CLng(.Item("DEFERRED_PAYMENT_NO"))
                        Item.IDNumber = CStr(.Item("ID_NUMBER"))
                        Item.OutstandingBalanceDeferredPayment = CDec(.Item("OUTSTANDING_DEFERRED_PAYMENT"))
                        Item.PaymentNo = CLng(.Item("PAYMENT_NO"))
                        Item.DeferredAmount = CDec(.Item("DEFERRED_AMOUNT"))
                        Item.DeferredType = CType(CInt(.Item("DEFERRED_TYPE")), EnumDeferredType)
                        Item.ChargeType = CType([Enum].Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                        'Item.OriginalDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                        result.Add(Item)
                    End Using
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetDeferredPaymentMain(AllocationDate As String) As DataTable
        Dim dtReport As New DataTable
        'Kevin 10/10/2015
        Try          
            Dim SQL As String = "SELECT T.ALLOCATION_DATE AS ALLOCATE_DATE,AP.ID_NUMBER AS MPID,AP.FULL_NAME AS MP_NAME,DECODE(T.REMIT_ENERGY, NULL, 0, T.REMIT_ENERGY) as REMIT_ENERGY,DECODE(T.REMIT_VAT, NULL, 0, T.REMIT_VAT) as REMIT_VAT,DECODE(T.REMIT_ENERGY + T.REMIT_VAT, NULL, 0, T.REMIT_ENERGY + T.REMIT_VAT) as REMIT_TOTAL,DECODE(T.DEFERRAL_ENERGY, NULL, 0, T.DEFERRAL_ENERGY) as DEFERRAL_ENERGY,DECODE(T.DEFERRAL_VAT, NULL, 0, T.DEFERRAL_VAT) as DEFERRAL_VAT,DECODE(T.DEFERRAL_ENERGY + T.DEFERRAL_VAT, NULL, 0, T.DEFERRAL_ENERGY + T.DEFERRAL_VAT) as DEFERRAL_TOTAL,DECODE(T.NEW_OB_ENERGY, NULL, 0, T.NEW_OB_ENERGY) as NEW_OB_ENERGY,DECODE(T.NEW_OB_VAT, NULL, 0, T.NEW_OB_VAT) as NEW_OB_VAT,DECODE(T.NEW_OB_ENERGY + T.NEW_OB_VAT, NULL, 0, T.NEW_OB_ENERGY + T.NEW_OB_VAT) as NEW_OB_TOTAL,DECODE(T.OLD_OB_ENERGY, NULL, 0, T.OLD_OB_ENERGY) as OLD_OB_ENERGY,DECODE(T.OLD_OB_VAT, NULL, 0, OLD_OB_VAT) as OLD_OB_VAT,DECODE(T.OLD_OB_ENERGY + T.OLD_OB_VAT, NULL, 0, T.OLD_OB_ENERGY + T.OLD_OB_VAT) as OLD_OB_TOTAL FROM (" & _
                                "SELECT ALLOCATION_DATE,ID_NUMBER,sum(remitE) as REMIT_ENERGY,sum(remitEV) as REMIT_VAT,sum(deferredE) as DEFERRAL_ENERGY,sum(deferredEV) as DEFERRAL_VAT,sum(newObE) as NEW_OB_ENERGY,sum(newObEv) as NEW_OB_VAT,sum(oldObE) as OLD_OB_ENERGY,sum(oldObEV) as OLD_OB_VAT FROM (" & _
                                "SELECT ALLOCATION_DATE,ID_NUMBER,DEFERRED_AMOUNT AS remitE,0 as remitEV,0 as deferredE,0 as deferredEV,0 as newObE,0 as newObEV,0 as oldObE,0 as oldObEV from AM_DEFERRED_PAYMENT_MAIN WHERE CHARGE_TYPE = 'E' and DEFERRED_TYPE = 2 AND TO_DATE(TO_CHAR(ALLOCATION_DATE,'MM/DD/YYYY'),'MM/DD/YYYY') = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') UNION ALL " & _
                                "SELECT ALLOCATION_DATE,ID_NUMBER,0 AS remitE,DEFERRED_AMOUNT as remitEV,0 as deferredE,0 as deferredEV,0 as newObE,0 as newObEV,0 as oldObE,0 as oldObEV from AM_DEFERRED_PAYMENT_MAIN WHERE CHARGE_TYPE = 'EV' and DEFERRED_TYPE = 2 AND TO_DATE(TO_CHAR(ALLOCATION_DATE,'MM/DD/YYYY'),'MM/DD/YYYY') = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') UNION ALL " & _
                                "SELECT ALLOCATION_DATE,ID_NUMBER,0 AS remitE,0 as remitEV,DEFERRED_AMOUNT as deferredE,0 as deferredEV,0 as newObE,0 as newObEV,0 as oldObE,0 as oldObEV from AM_DEFERRED_PAYMENT_MAIN WHERE CHARGE_TYPE = 'E' and DEFERRED_TYPE = 1 AND TO_DATE(TO_CHAR(ALLOCATION_DATE,'MM/DD/YYYY'),'MM/DD/YYYY') = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') UNION ALL " & _
                                "SELECT ALLOCATION_DATE,ID_NUMBER,0 AS remitE,0 as remitEV,0 as deferredE,DEFERRED_AMOUNT as deferredEV,0 as newObE,0 as newObEV,0 as oldObE,0 as oldObEV from AM_DEFERRED_PAYMENT_MAIN WHERE CHARGE_TYPE = 'EV' and DEFERRED_TYPE = 1 AND TO_DATE(TO_CHAR(ALLOCATION_DATE,'MM/DD/YYYY'),'MM/DD/YYYY') = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') UNION ALL " & _
                                "SELECT ALLOCATION_DATE,ID_NUMBER,0 AS remitE,0 as remitEV,0 as deferredE,0 as deferredEV,OUTSTANDING_DEFERRED_PAYMENT as newObE,0 as newObEV,(SELECT SUM(OUTSTANDING_DEFERRED_PAYMENT) FROM AM_DEFERRED_PAYMENT_MAIN where PAYMENT_NO = ADPM.PAYMENT_NO - 1 AND ID_NUMBER = ADPM.ID_NUMBER AND CHARGE_TYPE = ADPM.CHARGE_TYPE) as oldObE,0 as oldObEV from AM_DEFERRED_PAYMENT_MAIN ADPM WHERE CHARGE_TYPE = 'E' AND TO_DATE(TO_CHAR(ALLOCATION_DATE,'MM/DD/YYYY'),'MM/DD/YYYY') = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') UNION ALL " & _
                                "SELECT ALLOCATION_DATE,ID_NUMBER,0 AS remitE,0 as remitEV,0 as deferredE,0 as deferredEV,0 as newObE,OUTSTANDING_DEFERRED_PAYMENT as newObEV,0 as oldObE,(SELECT SUM(OUTSTANDING_DEFERRED_PAYMENT) FROM AM_DEFERRED_PAYMENT_MAIN where PAYMENT_NO = ADPM.PAYMENT_NO - 1 AND ID_NUMBER = ADPM.ID_NUMBER AND CHARGE_TYPE = ADPM.CHARGE_TYPE) as oldObEV from AM_DEFERRED_PAYMENT_MAIN ADPM WHERE CHARGE_TYPE = 'EV' AND TO_DATE(TO_CHAR(ALLOCATION_DATE,'MM/DD/YYYY'),'MM/DD/YYYY') = TO_DATE('" & AllocationDate & "','MM/DD/YYYY') " & _
                                ")  GROUP BY ALLOCATION_DATE,ID_NUMBER ORDER BY ALLOCATION_DATE) T RIGHT JOIN AM_PARTICIPANTS AP ON T.ID_NUMBER = AP.ID_NUMBER ORDER BY T.ALLOCATION_DATE,AP.PARTICIPANT_ID"

            dtReport = Me.DataAccess.ExecuteSelectQueryReturningTable(SQL).ReturnedTable

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return dtReport
    End Function

    Public Function GetDeferredPayment(AllocationDate As Date) As Dictionary(Of String, DeferredMonitoring)
        Dim result As New Dictionary(Of String, DeferredMonitoring)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT b.collection_allocation_date, a.id_number, c.participant_id, c.full_name, " & _
                                "a.deferred_energy, a.deferred_vat " & _
                                "FROM AM_PAYMENT_DETAILS_PARTICIPANT a, AM_PAYMENT b, AM_PARTICIPANTS c " & _
                                "WHERE a.payment_perbp_no = b.payment_perbp_no And a.id_number = c.id_number " & _
                                "AND TO_DATE(TO_CHAR(b.collection_allocation_date,'MM/DD/YYYY'),'MM/DD/YYYY') = " & _
                                "TO_DATE('" & AllocationDate & "','MM/DD/YYYY') AND " & _
                                "(a.deferred_energy > 0 OR a.deferred_vat > 0)"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDeferredPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDeferredPayment(ByVal dr As IDataReader) As Dictionary(Of String, DeferredMonitoring)
        Dim result As New Dictionary(Of String, DeferredMonitoring)
        Try
            While dr.Read()
                With dr
                    Dim item As New DeferredMonitoring

                    item.TransactionDate = CDate(.Item("COLLECTION_ALLOCATION_DATE"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")), CStr(.Item("FULL_NAME")))
                    item.Energy = CDec(.Item("DEFERRED_ENERGY"))
                    item.VAT = CDec(.Item("DEFERRED_VAT"))

                    If Not result.ContainsKey(CStr(.Item("ID_NUMBER"))) Then
                        result.Add(CStr(.Item("ID_NUMBER")), item)
                    End If
                End With
            End While

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get DeferredPaymentAllocationDate"
    Public Function GetDeferredPaymentAllocationDate() As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT TO_DATE(TO_CHAR(collection_allocation_date,'MM/DD/YYYY'),'MM/DD/YYYY') AS collection_allocation_date " & _
                                "FROM AM_PAYMENT ORDER BY collection_allocation_date DESC"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDeferredPaymentAllocationDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function



    Private Function GetDeferredPaymentAllocationDate(ByVal dr As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)
        Try
            While dr.Read()
                With dr
                    result.Add(CDate(.Item("collection_allocation_date")))
                End With

            End While

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get DeferredPaymentTransactionDate"
    'Kevin 10/19/2015
    Public Function GetDeferredPaymentTransactionDate() As List(Of String)
        Dim result As New List(Of String)
        Dim report As New DataReport
        Try
            Dim SQL As String = "select TO_DATE(TO_CHAR(ALLOCATION_DATE,'MM/DD/YYYY'),'MM/DD/YYYY') as ALLOCATION_DATE " _
                                & "from AM_DEFERRED_PAYMENT_MAIN GROUP BY ALLOCATION_DATE ORDER BY ALLOCATION_DATE DESC"


            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = GetDeferredPaymentTransactionDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetDeferredPaymentTransactionDate(ByVal dr As IDataReader) As List(Of String)
        Dim result As New List(Of String)
        Try
            While dr.Read()
                With dr
                    result.Add(CStr(.Item("ALLOCATION_DATE")))
                End With

            End While            
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get DeferredPaymentParticipant"
    Public Function GetDeferredParticipant(AllocationDate As Date) As Dictionary(Of String, AMParticipants)
        Dim result As New Dictionary(Of String, AMParticipants)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.id_number, c.participant_id, c.full_name " & _
                                "FROM AM_PAYMENT_DETAILS_PARTICIPANT a, AM_PAYMENT b, AM_PARTICIPANTS c " & _
                                "WHERE a.payment_perbp_no = b.payment_perbp_no And a.id_number = c.id_number " & _
                                "AND TO_DATE(TO_CHAR(b.collection_allocation_date,'MM/DD/YYYY'),'MM/DD/YYYY') = " & _
                                "TO_DATE('" & AllocationDate & "','MM/DD/YYYY') AND " & _
                                "(a.deferred_energy > 0 OR a.deferred_vat > 0) " & _
                                "ORDER BY c.participant_id"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDeferredParticipant(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDeferredParticipant(PreviousDate As Date, CurrentDate As Date) As Dictionary(Of String, AMParticipants)
        Dim result As New Dictionary(Of String, AMParticipants)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.id_number, c.participant_id, c.full_name " & _
                                "FROM AM_PAYMENT_DETAILS_PARTICIPANT a, AM_PAYMENT b, AM_PARTICIPANTS c " & _
                                "WHERE a.payment_perbp_no = b.payment_perbp_no And a.id_number = c.id_number " & _
                                "AND (TO_DATE(TO_CHAR(b.collection_allocation_date,'MM/DD/YYYY'),'MM/DD/YYYY') = " & _
                                "TO_DATE('" & PreviousDate & "','MM/DD/YYYY') OR " & _
                                "TO_DATE(TO_CHAR(b.collection_allocation_date,'MM/DD/YYYY'),'MM/DD/YYYY') = " & _
                                "TO_DATE('" & CurrentDate & "','MM/DD/YYYY')) AND " & _
                                "(a.deferred_energy > 0 OR a.deferred_vat > 0) " & _
                                 "ORDER BY c.participant_id"

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDeferredParticipant(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDeferredParticipant(ByVal dr As IDataReader) As Dictionary(Of String, AMParticipants)
        Dim result As New Dictionary(Of String, AMParticipants)
        Try
            While dr.Read()
                With dr
                    If Not result.ContainsKey(CStr(.Item("ID_NUMBER"))) Then
                        result.Add(CStr(.Item("ID_NUMBER")), _
                                   New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")), _
                                                      CStr(.Item("FULL_NAME"))))
                    End If
                End With

            End While

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "GET SPA Invoices"
    Public Function GetSPAInvoiceList() As List(Of SPAInvoices)
        Dim ret As New List(Of SPAInvoices)
        Dim Sql As String = ""
        Dim report As New DataReport
        Try
            

            Sql = "SELECT * FROM AM_INV_SPA_TEMP"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetSPAInvoiceList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetSPAInvoiceList(ByVal dr As IDataReader) As List(Of SPAInvoices)
        Dim ret As New List(Of SPAInvoices)
        Dim SQL As String = ""
        Try
            While dr.Read()
                With dr
                    Using _SPAInvoices As New SPAInvoices
                        _SPAInvoices.InvoiceNumber = .Item("INVOICE_NO").ToString
                        _SPAInvoices.IDNumber = .Item("ID_NUMBER").ToString
                        _SPAInvoices.AllowedToOffset = CInt(.Item("ALLOWED_TO_OFFSET"))
                        ret.Add(_SPAInvoices)
                    End Using
                End With
            End While

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

#End Region

#Region "GetDicAMBeginningBalance"
    Public Function GetDicAMBeginningBalance() As Dictionary(Of String, AMBeginningBalance)
        Dim result As New Dictionary(Of String, AMBeginningBalance)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.transaction_date, a.acct_code, b.description, a.amount " & _
                                "FROM AM_BEGINNING_BALANCE a, AM_ACCOUNTING_CODE b " & _
                                "WHERE a.acct_code = b.acct_code AND b.status = " & EnumStatus.Active

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDicAMBeginningBalance(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDicAMBeginningBalance(ByVal dr As IDataReader) As Dictionary(Of String, AMBeginningBalance)
        Dim result As New Dictionary(Of String, AMBeginningBalance)
        Try
            While dr.Read()
                Dim item As New AMBeginningBalance
                With dr
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.AccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Status = EnumStatus.Active
                    item.Amount = CDec(.Item("AMOUNT"))
                End With
                result.Add(item.AccountCode.AccountCode, item)
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "GetAMBeginningBalance"
    Public Function GetAMBeginningBalance(AcctCode As String) As AMBeginningBalance
        Dim result As New AMBeginningBalance
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.transaction_date, a.acct_code, b.description, a.amount " & _
                                "FROM AM_BEGINNING_BALANCE a, AM_ACCOUNTING_CODE b " & _
                                "WHERE a.acct_code = b.acct_code AND b.status = " & EnumStatus.Active & " " & _
                                "AND a.acct_code = '" & AcctCode & "' "

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMBeginningBalance(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAMBeginningBalance(ByVal dr As IDataReader) As AMBeginningBalance
        Dim result As New AMBeginningBalance

        Try
            While dr.Read()
                With dr
                    result.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    result.AccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    result.Status = EnumStatus.Active
                    result.Amount = CDec(.Item("AMOUNT"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Save WESM Invoice CRSS"
    Public Sub SaveWESMInvoiceCRSS(ByVal calendarBP As CalendarBillingPeriod, ByVal settlementrun As String, ByVal listAggregatedWESMBills As List(Of WESMBill), _
                                    ByVal listAggregatedWESMInvoices As List(Of WESMInvoice), ByVal filetype As EnumFileType, ByVal itemJV As JournalVoucher, _
                                    ByVal itemGP As WESMBillGPPosted, ByVal chargeType As EnumChargeType, ByVal wbschangeparentidlist As List(Of WESMBillSummaryChangeParentId),
                                    ByVal listAggregatedWESMSalesAndPurchases As List(Of WESMBillSalesAndPurchased),
                                    ByVal listWESMInvoice As List(Of WESMInvoice), ByVal listSalesAndPurchased As List(Of WESMBillSalesAndPurchased))
        'DataTable for AM_WESM_INVOICE
        'DataTable for AM_WESM_INVOICE_CRSS       
        Try
            Dim report As New DataReport
            Dim listSQL As New List(Of String)
            Dim dicInvRef As New Dictionary(Of String, Long)
            Dim ds As New DataSet
            Dim SQL As String = ""
            Dim batchCode As String

            Dim bpValue As String = calendarBP.BillingPeriod.ToString() & "(" & FormatDateTime(calendarBP.StartDate, DateFormat.ShortDate) & _
                                    " - " & FormatDateTime(calendarBP.EndDate, DateFormat.ShortDate) & ")"

            'DataTable for AM_WESM_BILL
            Dim dtWESMBill As New DataTable
            dtWESMBill.TableName = "AM_WESM_BILL"
            With dtWESMBill.Columns
                .Add("BATCH_CODE", GetType(String))
                .Add("AM_CODE", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("FOR_ACCOUNT_OF", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("MARKET_FEES_RATE", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMBill.AcceptChanges()

            'DataTable for AM_WESM_INVOICE
            Dim dtWESMInvoice As New DataTable
            dtWESMInvoice.TableName = "AM_WESM_INVOICE"
            With dtWESMInvoice.Columns
                .Add("FILE_TYPE", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("FOR_ACCOUNT_OF", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("QUANTITY", GetType(Decimal))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHARGE_ID", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("MARKET_FEES_RATE", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("INVOICE_CODE", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMInvoice.AcceptChanges()

            'DataTable for AM_WESM_INVOICE_PRINT
            Dim dtWESMInvoicePrinting As New DataTable
            dtWESMInvoicePrinting.TableName = "AM_WESM_INVOICE_PRINT"
            With dtWESMInvoicePrinting.Columns
                .Add("FILE_TYPE", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("FOR_ACCOUNT_OF", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("QUANTITY", GetType(Decimal))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHARGE_ID", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("MARKET_FEES_RATE", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("INVOICE_CODE", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMInvoicePrinting.AcceptChanges()

            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'For Deletion of exsting records in AM_WESM_Bill
            'Generate also the Revision Number
            Select Case chargeType
                Case EnumChargeType.E
                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_BILL  " & _
                          "WHERE (CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' " & _
                          "       OR CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') AND " & _
                          "       BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                          "       AND STL_RUN = '" & settlementrun & "'"
                    listSQL.Add(SQL)

                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_BILL_SALES_PURCHASED  " & _
                              "WHERE BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                              "AND STL_RUN = '" & settlementrun & "'"
                    listSQL.Add(SQL)

                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_SALES_PURCHASES_PRINT  " & _
                              "WHERE BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                              "AND STL_RUN = '" & settlementrun & "'"

                    listSQL.Add(SQL)

                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_SALES_PURCHASES_CRSS  " & _
                              "WHERE BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                              "AND STL_RUN = '" & settlementrun & "'"

                    listSQL.Add(SQL)

                   

                Case EnumChargeType.MF
                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_BILL  " & _
                          "WHERE (CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' " & _
                          "       OR CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') AND " & _
                          "       BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                          "       AND STL_RUN = '" & settlementrun & "'"
                    listSQL.Add(SQL)

            End Select

            'For Deletion of AM_WESM_INVOICE
            SQL = "DELETE FROM AM_WESM_INVOICE  " & _
                  "WHERE billing_period = " & calendarBP.BillingPeriod & " " & _
                  "AND stl_run = '" & settlementrun & "' AND file_type = " & CInt(filetype)
            listSQL.Add(SQL)

            'For Deletion of AM_WESM_INVOICE_PRINT
            SQL = "DELETE FROM AM_WESM_INVOICE_PRINT  " & _
                  "WHERE billing_period = " & calendarBP.BillingPeriod & " " & _
                  "AND stl_run = '" & settlementrun & "' AND file_type = " & CInt(filetype)
            listSQL.Add(SQL)

            'For Deletion of AM_WESM_INVOICE
            SQL = "DELETE FROM AM_WESM_INVOICE_CRSS  " & _
                  "WHERE billing_period = " & calendarBP.BillingPeriod & " " & _
                  "AND stl_run = '" & settlementrun & "' AND file_type = " & CInt(filetype)
            listSQL.Add(SQL)


            'Get the Batch Code per charge type
            batchCode = EnumPostedType.U.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'For deletion of Journal Voucher if there are records to be replaced
            SQL = "UPDATE AM_JV SET STATUS = " & EnumStatus.InActive & " " & _
                  "WHERE STATUS = " & EnumStatus.Active & " AND BATCH_CODE = " & _
                  "                   (SELECT BATCH_CODE FROM AM_WESM_BILL_GP_POSTED " & _
                  "                    WHERE CHARGE_TYPE = '" & chargeType.ToString() & "' " & _
                  "                    AND BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                  "                    AND STL_RUN = '" & settlementrun & "') "
            listSQL.Add(SQL)

            'For Deletion in WESM Bill GP Posted
            SQL = "DELETE FROM AM_WESM_BILL_GP_POSTED " & _
                  "WHERE CHARGE_TYPE = '" & chargeType.ToString() & "' AND BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                  "AND STL_RUN = '" & settlementrun & "'"
            listSQL.Add(SQL)

            'Get the Maximum Invoice No
            Dim InvoiceNo As Long = Me.GetMaxInvoiceNoNew(calendarBP.BillingPeriod, filetype, settlementrun) ' Me.GetMaxInvoiceNo(calendarBP.BillingPeriod, filetype, settlementrun) 'Changed by LAVV as of 04/14/2023            

            If InvoiceNo = 0 Then
                InvoiceNo = AMModule.OldWESMBILL
            End If

            'Data for WESM Bills
            For Each item In listAggregatedWESMBills
                Dim amcode As String = calendarBP.BillingPeriod.ToString() & "-" & _
                                       item.IDNumber & "-" & Me.GetSequenceID("SEQ_AM_CODE").ToString()
                Dim row As DataRow
                row = dtWESMBill.NewRow()

                Dim getTotalInvoiceAmount As Decimal = (From x In listAggregatedWESMBills
                                                        Where x.IDNumber = item.IDNumber And x.RegistrationID = item.RegistrationID
                                                        Select x.Amount).Sum()
                If getTotalInvoiceAmount <> 0 Then
                    With item
                        'Get the unique key to set invoice no
                        Dim UniqueKey = .IDNumber & .RegistrationID

                        Dim getParentID As String = (From x In wbschangeparentidlist
                                                     Where x.BillingPeriod = item.BillingPeriod And x.ParentParticipants.IDNumber = item.IDNumber And x.ChildParticipants.IDNumber = item.RegistrationID
                                                     Select x.NewParentParticipants.IDNumber).FirstOrDefault
                        Dim parentID As String = ""
                        If getParentID IsNot Nothing Then
                            parentID = getParentID
                        Else
                            parentID = .IDNumber
                        End If

                        'Get the final invoice no
                        If Not dicInvRef.ContainsKey(UniqueKey) Then
                            InvoiceNo += 1
                            dicInvRef.Add(UniqueKey, InvoiceNo)
                        End If

                        row("BATCH_CODE") = batchCode
                        row("AM_CODE") = amcode
                        row("BILLING_PERIOD") = .BillingPeriod
                        row("STL_RUN") = .SettlementRun
                        row("ID_NUMBER") = parentID
                        row("REG_ID") = .RegistrationID
                        row("FOR_ACCOUNT_OF") = .ForTheAccountOf
                        row("FULL_NAME") = .FullName
                        If .BillingPeriod = AMModule.BRImplementedBPNo Then
                            row("INVOICE_NO") = .InvoiceNumber
                        Else
                            row("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                        End If
                        row("INVOICE_DATE") = .InvoiceDate
                        row("AMOUNT") = .Amount
                        row("CHARGE_TYPE") = .ChargeType
                        row("DUE_DATE") = .DueDate
                        row("MARKET_FEES_RATE") = .MarketFeesRate
                        row("REMARKS") = .Remarks
                        row("UPDATED_BY") = AMModule.UserName
                    End With

                    dtWESMBill.Rows.Add(row)
                End If
            Next
            dtWESMBill.AcceptChanges()

            For Each item In listAggregatedWESMInvoices
                Dim getTotalInvoiceAmount As Decimal = (From x In listAggregatedWESMInvoices
                                                        Where x.IDNumber = item.IDNumber And x.RegistrationID = item.RegistrationID
                                                        Select x.Amount).Sum()
                If getTotalInvoiceAmount <> 0 Then
                    Dim row As DataRow, rowP As DataRow
                    row = dtWESMInvoice.NewRow()
                    rowP = dtWESMInvoicePrinting.NewRow()

                    With item
                        Dim UniqueKey = .IDNumber & .RegistrationID
                        Dim getParentID As String = (From x In wbschangeparentidlist
                                                     Where x.BillingPeriod = item.BillingPeriod And x.ParentParticipants.IDNumber = item.IDNumber And x.ChildParticipants.IDNumber = item.RegistrationID
                                                     Select x.NewParentParticipants.IDNumber).FirstOrDefault
                        Dim parentID As String = ""
                        If getParentID IsNot Nothing Then
                            If Not getParentID.Contains(AMModule.FITParticipantCode.ToString) Then
                                parentID = getParentID
                            Else
                                parentID = .IDNumber
                            End If
                        Else
                            parentID = .IDNumber
                        End If
                        row("FILE_TYPE") = CInt(.FileType)
                        row("BILLING_PERIOD") = .BillingPeriod
                        row("STL_RUN") = .SettlementRun
                        row("ID_NUMBER") = parentID
                        row("REG_ID") = .RegistrationID
                        row("FOR_ACCOUNT_OF") = .ForTheAccountOf
                        row("FULL_NAME") = .FullName
                        If .BillingPeriod = AMModule.BRImplementedBPNo Then
                            row("INVOICE_NO") = .InvoiceNumber
                        Else
                            row("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                        End If

                        row("INVOICE_DATE") = .InvoiceDate
                        row("AMOUNT") = .Amount
                        row("QUANTITY") = .Quantity
                        row("CHARGE_ID") = .ChargeID
                        row("DUE_DATE") = .DueDate
                        row("MARKET_FEES_RATE") = .MarketFeesRate
                        row("REMARKS") = .Remarks
                        row("UPDATED_BY") = AMModule.UserName
                        row("INVOICE_CODE") = dicInvRef(UniqueKey)

                        'For Printing
                        rowP("FILE_TYPE") = CInt(.FileType)
                        rowP("BILLING_PERIOD") = .BillingPeriod
                        rowP("STL_RUN") = .SettlementRun
                        rowP("ID_NUMBER") = .IDNumber
                        rowP("REG_ID") = .RegistrationID
                        rowP("FOR_ACCOUNT_OF") = .ForTheAccountOf
                        rowP("FULL_NAME") = .FullName
                        If .BillingPeriod = AMModule.BRImplementedBPNo Then
                            rowP("INVOICE_NO") = .InvoiceNumber
                        Else
                            rowP("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                        End If
                        rowP("INVOICE_DATE") = .InvoiceDate
                        rowP("AMOUNT") = .Amount
                        rowP("QUANTITY") = .Quantity
                        rowP("CHARGE_ID") = .ChargeID
                        rowP("DUE_DATE") = .DueDate
                        rowP("MARKET_FEES_RATE") = .MarketFeesRate
                        rowP("REMARKS") = .Remarks
                        rowP("UPDATED_BY") = AMModule.UserName
                        rowP("INVOICE_CODE") = dicInvRef(UniqueKey)
                    End With
                    dtWESMInvoice.Rows.Add(row)
                    dtWESMInvoicePrinting.Rows.Add(rowP)
                End If
            Next
            dtWESMInvoice.AcceptChanges()
            dtWESMInvoicePrinting.AcceptChanges()

            Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")
            With itemJV
                Dim row As DataRow
                row = dtGPPosted.NewRow()

                'Data Journal Voucher
                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("BATCH_CODE") = batchCode
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                dtJV.Rows.Add(row)

                For Each item In itemJV.JVDetails
                    'Data for Journal Voucher Details (Debit)
                    row = dtJVDetails.NewRow()
                    row("AM_JV_NO") = jvNo
                    row("ACCT_CODE") = item.AccountCode
                    row("DEBIT") = item.Debit
                    row("CREDIT") = item.Credit
                    row("UPDATED_BY") = AMModule.UserName
                    dtJVDetails.Rows.Add(row)
                Next
                dtJVDetails.AcceptChanges()
            End With
            dtJV.AcceptChanges()

            Dim chargeTypeValue As String = ""
            With itemGP
                'Get the charge type
                Select Case chargeType
                    Case EnumChargeType.E
                        chargeTypeValue = "Energy"

                    Case EnumChargeType.MF
                        chargeTypeValue = "Market Fees"

                End Select

                Dim row As DataRow
                row = dtGPPosted.NewRow()

                'Data for WESM Bill GP Posted
                row("BILLING_PERIOD") = calendarBP.BillingPeriod
                row("STL_RUN") = settlementrun
                row("CHARGE_TYPE") = .Charge
                row("DUE_DATE") = .DueDate
                row("REMARKS") = "Final Statement for " & chargeTypeValue & "." & _
                                 " Billing Period = " & bpValue & _
                                 ", Settlement Run = " & settlementrun & ", Due Date = " & .DueDate.ToString("MM/dd/yyyy") & _
                                 " and Batch Code = " & batchCode
                row("POSTED") = 0
                row("UPDATED_BY") = AMModule.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("AM_JV_NO") = jvNo

                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()


            Dim dtWESMInvoiceCRSS As New DataTable
            dtWESMInvoiceCRSS.TableName = "AM_WESM_INVOICE_CRSS"
            With dtWESMInvoiceCRSS.Columns
                .Add("FILE_TYPE", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("FOR_ACCOUNT_OF", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("QUANTITY", GetType(Decimal))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHARGE_ID", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("MARKET_FEES_RATE", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("INVOICE_CODE", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMInvoiceCRSS.AcceptChanges()

            For Each item In listWESMInvoice
                Dim row As DataRow
                row = dtWESMInvoiceCRSS.NewRow()
                With item
                    row("FILE_TYPE") = CInt(.FileType)
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("STL_RUN") = .SettlementRun
                    row("ID_NUMBER") = .IDNumber
                    row("REG_ID") = .RegistrationID
                    row("FOR_ACCOUNT_OF") = .ForTheAccountOf
                    row("FULL_NAME") = .FullName
                    row("INVOICE_NO") = .InvoiceNumber
                    row("INVOICE_DATE") = .InvoiceDate
                    row("AMOUNT") = .Amount
                    row("QUANTITY") = .Quantity
                    row("CHARGE_ID") = .ChargeID
                    row("DUE_DATE") = .DueDate
                    row("MARKET_FEES_RATE") = .MarketFeesRate
                    row("REMARKS") = .Remarks
                    row("UPDATED_BY") = AMModule.UserName
                End With
                dtWESMInvoiceCRSS.Rows.Add(row)
            Next
            dtWESMInvoiceCRSS.AcceptChanges()

            If chargeType = EnumChargeType.MF Then
                With ds.Tables
                    .Add(dtWESMBill)
                    .Add(dtWESMInvoice)
                    .Add(dtWESMInvoicePrinting)
                    .Add(dtJV)
                    .Add(dtJVDetails)
                    .Add(dtGPPosted)
                    .Add(dtWESMInvoiceCRSS)
                End With
                ds.AcceptChanges()
            Else
                'DataTable for AM_WESM_BILL_SALES_PURCHASED
                Dim dtWESMSalesPurchases As New DataTable
                dtWESMSalesPurchases.TableName = "AM_WESM_BILL_SALES_PURCHASED"

                With dtWESMSalesPurchases.Columns
                    .Add("BILLING_PERIOD", GetType(Integer))
                    .Add("STL_RUN", GetType(String))
                    .Add("ID_NUMBER", GetType(String))
                    .Add("REG_ID", GetType(String))
                    .Add("INVOICE_NO", GetType(String))
                    .Add("VATABLE_SALES", GetType(Decimal))
                    .Add("ZERO_RATED_SALES", GetType(Decimal))
                    .Add("ZERO_RATED_ECOZONE", GetType(Decimal))
                    .Add("VATABLE_PURCHASES", GetType(Decimal))
                    .Add("ZERO_RATED_PURCHASES", GetType(Decimal))
                    .Add("TTA", GetType(Decimal))
                    .Add("VAT_ON_SALES", GetType(Decimal))
                    .Add("VAT_ON_PURCHASES", GetType(Decimal))
                    .Add("WITHHOLDING_TAX", GetType(Decimal))
                    .Add("GMR", GetType(Decimal))
                    .Add("NSSRA", GetType(Decimal))
                    .Add("TRANSACTION_TYPE", GetType(Integer))
                    .Add("UPDATED_BY", GetType(String))
                End With
                dtWESMSalesPurchases.AcceptChanges()


                Dim dtWESMSAPPrinting As New DataTable
                dtWESMSAPPrinting.TableName = "AM_WESM_SALES_PURCHASES_PRINT"

                With dtWESMSAPPrinting.Columns
                    .Add("BILLING_PERIOD", GetType(Integer))
                    .Add("STL_RUN", GetType(String))
                    .Add("ID_NUMBER", GetType(String))
                    .Add("REG_ID", GetType(String))
                    .Add("INVOICE_NO", GetType(String))
                    .Add("VATABLE_SALES", GetType(Decimal))
                    .Add("ZERO_RATED_SALES", GetType(Decimal))
                    .Add("ZERO_RATED_ECOZONE", GetType(Decimal))
                    .Add("VATABLE_PURCHASES", GetType(Decimal))
                    .Add("ZERO_RATED_PURCHASES", GetType(Decimal))
                    .Add("TTA", GetType(Decimal))
                    .Add("VAT_ON_SALES", GetType(Decimal))
                    .Add("VAT_ON_PURCHASES", GetType(Decimal))
                    .Add("WITHHOLDING_TAX", GetType(Decimal))
                    .Add("GMR", GetType(Decimal))
                    .Add("NSSRA", GetType(Decimal))
                    .Add("TRANSACTION_TYPE", GetType(Integer))
                    .Add("UPDATED_BY", GetType(String))
                End With

                dtWESMSAPPrinting.AcceptChanges()
                For Each item In listAggregatedWESMSalesAndPurchases
                    With item
                        Dim UniqueKey = .IDNumber.IDNumber & .RegistrationID
                        Dim getParentID As String = (From x In wbschangeparentidlist
                                                    Where x.BillingPeriod = item.BillingPeriod And x.ParentParticipants.IDNumber = item.IDNumber.IDNumber And x.ChildParticipants.IDNumber = item.RegistrationID
                                                    Select x.NewParentParticipants.IDNumber).FirstOrDefault
                        Dim parentID As String = ""
                        If getParentID IsNot Nothing Then
                            If Not getParentID.Contains(AMModule.FITParticipantCode.ToString) Then
                                parentID = getParentID
                            Else
                                parentID = .IDNumber.IDNumber
                            End If
                        Else
                            parentID = .IDNumber.IDNumber
                        End If

                        Dim row As DataRow, rowP As DataRow
                        row = dtWESMSalesPurchases.NewRow()
                        rowP = dtWESMSAPPrinting.NewRow()

                        row("BILLING_PERIOD") = .BillingPeriod
                        row("STL_RUN") = .SettlementRun
                        row("ID_NUMBER") = parentID
                        row("REG_ID") = .RegistrationID
                        If .BillingPeriod = AMModule.BRImplementedBPNo Then
                            row("INVOICE_NO") = .InvoiceNumber
                        Else
                            row("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                        End If
                        row("VATABLE_SALES") = .VatableSales
                        row("ZERO_RATED_SALES") = .ZeroRatedSales
                        row("ZERO_RATED_ECOZONE") = .ZeroRatedEcozone
                        row("VATABLE_PURCHASES") = .VatablePurchases
                        row("ZERO_RATED_PURCHASES") = .ZeroRatedPurchases
                        row("TTA") = .NetSettlementAmount
                        row("VAT_ON_SALES") = .VATonSales
                        row("VAT_ON_PURCHASES") = .VATonPurchases
                        row("WITHHOLDING_TAX") = .WithholdingTAX
                        row("GMR") = .GMR
                        row("NSSRA") = .NSSRA
                        row("TRANSACTION_TYPE") = .TransactionType
                        row("UPDATED_BY") = AMModule.UserName

                        dtWESMSalesPurchases.Rows.Add(row)

                        'For Printing
                        rowP("BILLING_PERIOD") = .BillingPeriod
                        rowP("STL_RUN") = .SettlementRun
                        rowP("ID_NUMBER") = .IDNumber.IDNumber
                        rowP("REG_ID") = .RegistrationID
                        If .BillingPeriod = AMModule.BRImplementedBPNo Then
                            rowP("INVOICE_NO") = .InvoiceNumber
                        Else
                            rowP("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                        End If
                        rowP("VATABLE_SALES") = .VatableSales
                        rowP("ZERO_RATED_SALES") = .ZeroRatedSales
                        rowP("ZERO_RATED_ECOZONE") = .ZeroRatedEcozone
                        rowP("VATABLE_PURCHASES") = .VatablePurchases
                        rowP("ZERO_RATED_PURCHASES") = .ZeroRatedPurchases
                        rowP("TTA") = .NetSettlementAmount
                        rowP("VAT_ON_SALES") = .VATonSales
                        rowP("VAT_ON_PURCHASES") = .VATonPurchases
                        rowP("WITHHOLDING_TAX") = .WithholdingTAX
                        rowP("GMR") = .GMR
                        rowP("NSSRA") = .NSSRA
                        rowP("TRANSACTION_TYPE") = .TransactionType
                        rowP("UPDATED_BY") = AMModule.UserName

                        dtWESMSAPPrinting.Rows.Add(rowP)
                    End With
                Next

                Dim dtWESMSAPCRSS As New DataTable
                dtWESMSAPCRSS.TableName = "AM_WESM_SALES_PURCHASES_CRSS"
                With dtWESMSAPCRSS.Columns
                    .Add("BILLING_PERIOD", GetType(Integer))
                    .Add("STL_RUN", GetType(String))
                    .Add("ID_NUMBER", GetType(String))
                    .Add("REG_ID", GetType(String))
                    .Add("INVOICE_NO", GetType(String))
                    .Add("VATABLE_SALES", GetType(Decimal))
                    .Add("ZERO_RATED_SALES", GetType(Decimal))
                    .Add("ZERO_RATED_ECOZONE", GetType(Decimal))
                    .Add("VATABLE_PURCHASES", GetType(Decimal))
                    .Add("ZERO_RATED_PURCHASES", GetType(Decimal))
                    .Add("TTA", GetType(Decimal))
                    .Add("VAT_ON_SALES", GetType(Decimal))
                    .Add("VAT_ON_PURCHASES", GetType(Decimal))
                    .Add("WITHHOLDING_TAX", GetType(Decimal))
                    .Add("GMR", GetType(Decimal))
                    .Add("NSSRA", GetType(Decimal))
                    .Add("TRANSACTION_TYPE", GetType(Integer))
                    .Add("UPDATED_BY", GetType(String))
                End With
                dtWESMSAPCRSS.AcceptChanges()

                If listSalesAndPurchased.Count > 0 Then
                    For Each item In listSalesAndPurchased
                        With item
                            Dim row = dtWESMSAPCRSS.NewRow()
                            row("BILLING_PERIOD") = .BillingPeriod
                            row("STL_RUN") = .SettlementRun
                            row("ID_NUMBER") = .IDNumber.IDNumber
                            row("REG_ID") = .RegistrationID
                            row("INVOICE_NO") = .InvoiceNumber
                            row("VATABLE_SALES") = .VatableSales
                            row("ZERO_RATED_SALES") = .ZeroRatedSales
                            row("ZERO_RATED_ECOZONE") = .ZeroRatedEcozone
                            row("VATABLE_PURCHASES") = .VatablePurchases
                            row("ZERO_RATED_PURCHASES") = .ZeroRatedPurchases
                            row("TTA") = .NetSettlementAmount
                            row("VAT_ON_SALES") = .VATonSales
                            row("VAT_ON_PURCHASES") = .VATonPurchases
                            row("WITHHOLDING_TAX") = .WithholdingTAX
                            row("GMR") = .GMR
                            row("NSSRA") = .NSSRA
                            row("TRANSACTION_TYPE") = .TransactionType
                            row("UPDATED_BY") = AMModule.UserName
                            dtWESMSAPCRSS.Rows.Add(row)
                        End With
                    Next
                    dtWESMSAPCRSS.AcceptChanges()

                End If

                With ds.Tables
                    .Add(dtWESMBill)
                    .Add(dtWESMInvoice)
                    .Add(dtWESMInvoicePrinting)
                    .Add(dtWESMSalesPurchases)
                    .Add(dtWESMSAPPrinting)
                    .Add(dtJV)
                    .Add(dtJVDetails)
                    .Add(dtGPPosted)
                    .Add(dtWESMInvoiceCRSS)
                    .Add(dtWESMSAPCRSS)
                End With
                ds.AcceptChanges()
            End If
            
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub
#End Region

#Region "Save WESM Bill"
    Public Sub SaveWESMBill(ByVal calendarBP As CalendarBillingPeriod, ByVal settlementrun As String, ByVal wesmbills As List(Of WESMBill), _
                            ByVal wesminvoices As List(Of WESMInvoice), ByVal filetype As EnumFileType, ByVal itemJV As JournalVoucher, _
                            ByVal itemGP As WESMBillGPPosted, ByVal chargeType As EnumChargeType, ByVal wbschangeparentidlist As List(Of WESMBillSummaryChangeParentId))
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim dicInvRef As New Dictionary(Of String, Long)
        Dim ds As New DataSet
        Dim SQL As String
        Dim batchCode As String

        Dim bpValue As String = calendarBP.BillingPeriod.ToString() & "(" & FormatDateTime(calendarBP.StartDate, DateFormat.ShortDate) & _
                                " - " & FormatDateTime(calendarBP.EndDate, DateFormat.ShortDate) & ")"

        Try
            

            'DataTable for AM_WESM_BILL
            Dim dtWESMBill As New DataTable
            dtWESMBill.TableName = "AM_WESM_BILL"
            With dtWESMBill.Columns
                .Add("BATCH_CODE", GetType(String))
                .Add("AM_CODE", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("FOR_ACCOUNT_OF", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("MARKET_FEES_RATE", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMBill.AcceptChanges()

            'DataTable for AM_WESM_INVOICE
            Dim dtWESMInvoice As New DataTable
            dtWESMInvoice.TableName = "AM_WESM_INVOICE"
            With dtWESMInvoice.Columns
                .Add("FILE_TYPE", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("FOR_ACCOUNT_OF", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("QUANTITY", GetType(Decimal))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHARGE_ID", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("MARKET_FEES_RATE", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("INVOICE_CODE", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMInvoice.AcceptChanges()

            'DataTable for AM_WESM_INVOICE_PRINT
            Dim dtWESMInvoicePrinting As New DataTable
            dtWESMInvoicePrinting.TableName = "AM_WESM_INVOICE_PRINT"
            With dtWESMInvoicePrinting.Columns
                .Add("FILE_TYPE", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("FOR_ACCOUNT_OF", GetType(String))
                .Add("FULL_NAME", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("QUANTITY", GetType(Decimal))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHARGE_ID", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("MARKET_FEES_RATE", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("INVOICE_CODE", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMInvoicePrinting.AcceptChanges()


            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'For Deletion of exsting records in AM_WESM_Bill
            'Generate also the Revision Number
            Select Case chargeType
                Case EnumChargeType.E
                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_BILL  " & _
                          "WHERE (CHARGE_TYPE = '" & EnumChargeType.E.ToString() & "' " & _
                          "       OR CHARGE_TYPE = '" & EnumChargeType.EV.ToString() & "') AND " & _
                          "       BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                          "       AND STL_RUN = '" & settlementrun & "'"
                    listSQL.Add(SQL)

                    'For Deletion of sales and purchased
                    SQL = "DELETE FROM AM_WESM_BILL_SALES_PURCHASED  " & _
                          "WHERE  BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                          "       AND STL_RUN = '" & settlementrun & "'"
                    listSQL.Add(SQL)

                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_SALES_PURCHASES_PRINT  " & _
                              "WHERE BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                              "AND STL_RUN = '" & settlementrun & "'"

                    listSQL.Add(SQL)

                Case EnumChargeType.MF
                    'For Deletion
                    SQL = "DELETE FROM AM_WESM_BILL  " & _
                          "WHERE (CHARGE_TYPE = '" & EnumChargeType.MF.ToString() & "' " & _
                          "       OR CHARGE_TYPE = '" & EnumChargeType.MFV.ToString() & "') AND " & _
                          "       BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                          "       AND STL_RUN = '" & settlementrun & "'"
                    listSQL.Add(SQL)

            End Select

            'Get the Batch Code per charge type
            batchCode = EnumPostedType.U.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'For Deletion of AM_WESM_INVOICE
            SQL = "DELETE FROM AM_WESM_INVOICE  " & _
                  "WHERE billing_period = " & calendarBP.BillingPeriod & " " & _
                  "AND stl_run = '" & settlementrun & "' AND file_type = " & CInt(filetype)
            listSQL.Add(SQL)

            'For Deletion of AM_WESM_INVOICE_PRINT
            SQL = "DELETE FROM AM_WESM_INVOICE_PRINT  " & _
                  "WHERE billing_period = " & calendarBP.BillingPeriod & " " & _
                  "AND stl_run = '" & settlementrun & "' AND file_type = " & CInt(filetype)
            listSQL.Add(SQL)

            'For deletion of Journal Voucher if there are records to be replaced
            SQL = "UPDATE AM_JV SET STATUS = " & EnumStatus.InActive & " " & _
                  "WHERE STATUS = " & EnumStatus.Active & " AND BATCH_CODE = " & _
                  "                   (SELECT BATCH_CODE FROM AM_WESM_BILL_GP_POSTED " & _
                  "                    WHERE CHARGE_TYPE = '" & chargeType.ToString() & "' " & _
                  "                    AND BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                  "                    AND STL_RUN = '" & settlementrun & "') "
            listSQL.Add(SQL)

            'For Deletion in WESM Bill GP Posted
            SQL = "DELETE FROM AM_WESM_BILL_GP_POSTED " & _
                  "WHERE CHARGE_TYPE = '" & chargeType.ToString() & "' AND BILLING_PERIOD = " & calendarBP.BillingPeriod & " " & _
                  "AND STL_RUN = '" & settlementrun & "'"
            listSQL.Add(SQL)

            'Get the Maximum Invoice No
            Dim InvoiceNo = Me.GetMaxInvoiceNo(calendarBP.BillingPeriod, filetype, settlementrun)

            If InvoiceNo = 0 Then
                InvoiceNo = AMModule.OldWESMBILL
            End If

            'Data for WESM Bills
            For Each item In wesmbills
                Dim amcode As String = calendarBP.BillingPeriod.ToString() & "-" & _
                                       item.IDNumber & "-" & Me.GetSequenceID("SEQ_AM_CODE").ToString()
                Dim row As DataRow
                row = dtWESMBill.NewRow()

                With item
                    'Get the unique key to set invoice no
                    Dim UniqueKey = .IDNumber & .RegistrationID & .InvoiceDate.ToString("MMddyyyy") & .DueDate.ToString("MMddyyyy")

                    Dim getParentID As String = (From x In wbschangeparentidlist
                                                 Where x.BillingPeriod = item.BillingPeriod And x.ParentParticipants.IDNumber = item.IDNumber And x.ChildParticipants.IDNumber = item.RegistrationID
                                                 Select x.NewParentParticipants.IDNumber).FirstOrDefault
                    Dim parentID As String = ""
                    If getParentID IsNot Nothing Then
                        parentID = getParentID
                    Else
                        parentID = .IDNumber
                    End If
                    'Get the final invoice no
                    If Not dicInvRef.ContainsKey(UniqueKey) Then
                        InvoiceNo += 1
                        dicInvRef.Add(UniqueKey, InvoiceNo)
                    End If

                    row("BATCH_CODE") = batchCode
                    row("AM_CODE") = amcode
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("STL_RUN") = .SettlementRun
                    row("ID_NUMBER") = parentID
                    row("REG_ID") = .RegistrationID
                    row("FOR_ACCOUNT_OF") = .ForTheAccountOf
                    row("FULL_NAME") = .FullName
                    row("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                    row("INVOICE_DATE") = .InvoiceDate
                    row("AMOUNT") = .Amount
                    row("CHARGE_TYPE") = .ChargeType
                    row("DUE_DATE") = .DueDate
                    row("MARKET_FEES_RATE") = .MarketFeesRate
                    row("REMARKS") = .Remarks
                    row("UPDATED_BY") = Me.UserName
                End With

                dtWESMBill.Rows.Add(row)
            Next
            dtWESMBill.AcceptChanges()

            For Each item In wesminvoices
                Dim row As DataRow, rowP As DataRow
                row = dtWESMInvoice.NewRow()
                rowP = dtWESMInvoicePrinting.NewRow()
                With item
                    Dim UniqueKey = .IDNumber & .RegistrationID & .InvoiceDate.ToString("MMddyyyy") & .DueDate.ToString("MMddyyyy")                    
                    Dim getParentID As String = (From x In wbschangeparentidlist
                                                 Where x.BillingPeriod = item.BillingPeriod And x.ParentParticipants.IDNumber = item.IDNumber And x.ChildParticipants.IDNumber = item.RegistrationID
                                                 Select x.NewParentParticipants.IDNumber).FirstOrDefault
                    Dim parentID As String = ""
                    If getParentID IsNot Nothing Then
                        If Not getParentID.Contains(AMModule.FITParticipantCode.ToString) Then
                            parentID = getParentID
                        Else
                            parentID = .IDNumber
                        End If
                    Else
                        parentID = .IDNumber
                    End If
                    row("FILE_TYPE") = CInt(.FileType)
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("STL_RUN") = .SettlementRun
                    row("ID_NUMBER") = parentID
                    row("REG_ID") = .RegistrationID
                    row("FOR_ACCOUNT_OF") = .ForTheAccountOf
                    row("FULL_NAME") = .FullName
                    row("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                    row("INVOICE_DATE") = .InvoiceDate
                    row("AMOUNT") = .Amount
                    row("QUANTITY") = .Quantity
                    row("CHARGE_ID") = .ChargeID
                    row("DUE_DATE") = .DueDate
                    row("MARKET_FEES_RATE") = .MarketFeesRate
                    row("REMARKS") = .Remarks
                    row("UPDATED_BY") = Me.UserName
                    row("INVOICE_CODE") = dicInvRef(UniqueKey)

                    'For Printing
                    rowP("FILE_TYPE") = CInt(.FileType)
                    rowP("BILLING_PERIOD") = .BillingPeriod
                    rowP("STL_RUN") = .SettlementRun
                    rowP("ID_NUMBER") = .IDNumber
                    rowP("REG_ID") = .RegistrationID
                    rowP("FOR_ACCOUNT_OF") = .ForTheAccountOf
                    rowP("FULL_NAME") = .FullName
                    rowP("INVOICE_NO") = BFactory.GenerateBIRDocumentNumber(dicInvRef(UniqueKey), BIRDocumentsType.FinalStatement)
                    rowP("INVOICE_DATE") = .InvoiceDate
                    rowP("AMOUNT") = .Amount
                    rowP("QUANTITY") = .Quantity
                    rowP("CHARGE_ID") = .ChargeID
                    rowP("DUE_DATE") = .DueDate
                    rowP("MARKET_FEES_RATE") = .MarketFeesRate
                    rowP("REMARKS") = .Remarks
                    rowP("UPDATED_BY") = AMModule.UserName
                    rowP("INVOICE_CODE") = dicInvRef(UniqueKey)
                End With
                dtWESMInvoice.Rows.Add(row)
                dtWESMInvoicePrinting.Rows.Add(rowP)
            Next
            dtWESMInvoice.AcceptChanges()

            Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")
            With itemJV
                Dim row As DataRow
                row = dtGPPosted.NewRow()

                'Data Journal Voucher
                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("BATCH_CODE") = batchCode
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                dtJV.Rows.Add(row)

                For Each item In itemJV.JVDetails
                    'Data for Journal Voucher Details (Debit)
                    row = dtJVDetails.NewRow()
                    row("AM_JV_NO") = jvNo
                    row("ACCT_CODE") = item.AccountCode
                    row("DEBIT") = item.Debit
                    row("CREDIT") = item.Credit
                    row("UPDATED_BY") = Me.UserName
                    dtJVDetails.Rows.Add(row)
                Next
                dtJVDetails.AcceptChanges()
            End With
            dtJV.AcceptChanges()

            Dim chargeTypeValue As String = ""
            With itemGP
                'Get the charge type
                Select Case chargeType
                    Case EnumChargeType.E
                        chargeTypeValue = "Energy"

                    Case EnumChargeType.MF
                        chargeTypeValue = "Market Fees"

                End Select

                Dim row As DataRow
                row = dtGPPosted.NewRow()

                'Data for WESM Bill GP Posted
                row("BILLING_PERIOD") = calendarBP.BillingPeriod
                row("STL_RUN") = settlementrun
                row("CHARGE_TYPE") = .Charge
                row("DUE_DATE") = .DueDate
                row("REMARKS") = "Final Statement for " & chargeTypeValue & "." & _
                                 " Billing Period = " & bpValue & _
                                 ", Settlement Run = " & settlementrun & ", Due Date = " & .DueDate.ToString("MM/dd/yyyy") & _
                                 " and Batch Code = " & batchCode
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("AM_JV_NO") = jvNo

                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()

            With ds.Tables
                .Add(dtWESMBill)
                .Add(dtWESMInvoice)
                .Add(dtWESMInvoicePrinting)
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
            End With
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "Saving Parent to Parent/Child to Child Offsetting"
    Public Sub SaveP2PC2COffseting(ByVal billingPeriod As Integer, ByVal listOffset As List(Of OffsetP2PC2CDetails),
                                   ByVal listWESMBillSummary As List(Of WESMBillSummary), ByVal listWTDSumary As List(Of WESMTransDetailsSummary),
                                   ByVal listJournalVoucher As List(Of JournalVoucher), ByVal listDMCM As List(Of DebitCreditMemo),
                                   ByVal listGPPosted As List(Of WESMBillGPPosted), ByVal DMCMNo As Long, ByVal JVNo As Long,
                                   ByVal OffsetNo As Long, ByVal WESMBillSummaryNo As Long, DueDate As Date, NewDueDate As Date, StlRun As String, chargeType As EnumChargeType)
        Dim dicOffsetNo As New Dictionary(Of String, String)
        Dim dicDMCMNo As New Dictionary(Of Long, Long)
        Dim dicJV As New Dictionary(Of Long, Long)
        Dim dicWESMBillSummaryNo As New Dictionary(Of Long, Long)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim row As DataRow

        Try
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("BATCH_CODE", GetType(String))
                .Add("REMARKS", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            Dim dtOffset As New DataTable
            dtOffset.TableName = "AM_OFFSET_P2PC2C_DETAILS"
            With dtOffset.Columns
                .Add("OFFSET_NO", GetType(String))
                .Add("TRANS_DATE", GetType(Date))
                .Add("AM_CODE", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("GROUP_NO", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtOffset.AcceptChanges()

            Dim dtWESMBillSummary As New DataTable
            dtWESMBillSummary.TableName = "AM_WESM_BILL_SUMMARY"
            With dtWESMBillSummary.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("NEW_DUEDATE", GetType(Date))
                .Add("BEGINNING_BALANCE", GetType(Decimal))
                .Add("ENDING_BALANCE", GetType(Decimal))
                .Add("ENERGY_WITHHOLD", GetType(Decimal))
                .Add("ID_TYPE", GetType(String))
                .Add("IS_MFWTAX_DEDUCTED", GetType(String))
                .Add("INV_DM_CM", GetType(String))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("WESMBILL_BATCH_NO", GetType(Long))
                .Add("ENERGY_WITHHOLD_STATUS", GetType(Integer))
                .Add("SPA_NO", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
                .Add("BALANCE_TYPE", GetType(String))
                .Add("NO_OFFSET", GetType(Integer))
            End With
            dtWESMBillSummary.AcceptChanges()

            Dim dtDMCM As New DataTable
            dtDMCM.TableName = "AM_DMCM"
            With dtDMCM.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("AM_JV_NO", GetType(Long))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("DUE_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("EWT", GetType(Decimal))
                .Add("EWV", GetType(Decimal))
                .Add("VATABLE", GetType(Decimal))
                .Add("VAT", GetType(Decimal))
                .Add("VAT_EXEMPT", GetType(Decimal))
                .Add("VAT_ZERO_RATED", GetType(Decimal))
                .Add("TOTAL_AMOUNT_DUE", GetType(Decimal))
                .Add("PARTICULARS", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCM.AcceptChanges()

            Dim dtDMCMDetails As New DataTable
            dtDMCMDetails.TableName = "AM_DMCM_DETAILS"
            With dtDMCMDetails.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(String))
                .Add("CREDIT", GetType(String))
                .Add("INV_DM_CM", GetType(String))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("IS_COMPUTE", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCMDetails.AcceptChanges()

            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'Generate Sequence ID for Offset No
            dicOffsetNo.Add("0", "0")
            For cnt As Long = 1 To OffsetNo
                dicOffsetNo.Add(cnt.ToString(), EnumPostedType.O.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString())
            Next

            'Generate Sequence ID for DMCM No
            dicDMCMNo.Add(0, 0)
            For cnt As Long = 1 To DMCMNo
                dicDMCMNo.Add(cnt, Me.GetSequenceID("SEQ_AM_DMCM_NO"))
            Next

            'Generate Sequence ID for Journal Voucher No
            dicJV.Add(0, 0)
            For cnt As Long = 1 To JVNo
                dicJV.Add(cnt, Me.GetSequenceID("SEQ_AM_JV_NO"))
            Next

            'Genrate the Sequence ID for WESM Bill Sumamry
            dicWESMBillSummaryNo.Add(0, 0)
            For cnt As Long = 1 To WESMBillSummaryNo
                dicWESMBillSummaryNo.Add(cnt, Me.GetSequenceID("SEQ_AM_WESMBILL_SUMMARY_NO"))
            Next

            '******************** Save Offsetting *****************************
            For Each itemOffset In listOffset
                With itemOffset
                    row = dtOffset.NewRow()
                    row("OFFSET_NO") = dicOffsetNo(.OffsetNumber)
                    row("TRANS_DATE") = Date.Now
                    row("AM_CODE") = .AMCode
                    row("INVOICE_NO") = .InvoiceNumber
                    row("AM_DMCM_NO") = dicDMCMNo(.DMCMNumber)
                    row("GROUP_NO") = dicWESMBillSummaryNo(.WESMBillSummaryNo)
                    row("UPDATED_BY") = Me.UserName
                    dtOffset.Rows.Add(row)
                End With
            Next
            dtOffset.AcceptChanges()

            '******************** Save DMCM *****************************
            For Each itemDMCM In listDMCM
                With itemDMCM
                    row = dtDMCM.NewRow()
                    row("AM_DMCM_NO") = dicDMCMNo(.DMCMNumber)
                    row("AM_JV_NO") = dicJV(.JVNumber)
                    row("ID_NUMBER") = .IDNumber
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("DUE_DATE") = NewDueDate 'Change ".DueDate" with the selected duedate by the user
                    row("TRANS_TYPE") = .TransType
                    row("EWT") = .EWT
                    row("EWV") = .EWV
                    row("VATABLE") = .Vatable
                    row("VAT") = .VAT
                    row("VAT_EXEMPT") = .VATExempt
                    row("VAT_ZERO_RATED") = .VatZeroRated
                    row("TOTAL_AMOUNT_DUE") = .TotalAmountDue
                    row("PARTICULARS") = .Particulars
                    row("CHARGE_TYPE") = .ChargeType.ToString()
                    row("PREPARED_BY") = Me.UserName
                    row("CHECKED_BY") = .CheckedBy
                    row("APPROVED_BY") = .ApprovedBy
                    row("UPDATED_BY") = Me.UserName
                    dtDMCM.Rows.Add(row)
                End With

                'Data for DMCM Details
                For Each itemDMCMDetails In itemDMCM.DMCMDetails
                    With itemDMCMDetails
                        row = dtDMCMDetails.NewRow()
                        row("AM_DMCM_NO") = dicDMCMNo(.DMCMNumber)
                        row("ACCT_CODE") = .AccountCode
                        row("DEBIT") = .Debit
                        row("CREDIT") = .Credit
                        row("INV_DM_CM") = .InvDMCMNo
                        row("SUMMARY_TYPE") = .SummaryType
                        row("ID_NUMBER") = .IDNumber.IDNumber
                        row("IS_COMPUTE") = .IsComputed
                        row("UPDATED_BY") = Me.UserName
                        dtDMCMDetails.Rows.Add(row)
                    End With
                Next
                dtDMCMDetails.AcceptChanges()
            Next
            dtDMCM.AcceptChanges()

            '******************** Save Journal Voucher *****************************
            For Each itemJV In listJournalVoucher
                row = dtJV.NewRow()
                row("AM_JV_NO") = dicJV(itemJV.JVNumber)
                row("BATCH_CODE") = dicOffsetNo(itemJV.BatchCode)
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = itemJV.CheckedBy
                row("APPROVED_BY") = itemJV.ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = itemJV.PostedType
                dtJV.Rows.Add(row)
                dtJV.AcceptChanges()

                'Data for Journal Voucher Details
                For Each itemJVDetails In itemJV.JVDetails
                    With itemJVDetails
                        row = dtJVDetails.NewRow()
                        row("AM_JV_NO") = dicJV(itemJV.JVNumber)
                        row("ACCT_CODE") = .AccountCode
                        row("DEBIT") = .Debit
                        row("CREDIT") = .Credit
                        row("UPDATED_BY") = Me.UserName
                        dtJVDetails.Rows.Add(row)
                    End With
                Next
                dtJVDetails.AcceptChanges()
            Next

            '******************** Save WESM Bill GP Posted *****************************
            For Each itemGPPosted In listGPPosted
                With itemGPPosted
                    'Data for GP Posted
                    row = dtGPPosted.NewRow()
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("STL_RUN") = .SettlementRun
                    row("CHARGE_TYPE") = .Charge.ToString()
                    row("DUE_DATE") = .DueDate
                    row("DOCUMENT_AMOUNT") = .DocumentAmount
                    row("BATCH_CODE") = dicOffsetNo(.BatchCode)
                    row("REMARKS") = .Remarks & " and Batch Code = " & dicOffsetNo(.BatchCode) & ")."
                    row("UPDATED_BY") = Me.UserName
                    row("POSTED_TYPE") = .PostType
                    row("AM_JV_NO") = dicJV(.JVNumber)
                    dtGPPosted.Rows.Add(row)
                End With
            Next
            dtGPPosted.AcceptChanges()

            '******************** Save WESM Bill Summary *****************************
            Dim DistinctDueDate As List(Of Date) = listWESMBillSummary.Select(Function(x) x.DueDate).Distinct.ToList()
            Dim dicWESMBillBatchNo As New Dictionary(Of Date, Long)
            If DistinctDueDate.Count >= 1 Then
                For Each item In DistinctDueDate
                    If Not dicWESMBillBatchNo.ContainsKey(item) Then
                        'Generate the Sequence ID for WESM Bill Summary Batch No
                        Dim WESMBillBatchNo As Long = Me.GetSequenceID("SEQ_AM_WESMBILL_BATCH_NO")
                        dicWESMBillBatchNo.Add(item, WESMBillBatchNo)
                    End If
                Next
            End If

            For Each itemWESMBillSummary In listWESMBillSummary
                With itemWESMBillSummary
                    'Data for GP Posted
                    row = dtWESMBillSummary.NewRow()
                    row("BILLING_PERIOD") = .BillPeriod
                    row("ID_NUMBER") = .IDNumber.IDNumber
                    row("CHARGE_TYPE") = .ChargeType
                    row("DUE_DATE") = NewDueDate 'Change ".DueDate" with the selected duedate by the user
                    row("NEW_DUEDATE") = NewDueDate 'Change ".DueDate" with the selected duedate by the user
                    row("BEGINNING_BALANCE") = .BeginningBalance
                    row("ENDING_BALANCE") = .EndingBalance
                    row("ENERGY_WITHHOLD") = .EnergyWithhold
                    row("ID_TYPE") = .IDType
                    row("IS_MFWTAX_DEDUCTED") = .IsMFWTaxDeducted

                    If .SummaryType = EnumSummaryType.DMCM Then
                        row("INV_DM_CM") = CStr(dicDMCMNo(CLng(.INVDMCMNo)))
                    Else
                        row("INV_DM_CM") = .INVDMCMNo
                    End If

                    row("SUMMARY_TYPE") = .SummaryType
                    row("WESMBILL_SUMMARY_NO") = dicWESMBillSummaryNo(.WESMBillSummaryNo)
                    row("WESMBILL_BATCH_NO") = dicWESMBillBatchNo(.DueDate)
                    row("ENERGY_WITHHOLD_STATUS") = .EnergyWithholdStatus
                    row("SPA_NO") = 0
                    row("UPDATED_BY") = Me.UserName
                    row("BALANCE_TYPE") = .BalanceType.ToString
                    row("NO_OFFSET") = If(.NoOffset = True, 1, 0)
                    dtWESMBillSummary.Rows.Add(row)
                End With
            Next

            dtWESMBillSummary.AcceptChanges()

            'Add the tables in dataset
            With ds.Tables
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtDMCM)
                .Add(dtDMCMDetails)
                .Add(dtOffset)
                .Add(dtWESMBillSummary)
                .Add(dtGPPosted)
            End With
            ds.AcceptChanges()

            'Change ".DueDate" with the selected duedate by the user in AM_WESM_Bill
            Dim Sql As String
            If chargeType = EnumChargeType.E Then
                If StlRun.Contains(";") Then
                    Dim splitSTLrun = StlRun.Split(CChar(";"))
                    Dim counter As Integer = 0
                    For Each sitem In splitSTLrun
                        Sql = "UPDATE AM_WESM_BILL SET DUE_DATE = TO_DATE('" & NewDueDate & "','MM/dd/yyyy') " &
                      "WHERE BILLING_PERIOD = " & billingPeriod & " AND DUE_DATE = TO_DATE('" & DueDate & "','MM/dd/yyyy') " &
                      "AND STL_RUN ='" & sitem & "' AND CHARGE_TYPE IN ('" & EnumChargeType.E.ToString() & "','" & EnumChargeType.EV.ToString() & "')"
                        listSQL.Add(Sql)
                    Next
                Else
                    Sql = "UPDATE AM_WESM_BILL SET DUE_DATE = TO_DATE('" & NewDueDate & "','MM/dd/yyyy') " &
                      "WHERE BILLING_PERIOD = " & billingPeriod & " AND DUE_DATE = TO_DATE('" & DueDate & "','MM/dd/yyyy') " &
                      "AND STL_RUN ='" & StlRun & "' AND CHARGE_TYPE IN ('" & EnumChargeType.E.ToString() & "', '" & EnumChargeType.EV.ToString() & "')"
                    listSQL.Add(Sql)
                End If

                If listWTDSumary.Count <> 0 Then
                    For Each item In listWTDSumary
                        Sql = "INSERT INTO AM_WESM_TRANS_DETAILS_SUMMARY(BUYER_TRANS_NO,BUYER_BILLING_ID,SELLER_TRANS_NO,SELLER_BILLING_ID,DUE_DATE,NEW_DUE_DATE,ORIG_AMOUNT_ENERGY,OBIN_ENERGY," & vbNewLine _
                                            & "ORIG_AMOUNT_VAT,OBIN_VAT,ORIG_AMOUNT_EWT,OBIN_EWT,UPDATED_DATE,UPDATED_BY)" & vbNewLine _
                            & "SELECT '" & item.BuyerTransNo & "', '" & item.BuyerBillingID & "', '" & item.SellerTransNo & "', '" & item.SellerBillingID & "', TO_DATE('" & item.DueDate.ToShortDateString & "','MM/DD/yyyy')," & vbNewLine _
                            & "TO_DATE('" & item.NewDueDate.ToShortDateString & "','MM/DD/yyyy')," & item.OrigBalanceInEnergy & "," & item.OutstandingBalanceInEnergy & "," & item.OrigBalanceInVAT & vbNewLine _
                            & "," & item.OutstandingBalanceInVAT & "," & item.OrigBalanceInEWT & "," & item.OutstandingBalanceInEWT & ",SYSDATE,'" & AMModule.UserName & "' FROM DUAL"
                        listSQL.Add(Sql)
                    Next
                End If
            Else
                If StlRun.Contains(";") Then
                    Dim splitSTLrun = StlRun.Split(CChar(";"))
                    Dim counter As Integer = 0
                    For Each sitem In splitSTLrun
                        Sql = "UPDATE AM_WESM_BILL SET DUE_DATE = TO_DATE('" & NewDueDate & "','MM/dd/yyyy') " &
                       "WHERE BILLING_PERIOD = " & billingPeriod & " AND DUE_DATE = TO_DATE('" & DueDate & "','MM/dd/yyyy') " &
                       "AND STL_RUN ='" & sitem & "' AND CHARGE_TYPE IN ('" & EnumChargeType.MF.ToString() & "','" & EnumChargeType.MFV.ToString() & "')"
                        listSQL.Add(Sql)
                    Next
                Else
                    Sql = "UPDATE AM_WESM_BILL SET DUE_DATE = TO_DATE('" & NewDueDate & "','MM/dd/yyyy') " &
                      "WHERE BILLING_PERIOD = " & billingPeriod & " AND DUE_DATE = TO_DATE('" & DueDate & "','MM/dd/yyyy') " &
                      "AND STL_RUN ='" & StlRun & "' AND CHARGE_TYPE IN ('" & EnumChargeType.MF.ToString() & "','" & EnumChargeType.MFV.ToString() & "')"
                    listSQL.Add(Sql)
                End If
            End If

            listSQL.TrimExcess()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Accounting Code"
    Public Sub SaveAccountingCode(ByVal item As AccountingCode, ByVal tag As Boolean)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String
        Dim revision As Integer = 0

        

        Try
            If tag Then
                Dim dt As New DataTable
                dt.TableName = "AM_ACCOUNTING_CODE"
                With dt.Columns
                    .Add("ACCT_CODE", GetType(String))
                    .Add("DESCRIPTION", GetType(String))
                    .Add("STATUS", GetType(Integer))
                    .Add("UPDATED_BY", GetType(String))
                    .Add("REVISION", GetType(Integer))
                End With
                dt.AcceptChanges()

                Dim row As DataRow
                row = dt.NewRow()
                row("ACCT_CODE") = item.AccountCode
                row("DESCRIPTION") = item.Description
                row("STATUS") = item.Status
                row("UPDATED_BY") = Me.UserName
                row("REVISION") = revision
                dt.Rows.Add(row)
                dt.AcceptChanges()

                ds.Tables.Add(dt)

            Else
                SQL = "SELECT revision FROM AM_ACCOUNTING_CODE WHERE acct_code = '" & item.AccountCode & "'"
                revision = Me.GetRevisionNumber(SQL)

                SQL = "UPDATE AM_ACCOUNTING_CODE " & _
                      "SET description = '" & item.Description & "', status =" & item.Status & ", " & _
                      "revision = " & revision & ", updated_by = '" & Me.UserName & "', " & _
                      "date_committed = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE ACCT_CODE = '" & item.AccountCode & "'"

                listSQL.Add(SQL)
            End If

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save ChargeID Code"
    Public Sub SaveChargeIdCode(ByVal item As ChargeId, ByVal Tag As Boolean)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String
        Dim revision As Integer = 0

        

        Try

            If Tag Then
                Dim dt As New DataTable
                dt.TableName = "AM_CHARGE_ID_LIB"
                With dt.Columns
                    .Add("CHARGE_ID", GetType(String))
                    .Add("DESCRIPTION", GetType(String))
                    .Add("CHARGE_ID_TYPE", GetType(String))
                    .Add("STATUS", GetType(Integer))
                    .Add("UPDATED_DATE", GetType(Date))
                    .Add("UPDATED_BY", GetType(String))
                    .Add("REVISION", GetType(Integer))
                End With
                dt.AcceptChanges()

                Dim row As DataRow
                row = dt.NewRow()
                row("CHARGE_ID") = UCase(item.ChargeId)
                row("DESCRIPTION") = item.Description
                row("CHARGE_ID_TYPE") = CType(item.cIDType, EnumChargeType).ToString
                row("STATUS") = item.Status
                row("UPDATED_DATE") = DateAndTime.Now
                row("UPDATED_BY") = Me.UserName
                row("REVISION") = revision
                dt.Rows.Add(row)
                dt.AcceptChanges()

                ds.Tables.Add(dt)
            Else
                SQL = "SELECT revision FROM AM_CHARGE_ID_LIB WHERE CHARGE_ID = '" & item.ChargeId & "'"
                revision = Me.GetRevisionNumber(SQL)

                SQL = "UPDATE AM_CHARGE_ID_LIB " & _
                      "SET description = '" & item.Description & "',charge_id_type = '" & item.cIDType.ToString() & "', " & _
                      "status =" & item.Status & ", revision = " & revision & ", updated_by = '" & Me.UserName & "', " & _
                      "updated_date = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE charge_id = '" & item.ChargeId & "'"

                listSQL.Add(SQL)
            End If

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Collection"
    Public Sub SaveCollection(ByRef CollectionItem As Collection)
        Dim listSQL As New List(Of String)
        Dim SQL As String
        Dim report As New DataReport
        Dim ds As New DataSet

        Try
            

            'DataTable for AM_COLLECTION
            Dim dtCollection As New DataTable
            dtCollection.TableName = "AM_COLLECTION"
            With dtCollection.Columns
                .Add("COLLECTION_NO", GetType(Long))
                .Add("COLLECTION_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("COLLECTED_AMOUNT", GetType(Decimal))
                .Add("COLLECTED_PRUDENTIAL", GetType(Decimal))
                .Add("COLLECTED_HELD", GetType(Decimal))
                .Add("ALLOCATION_TYPE", GetType(Integer))
                .Add("COLLECTION_CATEGORY", GetType(Integer))
                .Add("DAILY_BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("OR_NO", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtCollection.AcceptChanges()

            'Datatable for AM_OFFICIAL_RECEIPT_MAIN
            Dim dtOR As New DataTable
            dtOR.TableName = "AM_OFFICIAL_RECEIPT_MAIN"
            With dtOR.Columns
                .Add("OR_NO", GetType(Long))
                .Add("OR_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_AMOUNT", GetType(Decimal))
                .Add("VATABLE", GetType(Decimal))
                .Add("STATUS", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtOR.AcceptChanges()

            Dim rowCol = dtCollection.NewRow()
            Dim rowOR = dtOR.NewRow()

            With CollectionItem
                If .CollectionNumber = 0 Then
                    .CollectionNumber = Me.GetSequenceID("SEQ_AM_COL_NO")
                    .ORNo = Me.GetSequenceID("SEQ_AM_OR_NO")
                Else
                    SQL = "DELETE FROM AM_COLLECTION WHERE COLLECTION_NO = " & .CollectionNumber
                    listSQL.Add(SQL)

                    SQL = "DELETE FROM AM_OFFICIAL_RECEIPT_MAIN WHERE OR_NO = " & .ORNo
                    listSQL.Add(SQL)
                End If

                rowCol("COLLECTION_NO") = .CollectionNumber
                rowCol("COLLECTION_DATE") = .CollectionDate
                rowCol("ID_NUMBER") = .IDNumber
                rowCol("COLLECTED_AMOUNT") = .CollectedAmount
                rowCol("COLLECTED_PRUDENTIAL") = .CollectedPrudential
                rowCol("COLLECTED_HELD") = .CollectedHeld
                rowCol("ALLOCATION_TYPE") = .AllocationType
                rowCol("COLLECTION_CATEGORY") = .CollectionCategory
                rowCol("DAILY_BATCH_CODE") = .DailyBatchCode
                rowCol("STATUS") = .Status
                rowCol("OR_NO") = .ORNo
                rowCol("UPDATED_BY") = Me.UserName

                rowOR("OR_NO") = .ORNo
                rowOR("OR_DATE") = .CollectionDate
                rowOR("ID_NUMBER") = .IDNumber
                rowOR("OR_AMOUNT") = Math.Abs(.CollectedAmount)
                rowOR("VATABLE") = Math.Abs(.CollectedAmount)
                rowOR("STATUS") = CInt(If(.Status = EnumCollectionStatus.Cancelled, 0, 1))
                rowOR("UPDATED_BY") = Me.UserName
            End With

            dtCollection.Rows.Add(rowCol)
            dtCollection.AcceptChanges()

            dtOR.Rows.Add(rowOR)
            dtOR.AcceptChanges()

            ds.Tables.Add(dtCollection)
            ds.Tables.Add(dtOR)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub SaveCollection(ByVal CollectionItem As Collection, ByVal itemJV As JournalVoucher, ByVal itemGPosted As WESMBillGPPosted)
        Dim listSQL As New List(Of String)
        Dim SQL As String
        Dim report As New DataReport
        Dim ds As New DataSet

        Try
            

            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            If itemJV.JVNumber <> 0 Then
                'Get the batch code
                Dim batchCode = EnumPostedType.DCC.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

                SQL = "UPDATE AM_COLLECTION SET STATUS = " & EnumCollectionStatus.Cancelled & ", ALLOCATION_DATE = NULL, " & _
                      "BATCH_CODE = '" & batchCode & "', UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE COLLECTION_NO = " & CollectionItem.CollectionNumber
                listSQL.Add(SQL)

                'Get the journal voucher no
                Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")

                With itemJV
                    Dim row As DataRow
                    row = dtGPPosted.NewRow()

                    row = dtJV.NewRow()
                    row("AM_JV_NO") = jvNo
                    row("BATCH_CODE") = batchCode
                    row("STATUS") = 1
                    row("PREPARED_BY") = Me.UserName
                    row("CHECKED_BY") = .CheckedBy
                    row("APPROVED_BY") = .ApprovedBy
                    row("UPDATED_BY") = Me.UserName
                    row("POSTED_TYPE") = .PostedType
                    dtJV.Rows.Add(row)

                    'Data for Journal Voucher Details (Debit)
                    For Each item In itemJV.JVDetails
                        row = dtJVDetails.NewRow()
                        row("AM_JV_NO") = jvNo
                        row("ACCT_CODE") = item.AccountCode
                        row("DEBIT") = item.Debit
                        row("CREDIT") = item.Credit
                        row("UPDATED_BY") = Me.UserName
                        dtJVDetails.Rows.Add(row)
                    Next
                    dtJVDetails.AcceptChanges()
                End With
                dtJV.AcceptChanges()

                'Data for WESM Bill GP Posted
                With itemGPosted
                    Dim row As DataRow
                    row = dtGPPosted.NewRow()
                    row("DOCUMENT_AMOUNT") = .DocumentAmount
                    row("REMARKS") = "Deleted OR Number " & CollectionItem.ORNo.ToString() & "."
                    row("POSTED") = 0
                    row("UPDATED_BY") = Me.UserName
                    row("BATCH_CODE") = batchCode
                    row("POSTED_TYPE") = .PostType
                    row("AM_JV_NO") = jvNo
                    dtGPPosted.Rows.Add(row)
                End With
                dtGPPosted.AcceptChanges()
            Else
                SQL = "UPDATE AM_COLLECTION SET STATUS = " & EnumCollectionStatus.Cancelled & ", ALLOCATION_DATE = NULL, " & _
                     "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                     "WHERE COLLECTION_NO = " & CollectionItem.CollectionNumber
                listSQL.Add(SQL)
            End If

            With CollectionItem
                SQL = "UPDATE AM_OFFICIAL_RECEIPT_MAIN SET STATUS = " & EnumStatus.InActive & ", " & _
                      "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE OR_NO = " & .ORNo
                listSQL.Add(SQL)

                SQL = "DELETE AM_OFFICIAL_RECEIPT_DETAILS " & _
                      "WHERE OR_NO = " & .ORNo
                listSQL.Add(SQL)
            End With

            With ds.Tables
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
            End With

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "UnTag Cash Collection"
    Public Sub UnTagCashCollection(ByVal CollectionItem As Collection, _
                                   ByVal listWESMBillSummaryHistory As List(Of WESMBillSummaryHistory), _
                                   ByVal listCollectionMonitoring As List(Of CollectionMonitoring))
        Dim listSQL As New List(Of String)
        Dim SQL As String
        Dim report As New DataReport
        Dim ds As New DataSet

        Try


            With CollectionItem

                'If its Held Collection and No Collected Amount
                If .CollectedAmount = 0 And .CollectedHeld > 0 Then
                    SQL = "UPDATE AM_COLLECTION SET STATUS = " & EnumCollectionStatus.Cancelled & ", " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE COLLECTION_NO = " & .CollectionNumber
                    listSQL.Add(SQL)

                Else
                    SQL = "UPDATE AM_COLLECTION SET ALLOCATION_DATE = NULL, STATUS = " & EnumCollectionStatus.NotAllocated & ", " & _
                          "COLLECTED_HELD = 0, COLLECTED_PRUDENTIAL = 0, ALLOCATION_TYPE = " & EnumAllocationType.Automatic & ", " & _
                          "UPDATED_BY = '" & Me.UserName & "', " & _
                          "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE COLLECTION_NO = " & .CollectionNumber
                    listSQL.Add(SQL)

                    SQL = "UPDATE AM_OFFICIAL_RECEIPT_MAIN " & _
                      "SET OR_AMOUNT = " & .CollectedAmount & ", VAT_EXEMPT = " & .CollectedAmount & ", " & _
                      "VATABLE = 0, VAT = 0, VAT_ZERO_RATED = 0, OTHERS = 0, WITHHOLDING_TAX = 0, WITHHOLDING_VAT = 0, " & _
                      "UPDATED_BY = '" & Me.UserName & "', " & _
                      "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE OR_NO = " & .ORNo
                    listSQL.Add(SQL)

                End If

                SQL = "UPDATE AM_COLLECTION_MONITORING " & _
                      "SET COLLECTION_NO_TAG = 0, UPDATED_BY = '" & Me.UserName & "', " & _
                      "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE COLLECTION_NO_TAG = " & .CollectionNumber
                listSQL.Add(SQL)

                SQL = "DELETE AM_OFFICIAL_RECEIPT_DETAILS " & _
                      "WHERE OR_NO = " & .ORNo
                listSQL.Add(SQL)

                SQL = "DELETE AM_OFFICIAL_RECEIPT_SUMMARY " & _
                      "WHERE OR_NO = " & .ORNo
                listSQL.Add(SQL)

                SQL = "DELETE FROM AM_COLLECTION_MONITORING " & _
                      "WHERE COLLECTION_NO = " & .CollectionNumber
                listSQL.Add(SQL)

                SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY " & _
                      "WHERE OR_NO = " & .ORNo
                listSQL.Add(SQL)

                'Added by lance as of 05/09/2020 to fix the bug found for untagging collection with PR Replenishment where the PR original balance not restored correctly
                Dim getPRReplenishmentAmount As Decimal = (From x In listCollectionMonitoring Where x.TransType = EnumCollectionMonitoringType.TransferToPRReplenishment Select x.Amount).Sum()

                If getPRReplenishmentAmount <> 0 Then
                    SQL = "UPDATE AM_PRUDENTIAL SET PRUDENTIAL_AMOUNT = PRUDENTIAL_AMOUNT - " & getPRReplenishmentAmount & ", " & _
                     "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                     "WHERE ID_NUMBER = '" & .IDNumber & "'"
                    listSQL.Add(SQL)
                End If
                
            End With

            If CollectionItem.ListOfCollectionAllocation.Count > 0 Then
                SQL = "DELETE AM_COLLECTION_ALLOCATION WHERE collection_no = " & CollectionItem.CollectionNumber
                listSQL.Add(SQL)

                'Update the status of DMCM
                Dim listDMCM = From x In CollectionItem.ListOfCollectionAllocation _
                               Where x.DMCMNumber <> 0 _
                               Select x.DMCMNumber Distinct

                For Each item In listDMCM
                    SQL = "UPDATE AM_DMCM SET STATUS = " & EnumStatus.InActive & ", " & _
                          "PARTICULARS = CONCAT(PARTICULARS,' (Untagged from OR No. " & CollectionItem.ORNo.ToString() & ")')," & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE AM_DMCM_NO = " & item
                    listSQL.Add(SQL)
                Next
            End If

            If listWESMBillSummaryHistory.Count > 0 Then

                'Update the New DueDate of WESM Bill Summary if deleted
                Dim listDueDates = From x In listWESMBillSummaryHistory Group x By _
                                   x.WESMBillSummaryNo Into _
                                   DueDate = Min(x.DueDate) _
                                   Select New WESMBillSummaryHistory With _
                                          {.WESMBillSummaryNo = WESMBillSummaryNo, .DueDate = DueDate}

                For Each item In listDueDates
                    SQL = "UPDATE AM_WESM_BILL_SUMMARY SET NEW_DUEDATE = TO_DATE('" & item.DueDate & "','MM/DD/YYYY'), " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & item.WESMBillSummaryNo
                    listSQL.Add(SQL)
                Next



                'Update the Ending Balance of WESM Bill Summary if deleted
                Dim listEndingBalances = From x In listWESMBillSummaryHistory _
                                         Where x.CollectionType = EnumCollectionType.MarketFees _
                                         Or x.CollectionType = EnumCollectionType.VatOnMarketFees _
                                         Or x.CollectionType = EnumCollectionType.Energy _
                                         Or x.CollectionType = EnumCollectionType.VatOnEnergy _
                                         Group x By _
                                         x.WESMBillSummaryNo Into _
                                         Amount = Sum(x.Amount) _
                                         Select New WESMBillSummaryHistory With _
                                                 {.WESMBillSummaryNo = WESMBillSummaryNo, .Amount = Amount}

                For Each item In listEndingBalances
                    SQL = "UPDATE AM_WESM_BILL_SUMMARY SET ENDING_BALANCE = ENDING_BALANCE - " & item.Amount & ", " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & item.WESMBillSummaryNo
                    listSQL.Add(SQL)
                Next


                'Update Energy Withhold Status of WESM Bill Summary
                Dim listEnergyWithhold = From x In listWESMBillSummaryHistory _
                                         Where x.CollectionType = EnumCollectionType.WithholdingTaxonEnergy _
                                         Group x By _
                                         x.WESMBillSummaryNo Into _
                                         Amount = Sum(x.Amount) _
                                         Select New WESMBillSummaryHistory With _
                                                {.WESMBillSummaryNo = WESMBillSummaryNo, .Amount = Amount}

                For Each item In listEnergyWithhold
                    SQL = "UPDATE AM_WESM_BILL_SUMMARY SET ENERGY_WITHHOLD_STATUS = " & EnumEnergyWithholdStatus.UnpaidEWT & ", " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & item.WESMBillSummaryNo
                    listSQL.Add(SQL)
                Next

                'Update the status of WESM Bill Summary History into In-Active
                SQL = "UPDATE AM_WESM_BILL_SUMMARY_HISTORY SET STATUS = " & EnumStatus.InActive & ", " & _
                      "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE collection_no = " & CollectionItem.CollectionNumber & " " & _
                      "AND status = " & EnumStatus.Active
                listSQL.Add(SQL)
            End If

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "UnTag Drawdown"
    Public Sub UnTagDrawdown(ByVal CollectionItem As Collection, _
                             ByVal listWESMBillSummaryHistory As List(Of WESMBillSummaryHistory))
        Dim listSQL As New List(Of String)
        Dim SQL As String
        Dim report As New DataReport
        Dim ds As New DataSet

        Try
            

            With CollectionItem
                SQL = "UPDATE AM_COLLECTION SET STATUS = " & EnumCollectionStatus.Cancelled & ", " & _
                      "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE COLLECTION_NO = " & .CollectionNumber
                listSQL.Add(SQL)

                SQL = "UPDATE AM_DMCM SET STATUS = " & EnumStatus.InActive & ", " & _
                      "PARTICULARS = CONCAT(PARTICULARS,' (Untagged Drawdown )')," & _
                      "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE AM_DMCM_NO = " & .DMCMNumber
                listSQL.Add(SQL)

                SQL = "UPDATE AM_PRUDENTIAL SET PRUDENTIAL_AMOUNT = PRUDENTIAL_AMOUNT + " & .CollectedAmount & ", " & _
                      "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE ID_NUMBER = '" & .IDNumber & "'"
                listSQL.Add(SQL)

                SQL = "UPDATE AM_COLLECTION_MONITORING " & _
                      "SET STATUS = " & EnumStatus.InActive & ", UPDATED_BY = '" & Me.UserName & "', " & _
                      "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE COLLECTION_NO = " & .CollectionNumber & " AND STATUS = " & EnumStatus.Active
                listSQL.Add(SQL)

                SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY " & _
                      "WHERE AM_DMCM_NO = " & .DMCMNumber
                listSQL.Add(SQL)
            End With

            If CollectionItem.ListOfCollectionAllocation.Count > 0 Then
                'Update the status of collection allocation into In-Active
                SQL = "UPDATE AM_COLLECTION_ALLOCATION SET STATUS = " & EnumStatus.InActive & ", " & _
                      "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE collection_no = " & CollectionItem.CollectionNumber
                listSQL.Add(SQL)


                'Update the status of DMCM
                Dim listDMCM = From x In CollectionItem.ListOfCollectionAllocation _
                                Where x.DMCMNumber <> 0 _
                                Select x.DMCMNumber Distinct

                For Each item In listDMCM
                    SQL = "UPDATE AM_DMCM SET STATUS = " & EnumStatus.InActive & ", " & _
                          "PARTICULARS = CONCAT(PARTICULARS,' (Untagged from DMCM No. " & CollectionItem.DMCMNumber.ToString() & ")')," & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE AM_DMCM_NO = " & item
                    listSQL.Add(SQL)
                Next
            End If

            If listWESMBillSummaryHistory.Count > 0 Then
                'Update the New DueDate of WESM Bill Summary if deleted
                Dim listDueDates = From x In listWESMBillSummaryHistory Group x By _
                                   x.WESMBillSummaryNo Into _
                                   DueDate = Min(x.DueDate) _
                                   Select New WESMBillSummaryHistory With _
                                          {.WESMBillSummaryNo = WESMBillSummaryNo, .DueDate = DueDate}

                For Each item In listDueDates
                    SQL = "UPDATE AM_WESM_BILL_SUMMARY SET NEW_DUEDATE = TO_DATE('" & item.DueDate & "','MM/DD/YYYY'), " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & item.WESMBillSummaryNo
                    listSQL.Add(SQL)
                Next

                'Update the Ending Balance of WESM Bill Summary if deleted
                Dim listEndingBalances = From x In listWESMBillSummaryHistory _
                                         Where x.CollectionType = EnumCollectionType.MarketFees _
                                         Or x.CollectionType = EnumCollectionType.VatOnMarketFees _
                                         Or x.CollectionType = EnumCollectionType.Energy _
                                         Or x.CollectionType = EnumCollectionType.VatOnEnergy _
                                         Group x By _
                                         x.WESMBillSummaryNo Into _
                                         Amount = Sum(x.Amount) _
                                         Select New WESMBillSummaryHistory With _
                                                 {.WESMBillSummaryNo = WESMBillSummaryNo, .Amount = Amount}

                For Each item In listEndingBalances
                    SQL = "UPDATE AM_WESM_BILL_SUMMARY SET ENDING_BALANCE = ENDING_BALANCE - " & item.Amount & ", " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & item.WESMBillSummaryNo
                    listSQL.Add(SQL)
                Next

                'Update the status of WESM Bill Summary History into In-Active
                SQL = "UPDATE AM_WESM_BILL_SUMMARY_HISTORY SET STATUS = " & EnumStatus.InActive & ", " & _
                      "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE collection_no = " & CollectionItem.CollectionNumber & " " & _
                      "AND status = " & EnumStatus.Active
                listSQL.Add(SQL)
            End If

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Collection Allocation"
    Public Sub SaveCollectionAllocations(ByVal ListWESMBillSummaries As List(Of WESMBillSummary), _
                                         ByVal ListCollections As List(Of Collection), _
                                         ByVal ListCollectionMonitoring As List(Of CollectionMonitoring), _
                                         ByVal ListPrudential As List(Of Prudential), _
                                         ByVal ListPrudentialHistory As List(Of PrudentialHistory), _
                                         ByVal ListFTF As List(Of FundTransferFormMain), _
                                         ByVal itemJVCollection As JournalVoucher, _
                                         ByVal itemGPCollection As WESMBillGPPosted, _
                                         ByVal listDMCMSetUp As List(Of DebitCreditMemo), _
                                         ByVal listDMCMDrawdown As List(Of DebitCreditMemo), _
                                         ByVal listOR As List(Of OfficialReceiptMain), _
                                         ByVal listEFT As List(Of EFT))
        Dim dicCollectionNumber As New Dictionary(Of Long, Long)
        Dim dicORNumber As New Dictionary(Of Long, Long)
        Dim dicDMCMNo As New Dictionary(Of Long, Long)
        Dim dicDMCMNoPR As New Dictionary(Of Long, Long)
        Dim listSQL As New List(Of String)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim row As DataRow
        Dim SQL As String
        Dim batchCode As String
        Dim jvNo As Long

        Try
            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("AM_JV_DATE", GetType(Date))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'DataTable for AM_PRUDENTIAL_HISTORY
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"
            With dtPRHistory.Columns
                .Add("OR_NO", GetType(Long))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            'DataTable for AM_COLLECTION
            Dim dtCollection As New DataTable
            dtCollection.TableName = "AM_COLLECTION"
            With dtCollection.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("COLLECTION_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("COLLECTED_AMOUNT", GetType(Decimal))
                .Add("COLLECTED_HELD", GetType(Decimal))
                .Add("ALLOCATION_TYPE", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("OR_NO", GetType(Long))
                .Add("COLLECTION_CATEGORY", GetType(Integer))
                .Add("IS_POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtCollection.AcceptChanges()

            'DataTable for AM_COLLECTION_ALLOCATION
            Dim dtCollectionAlloc As New DataTable
            dtCollectionAlloc.TableName = "AM_COLLECTION_ALLOCATION"
            With dtCollectionAlloc.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("DUE_DATE", GetType(Date))
                .Add("ENDING_BALANCE", GetType(Decimal))
                .Add("NEW_ENDING_BALANCE", GetType(Decimal))
                .Add("NEW_DUEDATE", GetType(Date))
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("COLLECTION_TYPE", GetType(Integer))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("STATUS", GetType(Integer))
                .Add("AM_DMCM_NO", GetType(String))
                .Add("AM_REF_NO", GetType(String))
                .Add("AM_REF_TYPE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("ENERGY_WITHHOLD", GetType(Decimal)) 'added by lance 05/23/2020
            End With
            dtCollectionAlloc.AcceptChanges()

            'DataTable for AM_COLLECTION_MONITORING
            Dim dtColMonitoring As New DataTable
            dtColMonitoring.TableName = "AM_COLLECTION_MONITORING"
            With dtColMonitoring.Columns
                .Add("COL_MON_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("COLLECTION_NO_TAG", GetType(Long))
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("ALLOCATION_TYPE", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_NO", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtColMonitoring.AcceptChanges()

            'DataTable for AM_FTF_MAIN
            Dim dtFTFMain As New DataTable
            dtFTFMain.TableName = "AM_FTF_MAIN"
            With dtFTFMain.Columns
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("REF_NO", GetType(Long))
                .Add("TOTAL_AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("REQUESTING_APPROVAL", GetType(String))
                .Add("APPROVED_BY", GetType(String))
            End With
            dtFTFMain.AcceptChanges()

            'DataTable for AM_FTF_PARTICIPANT
            Dim dtFTFParticipant As New DataTable
            dtFTFParticipant.TableName = "AM_FTF_PARTICIPANT"
            With dtFTFParticipant.Columns
                .Add("REF_NO", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtFTFParticipant.AcceptChanges()

            'DataTable for AM_FTF_DETAILS
            Dim dtFTFDetails As New DataTable
            dtFTFDetails.TableName = "AM_FTF_DETAILS"
            With dtFTFDetails.Columns
                .Add("REF_NO", GetType(Long))
                .Add("BANK_ACCNT_NO", GetType(String))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtFTFDetails.AcceptChanges()

            Dim dtDMCM As New DataTable
            dtDMCM.TableName = "AM_DMCM"
            With dtDMCM.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("AM_JV_NO", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("PARTICULARS", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("EWT", GetType(Decimal))
                .Add("EWV", GetType(Decimal))
                .Add("VATABLE", GetType(Decimal))
                .Add("VAT", GetType(Decimal))
                .Add("VAT_EXEMPT", GetType(Decimal))
                .Add("VAT_ZERO_RATED", GetType(Decimal))
                .Add("OTHERS", GetType(Decimal))
                .Add("TOTAL_AMOUNT_DUE", GetType(Decimal))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCM.AcceptChanges()

            Dim dtDMCMDetails As New DataTable
            dtDMCMDetails.TableName = "AM_DMCM_DETAILS"
            With dtDMCMDetails.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(String))
                .Add("CREDIT", GetType(String))
                .Add("INV_DM_CM", GetType(String))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCMDetails.AcceptChanges()

            Dim dtORDetails As New DataTable
            dtORDetails.TableName = "AM_OFFICIAL_RECEIPT_DETAILS"
            With dtORDetails.Columns
                .Add("OR_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DESCRIPTION", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtORDetails.AcceptChanges()

            Dim dtORSummary As New DataTable
            dtORSummary.TableName = "AM_OFFICIAL_RECEIPT_SUMMARY"
            With dtORSummary.Columns
                .Add("OR_NO", GetType(Long))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("DUE_DATE", GetType(Date))
                .Add("AMOUNT", GetType(Decimal))
                .Add("COLLECTION_TYPE", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtORSummary.AcceptChanges()

            'Dim dtEFT As New DataTable
            'dtEFT.TableName = "AM_PEMC_PAYMENT"
            'With dtEFT.Columns
            '    .Add("ALLOCATION_DATE", GetType(Date))
            '    .Add("ID_NUMBER", GetType(String))
            '    .Add("PAYMENT_TYPE", GetType(Integer))
            '    .Add("EXCESS_COLLECTION", GetType(Decimal))
            '    .Add("UPDATED_BY", GetType(String))
            'End With
            'dtEFT.AcceptChanges()

            Dim dtWESMBillSummaryHistory As New DataTable
            dtWESMBillSummaryHistory.TableName = "AM_WESM_BILL_SUMMARY_HISTORY"
            With dtWESMBillSummaryHistory.Columns
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("DUE_DATE", GetType(Date))
                .Add("AMOUNT", GetType(Decimal))
                .Add("COLLECTION_TYPE", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMBillSummaryHistory.AcceptChanges()

            

            'Get the batch code
            batchCode = EnumPostedType.C.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'Data Journal Voucher
            jvNo = Me.GetSequenceID("SEQ_AM_JV_NO")

            For Each item In ListWESMBillSummaries
                With item
                    SQL = "UPDATE AM_WESM_BILL_SUMMARY " & _
                          "SET ENDING_BALANCE = " & .EndingBalance & ", IS_MFWTAX_DEDUCTED = " & .IsMFWTaxDeducted & _
                          ",NEW_DUEDATE = TO_DATE('" & .NewDueDate & "','MM/DD/YYYY'), " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & .WESMBillSummaryNo
                    listSQL.Add(SQL)
                End With
            Next

            For Each item In ListCollections
                With item
                    If item.CollectionCategory = EnumCollectionCategory.Cash Then
                        SQL = "UPDATE AM_COLLECTION " & _
                              "SET BATCH_CODE = '" & batchCode & "',  STATUS = " & .Status & ", " & _
                              "COLLECTED_HELD = " & .CollectedHeld & ", " & _
                              "IS_POSTED = " & .IsPosted & ", UPDATED_BY = '" & Me.UserName & "', " & _
                              "ALLOCATION_DATE = TO_DATE('" & .AllocationDate & "','MM/DD/YYYY'), " & _
                              "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE COLLECTION_NO = " & .CollectionNumber
                        listSQL.Add(SQL)
                    Else
                        If Not dicCollectionNumber.ContainsKey(item.CollectionNumber) Then
                            dicCollectionNumber.Add(item.CollectionNumber, Me.GetSequenceID("SEQ_AM_COL_NO"))
                        End If
                    End If
                End With
            Next

            For Each item In ListPrudential
                With item
                    If .PrudentialAmount <> 0 Then
                        'Check first if it has existing Prudential
                        Dim itemPR = Me.GetParticipantPrudential(.IDNumber)

                        If itemPR.IDNumber = "" Then
                            SQL = "INSERT INTO AM_PRUDENTIAL (ID_NUMBER, PRUDENTIAL_AMOUNT, UPDATED_BY) VALUES ('" & _
                                  .IDNumber & "'," & .PrudentialAmount & ",'" & Me.UserName & "')"
                            listSQL.Add(SQL)
                        Else
                            SQL = "UPDATE AM_PRUDENTIAL SET PRUDENTIAL_AMOUNT = PRUDENTIAL_AMOUNT + " & .PrudentialAmount & ", " & _
                                  "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                                  "WHERE id_number = '" & .IDNumber & "'"
                            listSQL.Add(SQL)
                        End If
                    End If
                End With
            Next

            If listDMCMSetUp.Count > 0 Then
                For Each itemDMCM In listDMCMSetUp
                    'Get the DMCM No
                    Dim DMCMNo = Me.GetSequenceID("SEQ_AM_DMCM_NO")
                    dicDMCMNo.Add(itemDMCM.DMCMNumber, DMCMNo)

                    With itemDMCM
                        row = dtDMCM.NewRow()
                        row("AM_DMCM_NO") = DMCMNo
                        row("AM_JV_NO") = jvNo
                        row("ID_NUMBER") = .IDNumber
                        row("PARTICULARS") = .Particulars
                        row("CHARGE_TYPE") = .ChargeType.ToString()
                        row("TRANS_TYPE") = .TransType
                        row("EWT") = .EWT
                        row("EWV") = .EWV
                        row("VATABLE") = .Vatable
                        row("VAT") = .VAT
                        row("VAT_EXEMPT") = .VATExempt
                        row("VAT_ZERO_RATED") = .VatZeroRated
                        row("OTHERS") = .Others
                        row("TOTAL_AMOUNT_DUE") = .TotalAmountDue
                        row("PREPARED_BY") = Me.UserName
                        row("CHECKED_BY") = .CheckedBy
                        row("APPROVED_BY") = .ApprovedBy
                        row("UPDATED_BY") = Me.UserName
                        dtDMCM.Rows.Add(row)
                    End With

                    'Data for DMCM Details
                    For Each itemDMCMDetails In itemDMCM.DMCMDetails
                        With itemDMCMDetails
                            row = dtDMCMDetails.NewRow()
                            row("AM_DMCM_NO") = DMCMNo
                            row("ACCT_CODE") = .AccountCode
                            row("DEBIT") = .Debit
                            row("CREDIT") = .Credit
                            row("INV_DM_CM") = .InvDMCMNo
                            row("SUMMARY_TYPE") = .SummaryType
                            row("ID_NUMBER") = .IDNumber.IDNumber
                            row("UPDATED_BY") = Me.UserName
                            dtDMCMDetails.Rows.Add(row)
                        End With
                    Next
                    dtDMCMDetails.AcceptChanges()
                Next
                dtDMCM.AcceptChanges()
            End If

            For Each item In ListCollections
                Dim colNumber As Long = 0

                If item.CollectionCategory = EnumCollectionCategory.Cash Then
                    colNumber = item.CollectionNumber
                Else
                    colNumber = dicCollectionNumber(item.CollectionNumber)
                    item.CollectionNumber = colNumber

                    Dim colDMCMNo As Long = item.DMCMNumber
                    Dim DMCMNo As Long = Me.GetSequenceID("SEQ_AM_DMCM_NO")

                    dicDMCMNoPR.Add(colDMCMNo, DMCMNo)
                    item.DMCMNumber = DMCMNo

                    Dim rowCol = dtCollection.NewRow()
                    With item
                        rowCol("AM_DMCM_NO") = DMCMNo
                        rowCol("BATCH_CODE") = batchCode
                        rowCol("COLLECTION_NO") = colNumber
                        rowCol("COLLECTION_DATE") = .CollectionDate
                        rowCol("ALLOCATION_DATE") = .AllocationDate
                        rowCol("ID_NUMBER") = .IDNumber
                        rowCol("COLLECTED_AMOUNT") = .CollectedAmount
                        rowCol("COLLECTED_HELD") = .CollectedHeld
                        rowCol("ALLOCATION_TYPE") = .AllocationType
                        rowCol("STATUS") = .Status
                        rowCol("OR_NO") = .ORNo
                        rowCol("COLLECTION_CATEGORY") = .CollectionCategory
                        rowCol("IS_POSTED") = .IsPosted
                        rowCol("UPDATED_BY") = Me.UserName
                        dtCollection.Rows.Add(rowCol)
                    End With
                    dtCollection.AcceptChanges()
                End If

                For Each itemAlloc In item.ListOfCollectionAllocation
                    row = dtCollectionAlloc.NewRow()

                    With itemAlloc
                        'Get the DMCM No
                        Dim DMCMNo As Long = 0
                        If .DMCMNumber <> 0 Then
                            DMCMNo = dicDMCMNo(.DMCMNumber)
                        End If

                        row("COLLECTION_NO") = colNumber
                        row("BILLING_PERIOD") = .BillingPeriod
                        row("AMOUNT") = .Amount
                        row("DUE_DATE") = .DueDate
                        row("ENDING_BALANCE") = .EndingBalance
                        row("NEW_ENDING_BALANCE") = .NewEndingBalance
                        row("NEW_DUEDATE") = .NewDueDate
                        row("ALLOCATION_DATE") = .AllocationDate
                        row("COLLECTION_TYPE") = .CollectionType
                        row("STATUS") = .Status
                        row("WESMBILL_SUMMARY_NO") = .WESMBillSummaryNo.WESMBillSummaryNo
                        row("UPDATED_BY") = Me.UserName
                        row("AM_DMCM_NO") = DMCMNo
                        row("AM_REF_TYPE") = .ReferenceType.ToString()

                        row("ENERGY_WITHHOLD") = .WESMBillSummaryNo.EnergyWithhold

                        If .IsDMCMChanged = 1 Then
                            row("AM_REF_NO") = dicDMCMNo(CLng(.ReferenceNumber))
                        Else
                            row("AM_REF_NO") = .ReferenceNumber
                        End If
                    End With
                    dtCollectionAlloc.Rows.Add(row)
                Next
                dtCollectionAlloc.AcceptChanges()

                For Each itemAlloc In item.ListOfCollectionAllocation
                    row = dtWESMBillSummaryHistory.NewRow()
                    With itemAlloc
                        row("WESMBILL_SUMMARY_NO") = .WESMBillSummaryNo.WESMBillSummaryNo
                        row("COLLECTION_NO") = colNumber

                        If .CollectionType = EnumCollectionType.DefaultInterestOnMF Or _
                           .CollectionType = EnumCollectionType.DefaultInterestOnVatOnMF Or _
                           .CollectionType = EnumCollectionType.WithholdingTaxOnDefaultInterest Or _
                           .CollectionType = EnumCollectionType.WithholdingVatOnDefaultInterest Or _
                           .CollectionType = EnumCollectionType.DefaultInterestOnEnergy Then

                            row("DUE_DATE") = .DueDate
                        Else
                            row("DUE_DATE") = .NewDueDate
                        End If

                        row("AMOUNT") = .Amount
                        row("COLLECTION_TYPE") = .CollectionType
                        row("UPDATED_BY") = UserName
                    End With
                    dtWESMBillSummaryHistory.Rows.Add(row)
                Next
                dtWESMBillSummaryHistory.AcceptChanges()
            Next

            With itemJVCollection
                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("AM_JV_DATE") = .JVDate
                row("BATCH_CODE") = batchCode
                row("STATUS") = .Status
                row("POSTED_TYPE") = .PostedType.ToString()
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                dtJV.Rows.Add(row)
            End With
            dtJV.AcceptChanges()

            'Data for Journal Voucher Details (Debit)
            For Each item In itemJVCollection.JVDetails
                With item
                    row = dtJVDetails.NewRow()
                    row("AM_JV_NO") = jvNo
                    row("ACCT_CODE") = .AccountCode
                    row("DEBIT") = .Debit
                    row("CREDIT") = .Credit
                    row("UPDATED_BY") = Me.UserName
                    dtJVDetails.Rows.Add(row)
                End With
            Next
            dtJVDetails.AcceptChanges()

            'Data for WESM Bill GP Posted
            With itemGPCollection
                row = dtGPPosted.NewRow()
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("REMARKS") = "To record collection application per batch " & batchCode & "."
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("AM_JV_NO") = jvNo
                dtGPPosted.Rows.Add(row)
            End With

            'Data for Prudential History
            For Each item In ListPrudentialHistory
                With item
                    'Get the DMCM No
                    Dim DMCMNo As Long = 0
                    If .DMCMNumber <> 0 Then
                        DMCMNo = dicDMCMNoPR(.DMCMNumber)
                    End If

                    row = dtPRHistory.NewRow()
                    row("OR_NO") = .ORNo
                    row("AM_DMCM_NO") = DMCMNo
                    row("BATCH_CODE") = batchCode
                    row("ID_NUMBER") = .IDNumber.IDNumber
                    row("AMOUNT") = .Amount
                    row("TRANS_TYPE") = .TransType
                    row("TRANS_DATE") = .TransDate
                    row("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(row)
                End With
            Next
            dtPRHistory.AcceptChanges()

            For Each item In ListCollectionMonitoring
                With item
                    If .Amount <> 0 Then

                        If .CollectionMonitoringNo <> 0 Then
                            SQL = "UPDATE AM_COLLECTION_MONITORING SET COLLECTION_NO_TAG =  " & .CollectionNoTag & ", " & _
                                  "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                                  "WHERE COL_MON_NO = " & .CollectionMonitoringNo
                            listSQL.Add(SQL)
                        Else
                            row = dtColMonitoring.NewRow()

                            If .TransType = EnumCollectionMonitoringType.TransferToPRDrawdown Then
                                .CollectionNo = dicCollectionNumber(.CollectionNo)
                            End If

                            row("COL_MON_NO") = Me.GetSequenceID("SEQ_AM_COL_MON_NO")
                            row("BATCH_CODE") = batchCode
                            row("COLLECTION_NO") = .CollectionNo
                            row("ALLOCATION_DATE") = .AllocationDate
                            row("ALLOCATION_TYPE") = .AllocationType
                            row("ID_NUMBER") = .IDNumber.IDNumber
                            row("OR_NO") = .ORNo
                            row("AMOUNT") = .Amount
                            row("TRANS_TYPE") = .TransType
                            row("STATUS") = .Status
                            row("UPDATED_BY") = Me.UserName
                            row("COLLECTION_NO_TAG") = .CollectionNoTag
                            dtColMonitoring.Rows.Add(row)
                        End If


                    End If
                End With
            Next
            dtColMonitoring.AcceptChanges()

            If listDMCMDrawdown.Count > 0 Then
                For Each itemDMCM In listDMCMDrawdown
                    'Get the DMCM No
                    Dim DMCMNo = dicDMCMNoPR(itemDMCM.DMCMNumber)

                    With itemDMCM
                        row = dtDMCM.NewRow()
                        row("AM_DMCM_NO") = DMCMNo
                        row("AM_JV_NO") = jvNo
                        row("ID_NUMBER") = .IDNumber
                        row("PARTICULARS") = .Particulars
                        row("CHARGE_TYPE") = .ChargeType.ToString()
                        row("TRANS_TYPE") = .TransType
                        row("EWT") = .EWT
                        row("EWV") = .EWV
                        row("VATABLE") = .Vatable
                        row("VAT") = .VAT
                        row("VAT_EXEMPT") = .VATExempt
                        row("VAT_ZERO_RATED") = .VatZeroRated
                        row("OTHERS") = .Others
                        row("TOTAL_AMOUNT_DUE") = .TotalAmountDue
                        row("PREPARED_BY") = Me.UserName
                        row("CHECKED_BY") = .CheckedBy
                        row("APPROVED_BY") = .ApprovedBy
                        row("UPDATED_BY") = Me.UserName
                        dtDMCM.Rows.Add(row)
                    End With

                    'Data for DMCM Details
                    For Each itemDMCMDetails In itemDMCM.DMCMDetails
                        With itemDMCMDetails
                            row = dtDMCMDetails.NewRow()
                            row("AM_DMCM_NO") = DMCMNo
                            row("ACCT_CODE") = .AccountCode
                            row("DEBIT") = .Debit
                            row("CREDIT") = .Credit
                            row("INV_DM_CM") = .InvDMCMNo
                            row("SUMMARY_TYPE") = .SummaryType
                            row("ID_NUMBER") = .IDNumber.IDNumber
                            row("UPDATED_BY") = Me.UserName
                            dtDMCMDetails.Rows.Add(row)
                        End With
                    Next
                    dtDMCMDetails.AcceptChanges()
                Next
                dtDMCM.AcceptChanges()
            End If

            If listOR.Count > 0 Then
                For Each itemOR In listOR
                    With itemOR
                        SQL = "UPDATE AM_OFFICIAL_RECEIPT_MAIN SET BATCH_CODE = '" & batchCode & "', " & _
                              "VAT_EXEMPT = " & .VATExempt & ", VATABLE = " & .Vatable & ", VAT = " & .VAT & "," & _
                              "VAT_ZERO_RATED = " & .VATZeroRated & ", OTHERS = " & .Others & ", WITHHOLDING_TAX = " & .WithholdingTax & ", " & _
                              "WITHHOLDING_VAT = " & .WithholdingVAT & ", " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE OR_NO = " & itemOR.ORNo
                        listSQL.Add(SQL)
                    End With

                    For Each itemORDetails In itemOR.ListORDetails
                        row = dtORDetails.NewRow()
                        With itemORDetails
                            row("OR_NO") = .ORNo
                            row("ACCT_CODE") = .AccountCode
                            row("DESCRIPTION") = .Description
                            row("DEBIT") = .Debit
                            row("CREDIT") = .Credit
                            row("UPDATED_BY") = Me.UserName

                            dtORDetails.Rows.Add(row)
                        End With
                    Next

                    For Each itemORSummary In itemOR.ListORSummary
                        Dim rowORSummary = dtORSummary.NewRow()
                        With itemORSummary
                            rowORSummary("OR_NO") = itemORSummary.ORNo
                            rowORSummary("WESMBILL_SUMMARY_NO") = itemORSummary.WESMBillSummaryNo
                            rowORSummary("DUE_DATE") = itemORSummary.DueDate
                            rowORSummary("AMOUNT") = itemORSummary.Amount
                            rowORSummary("COLLECTION_TYPE") = itemORSummary.CollectionType
                            rowORSummary("UPDATED_BY") = Me.UserName

                            dtORSummary.Rows.Add(rowORSummary)
                        End With
                    Next
                Next
            End If

            If ListFTF.Count > 0 Then
                For Each itemMain In ListFTF
                    Dim sequenceNo = Me.GetSequenceID("SEQ_AM_FTF_REF_NO")

                    Dim rowFTFMain = dtFTFMain.NewRow()
                    With itemMain
                        rowFTFMain("ALLOCATION_DATE") = .AllocationDate
                        rowFTFMain("REF_NO") = sequenceNo
                        rowFTFMain("TOTAL_AMOUNT") = .TotalAmount
                        rowFTFMain("TRANS_TYPE") = .TransType
                        rowFTFMain("BATCH_CODE") = batchCode
                        rowFTFMain("STATUS") = .Status
                        rowFTFMain("UPDATED_BY") = Me.UserName
                        rowFTFMain("REQUESTING_APPROVAL") = .RequestingApproval
                        rowFTFMain("APPROVED_BY") = .ApprovedBy
                        dtFTFMain.Rows.Add(rowFTFMain)
                        dtFTFMain.AcceptChanges()
                    End With

                    For Each itemParticipant In itemMain.ListOfFTFParticipants
                        Dim rowFTFParticipant = dtFTFParticipant.NewRow()
                        With itemParticipant
                            rowFTFParticipant("REF_NO") = sequenceNo
                            rowFTFParticipant("ID_NUMBER") = .IDNumber.IDNumber
                            rowFTFParticipant("AMOUNT") = .Amount
                            rowFTFParticipant("UPDATED_BY") = Me.UserName
                            dtFTFParticipant.Rows.Add(rowFTFParticipant)
                            dtFTFParticipant.AcceptChanges()
                        End With
                    Next

                    For Each itemDetails In itemMain.ListOfFTFDetails
                        Dim rowFTFDetails = dtFTFDetails.NewRow()
                        With itemDetails
                            rowFTFDetails("REF_NO") = sequenceNo
                            rowFTFDetails("BANK_ACCNT_NO") = .BankAccountNo
                            rowFTFDetails("ACCT_CODE") = .AccountCode
                            rowFTFDetails("DEBIT") = .Debit
                            rowFTFDetails("CREDIT") = .Credit
                            rowFTFDetails("UPDATED_BY") = Me.UserName
                            dtFTFDetails.Rows.Add(rowFTFDetails)
                            dtFTFDetails.AcceptChanges()
                        End With
                    Next
                Next
            End If

            'If listEFT.Count > 0 Then
            '    For Each itemEFT In listEFT
            '        With itemEFT
            '            row = dtEFT.NewRow()
            '            row("ALLOCATION_DATE") = .AllocationDate
            '            row("ID_NUMBER") = .Participant.IDNumber
            '            row("PAYMENT_TYPE") = .PaymentType
            '            row("EXCESS_COLLECTION") = .ExcessCollection
            '            row("UPDATED_BY") = Me.UserName
            '            dtEFT.Rows.Add(row)
            '        End With
            '    Next
            '    dtEFT.AcceptChanges()
            'End If

            With ds.Tables
                .Add(dtCollection)
                .Add(dtCollectionAlloc)
                .Add(dtWESMBillSummaryHistory)
                .Add(dtColMonitoring)
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
                .Add(dtPRHistory)
                .Add(dtFTFMain)
                .Add(dtDMCM)
                .Add(dtDMCMDetails)
                .Add(dtFTFParticipant)
                .Add(dtFTFDetails)
                .Add(dtORDetails)
                .Add(dtORSummary)
                '.Add(dtEFT)
            End With

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Collection with Collection Allocation"
    Public Sub SaveCollectionWithCollectionAllocation(ByVal ListWESMBillSummaries As List(Of WESMBillSummary), _
                                                      ByRef ListCollections As List(Of Collection), _
                                                      ByVal ListCollectionMonitoring As List(Of CollectionMonitoring), _
                                                      ByVal listOR As List(Of OfficialReceiptMain), _
                                                      ByVal itemPrudential As Prudential, _
                                                      ByVal ListPrudentialHistory As List(Of PrudentialHistory), _
                                                      ByVal listDMCMSetUp As List(Of DebitCreditMemo), _
                                                      ByVal listDMCMDrawdown As List(Of DebitCreditMemo), _
                                                      DoesExistPrudential As Boolean)
        Dim dicColNo As New Dictionary(Of Long, Long)
        Dim dicDMCMNo As New Dictionary(Of Long, Long)
        Dim listSQL As New List(Of String)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        Dim ORNumber As Long = 0
        Dim DMCMPRNo As Long = 0

        Try
            

            'DataTable for AM_COLLECTION
            Dim dtCollection As New DataTable
            dtCollection.TableName = "AM_COLLECTION"
            With dtCollection.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("COLLECTION_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("COLLECTED_AMOUNT", GetType(Decimal))
                .Add("COLLECTED_PRUDENTIAL", GetType(Decimal))
                .Add("COLLECTED_HELD", GetType(Decimal))
                .Add("COLLECTION_CATEGORY", GetType(Decimal))
                .Add("ALLOCATION_TYPE", GetType(Integer))
                .Add("DAILY_BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("OR_NO", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtCollection.AcceptChanges()

            'Datatable for AM_OFFICIAL_RECEIPT_MAIN
            Dim dtOR As New DataTable
            dtOR.TableName = "AM_OFFICIAL_RECEIPT_MAIN"
            With dtOR.Columns
                .Add("OR_NO", GetType(Long))
                .Add("OR_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_AMOUNT", GetType(Decimal))
                .Add("STATUS", GetType(Integer))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("VAT_EXEMPT", GetType(Decimal))
                .Add("VATABLE", GetType(Decimal))
                .Add("VAT", GetType(Decimal))
                .Add("VAT_ZERO_RATED", GetType(Decimal))
                .Add("OTHERS", GetType(Decimal))
                .Add("WITHHOLDING_TAX", GetType(Decimal))
                .Add("WITHHOLDING_VAT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtOR.AcceptChanges()

            Dim dtORDetails As New DataTable
            dtORDetails.TableName = "AM_OFFICIAL_RECEIPT_DETAILS"
            With dtORDetails.Columns
                .Add("OR_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DESCRIPTION", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtORDetails.AcceptChanges()

            Dim dtORSummary As New DataTable
            dtORSummary.TableName = "AM_OFFICIAL_RECEIPT_SUMMARY"
            With dtORSummary.Columns
                .Add("OR_NO", GetType(Long))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("DUE_DATE", GetType(Date))
                .Add("AMOUNT", GetType(Decimal))
                .Add("COLLECTION_TYPE", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtORSummary.AcceptChanges()

            'DataTable for AM_COLLECTION_ALLOCATION
            Dim dtCollectionAlloc As New DataTable
            dtCollectionAlloc.TableName = "AM_COLLECTION_ALLOCATION"
            With dtCollectionAlloc.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("DUE_DATE", GetType(Date))
                .Add("ENDING_BALANCE", GetType(Decimal))
                .Add("NEW_ENDING_BALANCE", GetType(Decimal))
                .Add("NEW_DUEDATE", GetType(Date))
                .Add("COLLECTION_TYPE", GetType(Integer))
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("STATUS", GetType(Integer))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("AM_REF_NO", GetType(String))
                .Add("AM_REF_TYPE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                'added by lance as of 06/05/2020 for historical purposes of CAP SUmmary Report
                .Add("ENERGY_WITHHOLD", GetType(Decimal))
                .Add("ID_NUMBER", GetType(String))
            End With
            dtCollectionAlloc.AcceptChanges()

            'DataTable for AM_PRUDENTIAL_HISTORY
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"
            With dtPRHistory.Columns
                .Add("OR_NO", GetType(Long))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            'DataTable for AM_COLLECTION_MONITORING
            Dim dtColMonitoring As New DataTable
            dtColMonitoring.TableName = "AM_COLLECTION_MONITORING"
            With dtColMonitoring.Columns
                .Add("COL_MON_NO", GetType(Long))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("ALLOCATION_TYPE", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_NO", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtColMonitoring.AcceptChanges()

            Dim dtDMCM As New DataTable
            dtDMCM.TableName = "AM_DMCM"
            With dtDMCM.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("AM_JV_NO", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("PARTICULARS", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("EWT", GetType(Decimal))
                .Add("EWV", GetType(Decimal))
                .Add("VATABLE", GetType(Decimal))
                .Add("VAT", GetType(Decimal))
                .Add("VAT_EXEMPT", GetType(Decimal))
                .Add("VAT_ZERO_RATED", GetType(Decimal))
                .Add("OTHERS", GetType(Decimal))
                .Add("TOTAL_AMOUNT_DUE", GetType(Decimal))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCM.AcceptChanges()

            Dim dtDMCMDetails As New DataTable
            dtDMCMDetails.TableName = "AM_DMCM_DETAILS"
            With dtDMCMDetails.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(String))
                .Add("CREDIT", GetType(String))
                .Add("INV_DM_CM", GetType(String))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("IS_COMPUTE", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCMDetails.AcceptChanges()

            Dim dtWESMBillSummaryHistory As New DataTable
            dtWESMBillSummaryHistory.TableName = "AM_WESM_BILL_SUMMARY_HISTORY"
            With dtWESMBillSummaryHistory.Columns
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("COLLECTION_NO", GetType(Long))
                .Add("DUE_DATE", GetType(Date))
                .Add("AMOUNT", GetType(Decimal))
                .Add("COLLECTION_TYPE", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMBillSummaryHistory.AcceptChanges()

            For Each item In ListWESMBillSummaries
                With item
                    If item.EndingBalance > 0 Then
                        Dim logs As String = "Error in saving " & item.WESMBillSummaryNo.ToString() & " " & _
                                             item.EndingBalance.ToString()

                        BFactory.SaveLogFile(logs)

                        Throw New ApplicationException("Ending balance becomes positive upon saving, contact administrator")
                    End If

                    SQL = "UPDATE AM_WESM_BILL_SUMMARY " & _
                          "SET ENDING_BALANCE = " & .EndingBalance & ", IS_MFWTAX_DEDUCTED = " & .IsMFWTaxDeducted & _
                          ",NEW_DUEDATE = TO_DATE('" & .NewDueDate & "','MM/DD/YYYY'), " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL), " & _
                          "ENERGY_WITHHOLD_STATUS = " & .EnergyWithholdStatus & " " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & .WESMBillSummaryNo
                    listSQL.Add(SQL)
                End With
            Next

            If itemPrudential.IDNumber.Length <> 0 Then
                If DoesExistPrudential Then
                    With itemPrudential
                        SQL = "UPDATE AM_PRUDENTIAL SET PRUDENTIAL_AMOUNT = " & .PrudentialAmount & ", " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE id_number = '" & .IDNumber & "'"
                        listSQL.Add(SQL)
                    End With
                Else
                    With itemPrudential
                        SQL = "INSERT INTO AM_PRUDENTIAL (ID_NUMBER, PRUDENTIAL_AMOUNT, INTEREST_AMOUNT, UPDATED_BY) " & _
                              "VALUES('" & .IDNumber & "'," & .PrudentialAmount & ", 0,'" & Me.UserName & "')"
                        listSQL.Add(SQL)
                    End With
                End If
            End If

            If listDMCMSetUp.Count > 0 Then
                For Each itemDMCM In listDMCMSetUp
                    'Get the DMCM No
                    Dim DMCMNo = Me.GetSequenceID("SEQ_AM_DMCM_NO")
                    dicDMCMNo.Add(itemDMCM.DMCMNumber, DMCMNo)

                    With itemDMCM
                        Dim row = dtDMCM.NewRow()
                        row("AM_DMCM_NO") = DMCMNo
                        row("AM_JV_NO") = 0
                        row("ID_NUMBER") = .IDNumber
                        row("PARTICULARS") = .Particulars
                        row("CHARGE_TYPE") = .ChargeType.ToString()
                        row("TRANS_TYPE") = .TransType
                        row("EWT") = .EWT
                        row("EWV") = .EWV
                        row("VATABLE") = .Vatable
                        row("VAT") = .VAT
                        row("VAT_EXEMPT") = .VATExempt
                        row("VAT_ZERO_RATED") = .VatZeroRated
                        row("OTHERS") = .Others
                        row("TOTAL_AMOUNT_DUE") = .TotalAmountDue
                        row("PREPARED_BY") = Me.UserName
                        row("CHECKED_BY") = .CheckedBy
                        row("APPROVED_BY") = .ApprovedBy
                        row("UPDATED_BY") = Me.UserName
                        dtDMCM.Rows.Add(row)
                    End With

                    'Data for DMCM Details
                    For Each itemDMCMDetails In itemDMCM.DMCMDetails
                        With itemDMCMDetails
                            Dim row = dtDMCMDetails.NewRow()
                            row("AM_DMCM_NO") = DMCMNo
                            row("ACCT_CODE") = .AccountCode
                            row("DEBIT") = .Debit
                            row("CREDIT") = .Credit
                            row("INV_DM_CM") = .InvDMCMNo
                            row("SUMMARY_TYPE") = .SummaryType
                            row("ID_NUMBER") = .IDNumber.IDNumber
                            row("IS_COMPUTE") = .IsComputed
                            row("UPDATED_BY") = Me.UserName
                            dtDMCMDetails.Rows.Add(row)
                        End With
                    Next
                    dtDMCMDetails.AcceptChanges()
                Next
                dtDMCM.AcceptChanges()
            End If

            For Each item In ListCollections
                Dim colNumber As Long = 0
                With item
                    Dim rowCol = dtCollection.NewRow()

                    If .CollectionCategory = EnumCollectionCategory.Cash And .CollectionNumber = 0 _
                        And .CollectedAmount <> 0 Then

                        colNumber = Me.GetSequenceID("SEQ_AM_COL_NO")
                        ORNumber = Me.GetSequenceID("SEQ_AM_OR_NO")
                        rowCol("AM_DMCM_NO") = 0
                        rowCol("OR_NO") = ORNumber
                        .ORNo = ORNumber
                        .DMCMNumber = 0
                    ElseIf .CollectionCategory = EnumCollectionCategory.Cash And .CollectionNumber = 0 _
                        And .CollectedAmount = 0 Then

                        'If it use held collection and no collected amount, usually it happens in drawdown
                        colNumber = Me.GetSequenceID("SEQ_AM_COL_NO")
                        ORNumber = 0
                        .ORNo = 0
                        .DMCMNumber = 0
                        rowCol("AM_DMCM_NO") = 0
                        rowCol("OR_NO") = ORNumber

                        'Update the applied held collection if any

                        For Each itemMon In ListCollectionMonitoring
                            If itemMon.TransType = EnumCollectionMonitoringType.TransferToHeldCollection And itemMon.CollectionNo <> 0 Then
                                itemMon.CollectionNoTag = colNumber
                            End If
                        Next
                    ElseIf .CollectionCategory = EnumCollectionCategory.Drawdown Then

                        colNumber = Me.GetSequenceID("SEQ_AM_COL_NO")
                        DMCMPRNo = Me.GetSequenceID("SEQ_AM_DMCM_NO")
                        .DMCMNumber = DMCMPRNo
                        .ORNo = 0
                        rowCol("OR_NO") = 0
                        rowCol("AM_DMCM_NO") = DMCMPRNo
                    Else
                        'Updated collection from auto to manual 
                        colNumber = .CollectionNumber
                        ORNumber = .ORNo
                        .DMCMNumber = 0
                        rowCol("OR_NO") = ORNumber
                        rowCol("AM_DMCM_NO") = 0

                        SQL = "DELETE FROM AM_COLLECTION WHERE COLLECTION_NO = " & .CollectionNumber
                        listSQL.Add(SQL)

                        If ORNumber <> 0 Then
                            SQL = "DELETE FROM AM_OFFICIAL_RECEIPT_DETAILS WHERE OR_NO = " & ORNumber
                            listSQL.Add(SQL)

                            SQL = "DELETE FROM AM_OFFICIAL_RECEIPT_SUMMARY WHERE OR_NO = " & ORNumber
                            listSQL.Add(SQL)

                            SQL = "DELETE FROM AM_OFFICIAL_RECEIPT_MAIN WHERE OR_NO = " & ORNumber
                            listSQL.Add(SQL)
                        End If
                    End If

                    dicColNo.Add(.CollectionNumber, colNumber)
                    .CollectionNumber = colNumber

                    If .CollectionCategory = EnumCollectionCategory.Cash Then
                        For Each itemOR In listOR
                            Dim rowOR = dtOR.NewRow()
                            rowOR("OR_NO") = ORNumber
                            rowOR("OR_DATE") = itemOR.ORDate
                            rowOR("ID_NUMBER") = itemOR.IDNumber
                            rowOR("OR_AMOUNT") = itemOR.Amount
                            rowOR("STATUS") = itemOR.Status
                            rowOR("TRANS_TYPE") = itemOR.TransactionType
                            rowOR("VAT_EXEMPT") = itemOR.VATExempt
                            rowOR("VATABLE") = itemOR.Vatable
                            rowOR("VAT") = itemOR.VAT
                            rowOR("VAT_ZERO_RATED") = itemOR.VATZeroRated
                            rowOR("OTHERS") = itemOR.Others
                            rowOR("WITHHOLDING_TAX") = itemOR.WithholdingTax
                            rowOR("WITHHOLDING_VAT") = itemOR.WithholdingVAT
                            rowOR("UPDATED_BY") = Me.UserName
                            dtOR.Rows.Add(rowOR)
                            dtOR.AcceptChanges()

                            For Each itemORDetails In itemOR.ListORDetails
                                Dim rowORDetails = dtORDetails.NewRow()
                                With itemORDetails
                                    rowORDetails("OR_NO") = ORNumber
                                    rowORDetails("ACCT_CODE") = .AccountCode
                                    rowORDetails("DESCRIPTION") = .Description
                                    rowORDetails("DEBIT") = .Debit
                                    rowORDetails("CREDIT") = .Credit
                                    rowORDetails("UPDATED_BY") = Me.UserName

                                    dtORDetails.Rows.Add(rowORDetails)
                                End With
                            Next
                            dtORDetails.AcceptChanges()

                            For Each itemORSummary In itemOR.ListORSummary
                                Dim rowORSummary = dtORSummary.NewRow()
                                With itemORSummary
                                    rowORSummary("OR_NO") = itemORSummary.ORNo
                                    rowORSummary("WESMBILL_SUMMARY_NO") = itemORSummary.WESMBillSummaryNo
                                    rowORSummary("DUE_DATE") = itemORSummary.DueDate
                                    rowORSummary("AMOUNT") = itemORSummary.Amount
                                    rowORSummary("COLLECTION_TYPE") = itemORSummary.CollectionType
                                    rowORSummary("UPDATED_BY") = Me.UserName

                                    dtORSummary.Rows.Add(rowORSummary)
                                End With
                            Next
                        Next
                    End If

                    rowCol("COLLECTION_NO") = colNumber
                    rowCol("COLLECTION_DATE") = .CollectionDate
                    rowCol("ALLOCATION_DATE") = .AllocationDate
                    rowCol("ID_NUMBER") = .IDNumber
                    rowCol("COLLECTED_AMOUNT") = .CollectedAmount
                    rowCol("COLLECTED_PRUDENTIAL") = .CollectedPrudential
                    rowCol("COLLECTED_HELD") = .CollectedHeld
                    rowCol("COLLECTION_CATEGORY") = .CollectionCategory
                    rowCol("ALLOCATION_TYPE") = .AllocationType
                    rowCol("DAILY_BATCH_CODE") = .DailyBatchCode
                    rowCol("STATUS") = .Status
                    rowCol("UPDATED_BY") = Me.UserName

                    dtCollection.Rows.Add(rowCol)
                    dtCollection.AcceptChanges()
                End With

                'Delete collection allocation
                SQL = "DELETE FROM AM_COLLECTION_ALLOCATION WHERE COLLECTION_NO = " & item.CollectionNumber
                listSQL.Add(SQL)

                'Delete WESM Bill Summary Histoyr 
                SQL = "DELETE FROM AM_WESM_BILL_SUMMARY_HISTORY WHERE COLLECTION_NO = " & item.CollectionNumber
                listSQL.Add(SQL)


                For Each itemCol In item.ListOfCollectionAllocation

                    If itemCol.CollectionType = EnumCollectionType.DefaultInterestOnVatOnMF Then
                        Continue For
                    End If

                    Dim rowColAlloc = dtCollectionAlloc.NewRow()
                    With itemCol

                        'Get the DMCM No
                        Dim DMCMNo As Long = 0
                        If .DMCMNumber <> 0 Then
                            DMCMNo = dicDMCMNo(.DMCMNumber)
                        End If

                        itemCol.CollectionNumber = colNumber
                        rowColAlloc("BILLING_PERIOD") = .BillingPeriod
                        rowColAlloc("COLLECTION_NO") = .CollectionNumber
                        rowColAlloc("AMOUNT") = .Amount
                        rowColAlloc("DUE_DATE") = .DueDate
                        rowColAlloc("ENDING_BALANCE") = .EndingBalance
                        rowColAlloc("NEW_ENDING_BALANCE") = .NewEndingBalance
                        rowColAlloc("NEW_DUEDATE") = .NewDueDate
                        rowColAlloc("ALLOCATION_DATE") = .AllocationDate
                        rowColAlloc("COLLECTION_TYPE") = .CollectionType
                        rowColAlloc("STATUS") = .Status
                        rowColAlloc("WESMBILL_SUMMARY_NO") = .WESMBillSummaryNo.WESMBillSummaryNo
                        rowColAlloc("AM_DMCM_NO") = DMCMNo
                        rowColAlloc("UPDATED_BY") = Me.UserName
                        rowColAlloc("AM_REF_TYPE") = .ReferenceType.ToString()

                        'added by lance as of 06/05/2020 for historical purposes of CAP SUmmary Report
                        rowColAlloc("ENERGY_WITHHOLD") = .WESMBillSummaryNo.EnergyWithhold 'added by lance 05/23/2020
                        rowColAlloc("ID_NUMBER") = .WESMBillSummaryNo.IDNumber.IDNumber 'added by lance 05/23/2020

                        
                        If .IsDMCMChanged = 1 Then
                            rowColAlloc("AM_REF_NO") = CStr(dicDMCMNo(CLng(.ReferenceNumber)))
                        Else
                            rowColAlloc("AM_REF_NO") = .ReferenceNumber
                        End If

                        'Update the DMCM No
                        .DMCMNumber = DMCMNo
                    End With
                    dtCollectionAlloc.Rows.Add(rowColAlloc)
                Next

                For Each itemAlloc In item.ListOfCollectionAllocation
                    Dim row = dtWESMBillSummaryHistory.NewRow()
                    With itemAlloc
                        row("WESMBILL_SUMMARY_NO") = .WESMBillSummaryNo.WESMBillSummaryNo
                        row("COLLECTION_NO") = colNumber

                        If .CollectionType = EnumCollectionType.DefaultInterestOnMF Or _
                           .CollectionType = EnumCollectionType.DefaultInterestOnVatOnMF Or _
                           .CollectionType = EnumCollectionType.WithholdingTaxOnDefaultInterest Or _
                           .CollectionType = EnumCollectionType.WithholdingVatOnDefaultInterest Or _
                           .CollectionType = EnumCollectionType.DefaultInterestOnEnergy Or _
                           .CollectionType = EnumCollectionType.WithholdingTaxonEnergy Then

                            row("DUE_DATE") = .DueDate
                        Else
                            row("DUE_DATE") = .NewDueDate
                        End If

                        row("AMOUNT") = .Amount
                        row("COLLECTION_TYPE") = .CollectionType
                        row("UPDATED_BY") = UserName
                    End With
                    dtWESMBillSummaryHistory.Rows.Add(row)
                Next
                dtWESMBillSummaryHistory.AcceptChanges()
            Next

            'Data for Prudential History
            For Each item In ListPrudentialHistory
                Dim rowPR = dtPRHistory.NewRow()
                With item
                    If .TransType = EnumPrudentialTransType.Replenishment Then
                        rowPR("OR_NO") = ORNumber
                        rowPR("AM_DMCM_NO") = 0
                    Else
                        rowPR("OR_NO") = 0
                        rowPR("AM_DMCM_NO") = DMCMPRNo
                    End If
                    rowPR("ID_NUMBER") = .IDNumber.IDNumber
                    rowPR("AMOUNT") = .Amount
                    rowPR("TRANS_TYPE") = .TransType
                    rowPR("TRANS_DATE") = .TransDate
                    rowPR("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(rowPR)
                End With
            Next
            dtPRHistory.AcceptChanges()

            If listDMCMDrawdown.Count > 0 Then
                For Each itemDMCM In listDMCMDrawdown
                    With itemDMCM
                        Dim row = dtDMCM.NewRow()
                        row("AM_DMCM_NO") = DMCMPRNo
                        row("AM_JV_NO") = 0
                        row("ID_NUMBER") = .IDNumber
                        row("PARTICULARS") = .Particulars
                        row("CHARGE_TYPE") = .ChargeType.ToString()
                        row("TRANS_TYPE") = .TransType
                        row("EWT") = .EWT
                        row("EWV") = .EWV
                        row("VATABLE") = .Vatable
                        row("VAT") = .VAT
                        row("VAT_EXEMPT") = .VATExempt
                        row("VAT_ZERO_RATED") = .VatZeroRated
                        row("OTHERS") = .Others
                        row("TOTAL_AMOUNT_DUE") = .TotalAmountDue
                        row("PREPARED_BY") = Me.UserName
                        row("CHECKED_BY") = .CheckedBy
                        row("APPROVED_BY") = .ApprovedBy
                        row("UPDATED_BY") = Me.UserName
                        dtDMCM.Rows.Add(row)
                    End With

                    'Data for DMCM Details
                    For Each itemDMCMDetails In itemDMCM.DMCMDetails
                        With itemDMCMDetails
                            Dim row = dtDMCMDetails.NewRow()
                            row("AM_DMCM_NO") = DMCMPRNo
                            row("ACCT_CODE") = .AccountCode
                            row("DEBIT") = .Debit
                            row("CREDIT") = .Credit
                            row("INV_DM_CM") = .InvDMCMNo
                            row("SUMMARY_TYPE") = .SummaryType
                            row("ID_NUMBER") = .IDNumber.IDNumber
                            row("IS_COMPUTE") = .IsComputed
                            row("UPDATED_BY") = Me.UserName
                            dtDMCMDetails.Rows.Add(row)
                        End With
                    Next
                    dtDMCMDetails.AcceptChanges()
                Next
                dtDMCM.AcceptChanges()
            End If

            For Each item In ListCollectionMonitoring
                With item
                    If .Amount <> 0 Then
                        If .CollectionNoTag <> 0 Then
                            SQL = "UPDATE AM_COLLECTION_MONITORING SET COLLECTION_NO_TAG =  " & .CollectionNoTag & ", " & _
                                  "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                                  "WHERE COL_MON_NO = " & .CollectionMonitoringNo
                            listSQL.Add(SQL)
                        Else
                            Dim rowColMon = dtColMonitoring.NewRow()

                            If .TransType = EnumCollectionMonitoringType.TransferToPRDrawdown Then
                                rowColMon("OR_NO") = .ORNo
                            Else
                                rowColMon("OR_NO") = ORNumber
                            End If

                            rowColMon("COL_MON_NO") = Me.GetSequenceID("SEQ_AM_COL_MON_NO")
                            rowColMon("COLLECTION_NO") = dicColNo(.CollectionNo)
                            rowColMon("ALLOCATION_DATE") = .AllocationDate
                            rowColMon("ALLOCATION_TYPE") = .AllocationType
                            rowColMon("ID_NUMBER") = .IDNumber.IDNumber
                            rowColMon("AMOUNT") = .Amount
                            rowColMon("TRANS_TYPE") = .TransType
                            rowColMon("STATUS") = .Status
                            rowColMon("UPDATED_BY") = Me.UserName

                            dtColMonitoring.Rows.Add(rowColMon)
                        End If
                    End If
                End With
            Next
            dtColMonitoring.AcceptChanges()

            With ds.Tables
                .Add(dtCollection)
                .Add(dtCollectionAlloc)
                .Add(dtOR)
                .Add(dtORDetails)
                .Add(dtORSummary)
                .Add(dtPRHistory)
                .Add(dtColMonitoring)
                .Add(dtDMCM)
                .Add(dtDMCMDetails)
                .Add(dtWESMBillSummaryHistory)
            End With

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Daily Interest Rate"
    Public Sub SaveDailyInterest(ByVal TransactionDate As Date, ByVal InterestRate As Decimal, ByVal Flag As Integer)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        

        Try
            'Flag 0 means Insert New, else update.
            If Flag = 0 Then
                SQL = "INSERT INTO AM_DAILY_INTEREST_RATE (transaction_date, interest_rate, updated_by) " & _
                      "VALUES (TO_DATE('" & TransactionDate & "','MM/DD/YYYY'), " & InterestRate & ", '" & Me.UserName & "')"
            Else
                SQL = "UPDATE AM_DAILY_INTEREST_RATE SET interest_rate = " & InterestRate & ", updated_by ='" & Me.UserName & "', " & _
                      "updated_date = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE transaction_date = TO_DATE('" & TransactionDate & "','MM/DD/YYYY')"
            End If

            listSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Post Manual Collection Allocation"
    Public Sub PostManualCollectionAllocation(ByVal ListCollections As List(Of Collection), _
                                              ByVal ListFTF As List(Of FundTransferFormMain), _
                                              ByVal itemJVCollection As JournalVoucher, _
                                              ByVal itemGPCollection As WESMBillGPPosted, _
                                              ByVal listEFT As List(Of EFT), _
                                              ByVal JVDate As Date)
        Dim listSQL As New List(Of String)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim batchCode As String
        Dim SQL As String

        Try
            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("AM_JV_DATE", GetType(Date))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'DataTable for AM_FTF_MAIN
            Dim dtFTFMain As New DataTable
            dtFTFMain.TableName = "AM_FTF_MAIN"
            With dtFTFMain.Columns
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("REF_NO", GetType(Long))
                .Add("TOTAL_AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("REQUESTING_APPROVAL", GetType(String))
                .Add("APPROVED_BY", GetType(String))
            End With
            dtFTFMain.AcceptChanges()

            'DataTable for AM_FTF_PARTICIPANT
            Dim dtFTFParticipant As New DataTable
            dtFTFParticipant.TableName = "AM_FTF_PARTICIPANT"
            With dtFTFParticipant.Columns
                .Add("REF_NO", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtFTFParticipant.AcceptChanges()

            'DataTable for AM_FTF_DETAILS
            Dim dtFTFDetails As New DataTable
            dtFTFDetails.TableName = "AM_FTF_DETAILS"
            With dtFTFDetails.Columns
                .Add("REF_NO", GetType(Long))
                .Add("BANK_ACCNT_NO", GetType(String))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtFTFDetails.AcceptChanges()

            Dim dtEFT As New DataTable
            dtEFT.TableName = "AM_PEMC_PAYMENT"
            With dtEFT.Columns
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("PAYMENT_TYPE", GetType(Integer))
                .Add("EXCESS_COLLECTION", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtEFT.AcceptChanges()

            'Get the batch code
            batchCode = EnumPostedType.C.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'Get the journal voucher no
            Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")

            'Get the total replenishment
            'Dim listReplenish = From x In ListCollections _
            '                    Where x.CollectedPrudential <> 0 _
            '                    Select x.IDNumber Distinct

            'For Each item In listReplenish
            '    Dim selectedItem = item

            '    Dim TotalReplenish = (From x In ListCollections _
            '                          Where x.IDNumber = selectedItem _
            '                          Select x.CollectedPrudential).Sum()

            '    Dim itemPR = Me.GetParticipantPrudential(selectedItem)

            '    If itemPR.IDNumber = "" Then
            '        SQL = "INSERT INTO AM_PRUDENTIAL (ID_NUMBER, PRUDENTIAL_AMOUNT, UPDATED_BY) VALUES ('" & _
            '              selectedItem & "'," & TotalReplenish & ",'" & Me.UserName & "')"
            '        listSQL.Add(SQL)
            '    Else
            '        SQL = "UPDATE AM_PRUDENTIAL SET PRUDENTIAL_AMOUNT = PRUDENTIAL_AMOUNT + " & TotalReplenish & ", " & _
            '              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
            '              "WHERE id_number = '" & selectedItem & "'"
            '        listSQL.Add(SQL)
            '    End If
            'Next

            For Each item In ListCollections
                With item

                    .IsPosted = EnumIsPosted.Posted

                    'Update the batch code of the collections
                    SQL = "UPDATE AM_COLLECTION " & _
                          "SET IS_POSTED = " & .IsPosted & ", BATCH_CODE = '" & batchCode & "', UPDATED_BY = '" & Me.UserName & "', " & _
                          "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE COLLECTION_NO = " & .CollectionNumber
                    listSQL.Add(SQL)

                    'Update the batch code of the collection monitoring
                    SQL = "UPDATE AM_COLLECTION_MONITORING " & _
                          "SET BATCH_CODE = '" & batchCode & "', UPDATED_BY = '" & Me.UserName & "', " & _
                          "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE COLLECTION_NO = " & .CollectionNumber & " AND STATUS = " & EnumStatus.Active
                    listSQL.Add(SQL)

                    'Update the batch code of the OR
                    If .ORNo <> 0 Then
                        SQL = "UPDATE AM_OFFICIAL_RECEIPT_MAIN SET BATCH_CODE = '" & batchCode & "', " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE OR_NO = " & .ORNo

                        listSQL.Add(SQL)
                    End If

                    'Update the JVNo of DMCM
                    If .DMCMNumber <> 0 Then
                        SQL = "UPDATE AM_DMCM SET AM_JV_NO = " & jvNo & ", " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE AM_DMCM_NO = " & .DMCMNumber

                        listSQL.Add(SQL)
                    End If

                    'Update the batch code for PR History (Replenishment)
                    If .ORNo <> 0 Then
                        SQL = "UPDATE AM_PRUDENTIAL_HISTORY SET BATCH_CODE = '" & batchCode & "', " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE OR_NO = " & .ORNo

                        listSQL.Add(SQL)
                    End If

                    'Update the batch code for PR History (Drawdown)
                    If .DMCMNumber <> 0 Then
                        SQL = "UPDATE AM_PRUDENTIAL_HISTORY SET BATCH_CODE = '" & batchCode & "', " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE AM_DMCM_NO = " & .DMCMNumber

                        listSQL.Add(SQL)
                    End If
                End With

                'Update the JV Number of the DMCM in collection allocation
                Dim listDMCMNo = From x In item.ListOfCollectionAllocation _
                                 Where x.DMCMNumber <> 0 _
                                 Select x.DMCMNumber Distinct

                For Each itemDMCMNo In listDMCMNo
                    SQL = "UPDATE AM_DMCM SET AM_JV_NO = " & jvNo & ", " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE AM_DMCM_NO = " & itemDMCMNo

                    listSQL.Add(SQL)
                Next
            Next

            'Data for Journal Voucher
            With itemJVCollection
                Dim row As DataRow
                row = dtGPPosted.NewRow()

                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("AM_JV_DATE") = JVDate
                row("BATCH_CODE") = batchCode
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                dtJV.Rows.Add(row)

                'Data for Journal Voucher Details (Debit)
                For Each item In itemJVCollection.JVDetails
                    row = dtJVDetails.NewRow()
                    row("AM_JV_NO") = jvNo
                    row("ACCT_CODE") = item.AccountCode
                    row("DEBIT") = item.Debit
                    row("CREDIT") = item.Credit
                    row("UPDATED_BY") = Me.UserName
                    dtJVDetails.Rows.Add(row)
                Next
                dtJVDetails.AcceptChanges()
            End With
            dtJV.AcceptChanges()

            'Data for WESM Bill GP Posted
            With itemGPCollection
                Dim row As DataRow
                row = dtGPPosted.NewRow()
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("REMARKS") = "Collection summary for the batch " & batchCode & "."
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("AM_JV_NO") = jvNo
                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()

            If ListFTF.Count > 0 Then
                For Each itemMain In ListFTF
                    Dim sequenceNo = Me.GetSequenceID("SEQ_AM_FTF_REF_NO")

                    Dim rowFTFMain = dtFTFMain.NewRow()
                    With itemMain
                        rowFTFMain("ALLOCATION_DATE") = .AllocationDate
                        rowFTFMain("REF_NO") = sequenceNo
                        rowFTFMain("TOTAL_AMOUNT") = .TotalAmount
                        rowFTFMain("TRANS_TYPE") = .TransType
                        rowFTFMain("BATCH_CODE") = batchCode
                        rowFTFMain("STATUS") = .Status
                        rowFTFMain("UPDATED_BY") = Me.UserName
                        rowFTFMain("REQUESTING_APPROVAL") = .RequestingApproval
                        rowFTFMain("APPROVED_BY") = .ApprovedBy
                        dtFTFMain.Rows.Add(rowFTFMain)
                        dtFTFMain.AcceptChanges()
                    End With

                    For Each itemParticipant In itemMain.ListOfFTFParticipants
                        Dim rowFTFParticipant = dtFTFParticipant.NewRow()
                        With itemParticipant
                            rowFTFParticipant("REF_NO") = sequenceNo
                            rowFTFParticipant("ID_NUMBER") = .IDNumber.IDNumber
                            rowFTFParticipant("AMOUNT") = .Amount
                            rowFTFParticipant("UPDATED_BY") = Me.UserName
                            dtFTFParticipant.Rows.Add(rowFTFParticipant)
                            dtFTFParticipant.AcceptChanges()
                        End With
                    Next

                    For Each itemDetails In itemMain.ListOfFTFDetails
                        Dim rowFTFDetails = dtFTFDetails.NewRow()
                        With itemDetails
                            rowFTFDetails("REF_NO") = sequenceNo
                            rowFTFDetails("BANK_ACCNT_NO") = .BankAccountNo
                            rowFTFDetails("ACCT_CODE") = .AccountCode
                            rowFTFDetails("DEBIT") = .Debit
                            rowFTFDetails("CREDIT") = .Credit
                            rowFTFDetails("UPDATED_BY") = Me.UserName
                            dtFTFDetails.Rows.Add(rowFTFDetails)
                            dtFTFDetails.AcceptChanges()
                        End With
                    Next
                Next
            End If

            'If listEFT.Count > 0 Then
            '    For Each itemEFT In listEFT
            '        With itemEFT
            '            Dim row = dtEFT.NewRow()
            '            row("ALLOCATION_DATE") = .AllocationDate
            '            row("ID_NUMBER") = .Participant.IDNumber
            '            row("PAYMENT_TYPE") = .PaymentType
            '            row("EXCESS_COLLECTION") = .ExcessCollection
            '            row("UPDATED_BY") = Me.UserName
            '            dtEFT.Rows.Add(row)
            '        End With
            '    Next
            '    dtEFT.AcceptChanges()
            'End If

            With ds.Tables
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
                .Add(dtFTFMain)
                .Add(dtFTFParticipant)
                .Add(dtFTFDetails)
                '.Add(dtEFT)
            End With

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(report.ErrorMessage)
        End Try
    End Sub
#End Region

#Region "Save Prudential Replenishment Temporary"
    Public Sub SavePrudentialReplenishmentTemporary(ByVal TransDate As Date, ByVal listPRHistory As List(Of PrudentialHistory))
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"

            With dtPRHistory.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_NO", GetType(Long))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY WHERE " & _
                  "trans_type = " & EnumPrudentialTransType.Replenishment & " AND " & _
                  "trans_date = TO_DATE('" & TransDate & "','MM/DD/YYYY') AND or_no = 0"

            listSQL.Add(SQL)

            For Each item In listPRHistory
                Dim IDNumber = item.IDNumber.IDNumber

                Dim rowPR = dtPRHistory.NewRow()
                With item
                    rowPR("OR_NO") = .ORNo
                    rowPR("AM_DMCM_NO") = .DMCMNumber
                    rowPR("ID_NUMBER") = .IDNumber.IDNumber
                    rowPR("AMOUNT") = .Amount
                    rowPR("TRANS_TYPE") = .TransType
                    rowPR("TRANS_DATE") = .TransDate
                    rowPR("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(rowPR)
                End With
                dtPRHistory.AcceptChanges()
            Next

            With ds.Tables
                .Add(dtPRHistory)
            End With
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub

#End Region

#Region "Save Prudential Replenishment"
    Public Sub SavePrudentialReplenishment(ByVal listPRHistory As List(Of PrudentialHistory), _
                                           ByVal listOR As List(Of OfficialReceiptMain), ByVal itemJV As JournalVoucher, _
                                           ByVal itemGP As WESMBillGPPosted, ByVal TransDate As Date)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"

            With dtPRHistory.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_NO", GetType(Long))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            'Datatable for AM_OFFICIAL_RECEIPT_MAIN
            Dim dtOR As New DataTable
            dtOR.TableName = "AM_OFFICIAL_RECEIPT_MAIN"
            With dtOR.Columns
                .Add("BATCH_CODE", GetType(String))
                .Add("OR_NO", GetType(Long))
                .Add("OR_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_AMOUNT", GetType(Decimal))
                .Add("VAT_EXEMPT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("REMARKS", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtOR.AcceptChanges()

            Dim dtORDetails As New DataTable
            dtORDetails.TableName = "AM_OFFICIAL_RECEIPT_DETAILS"
            With dtORDetails.Columns
                .Add("OR_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DESCRIPTION", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtORDetails.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_DATE", GetType(Date))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'Delete the existing PR History
            SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY " & _
                  "WHERE or_no = 0 AND trans_type = " & EnumPrudentialTransType.Replenishment & " AND " & _
                  "trans_date = TO_DATE('" & TransDate & "','MM/DD/YYYY')"

            listSQL.Add(SQL)

            For Each item In listPRHistory
                Dim itemPR = Me.GetParticipantPrudential(item.IDNumber.IDNumber)

                With item
                    If itemPR.IDNumber = "" Then
                        SQL = "INSERT INTO AM_PRUDENTIAL (ID_NUMBER, PRUDENTIAL_AMOUNT,  UPDATED_BY)" & _
                              "VALUES ('" & .IDNumber.IDNumber & "'," & .Amount & ",'" & Me.UserName & "')"
                    Else
                        SQL = "UPDATE AM_PRUDENTIAL " & _
                              "SET PRUDENTIAL_AMOUNT = PRUDENTIAL_AMOUNT + " & .Amount & ", " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE id_number = '" & .IDNumber.IDNumber & "'"
                    End If

                    listSQL.Add(SQL)
                End With
            Next

            'Get the journal voucher no
            Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")

            'Get the batch code
            Dim batchCode = EnumPostedType.PRR.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'Data for Journal Voucher
            Dim row As DataRow
            With itemJV
                row = dtJV.NewRow()

                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("BATCH_CODE") = batchCode
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                row("AM_JV_DATE") = .JVDate
                dtJV.Rows.Add(row)
            End With
            dtJV.AcceptChanges()

            'Data for Journal Voucher Details
            For Each item In itemJV.JVDetails
                row = dtJVDetails.NewRow()
                row("AM_JV_NO") = jvNo
                row("ACCT_CODE") = item.AccountCode
                row("DEBIT") = item.Debit
                row("CREDIT") = item.Credit
                row("UPDATED_BY") = Me.UserName
                dtJVDetails.Rows.Add(row)
            Next
            dtJVDetails.AcceptChanges()

            'Data for WESM Bill GP Posted
            With itemGP
                row = dtGPPosted.NewRow()
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("REMARKS") = "Prudential Replenishment per Batch Code " & batchCode & "."
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("AM_JV_NO") = jvNo
                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()

            For Each item In listPRHistory
                Dim IDNumber = item.IDNumber.IDNumber
                Dim ORNumber = Me.GetSequenceID("SEQ_AM_OR_NO")

                'Update the OR Number
                item.ORNo = ORNumber

                Dim rowPR = dtPRHistory.NewRow()
                With item
                    rowPR("OR_NO") = ORNumber
                    rowPR("AM_DMCM_NO") = .DMCMNumber
                    rowPR("BATCH_CODE") = batchCode
                    rowPR("ID_NUMBER") = .IDNumber.IDNumber
                    rowPR("AMOUNT") = .Amount
                    rowPR("TRANS_TYPE") = .TransType
                    rowPR("TRANS_DATE") = .TransDate
                    rowPR("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(rowPR)
                End With
                dtPRHistory.AcceptChanges()

                Dim itemOR = (From x In listOR _
                              Where x.IDNumber = IDNumber _
                              Select x).First()

                Dim rowOR = dtOR.NewRow()
                With itemOR
                    rowOR("BATCH_CODE") = batchCode
                    rowOR("OR_NO") = ORNumber
                    rowOR("OR_DATE") = .ORDate
                    rowOR("ID_NUMBER") = .IDNumber
                    rowOR("OR_AMOUNT") = .Amount
                    rowOR("VAT_EXEMPT") = .VATExempt
                    rowOR("STATUS") = .Status
                    rowOR("TRANS_TYPE") = .TransactionType
                    rowOR("REMARKS") = .Remarks
                    rowOR("UPDATED_BY") = Me.UserName
                    dtOR.Rows.Add(rowOR)
                End With
                dtOR.AcceptChanges()

                For Each itemORDetails In itemOR.ListORDetails
                    Dim rowORDetails = dtORDetails.NewRow()

                    With itemORDetails
                        rowORDetails("OR_NO") = ORNumber
                        rowORDetails("ACCT_CODE") = .AccountCode
                        rowORDetails("DESCRIPTION") = .Description
                        rowORDetails("DEBIT") = .Debit
                        rowORDetails("CREDIT") = .Credit
                        rowORDetails("UPDATED_BY") = Me.UserName
                        dtORDetails.Rows.Add(rowORDetails)
                    End With
                Next
                dtORDetails.AcceptChanges()
            Next

            With ds.Tables
                .Add(dtPRHistory)
                .Add(dtOR)
                .Add(dtORDetails)
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
            End With
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub

#End Region

#Region "Save Prudential Interest"
    Public Sub SavePrudentialInterest(ByVal listPRHistory As List(Of PrudentialHistory), _
                                      ByVal listDMCM As List(Of DebitCreditMemo), ByVal itemJV As JournalVoucher, _
                                      ByVal itemGP As WESMBillGPPosted, ByVal transDate As Date)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"
            With dtPRHistory.Columns
                .Add("BATCH_CODE", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("OR_NO", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            Dim dtDMCM As New DataTable
            dtDMCM.TableName = "AM_DMCM"
            With dtDMCM.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("AM_JV_NO", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("PARTICULARS", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("EWT", GetType(Decimal))
                .Add("EWV", GetType(Decimal))
                .Add("VATABLE", GetType(Decimal))
                .Add("VAT", GetType(Decimal))
                .Add("VAT_EXEMPT", GetType(Decimal))
                .Add("VAT_ZERO_RATED", GetType(Decimal))
                .Add("TOTAL_AMOUNT_DUE", GetType(Decimal))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With
            dtDMCM.AcceptChanges()

            Dim dtDMCMDetails As New DataTable
            dtDMCMDetails.TableName = "AM_DMCM_DETAILS"
            With dtDMCMDetails.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(String))
                .Add("CREDIT", GetType(String))
                .Add("INV_DM_CM", GetType(String))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCMDetails.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_DATE", GetType(Date))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'Get the journal voucher no
            Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")

            'Get the batch code
            Dim batchCode = EnumPostedType.PRI.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'Delete the existing PR History
            SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY " & _
                  "WHERE am_dmcm_no = 0 AND trans_type = " & EnumPrudentialTransType.InterestAmount & " AND " & _
                  "trans_date = TO_DATE('" & transDate & "','MM/DD/YYYY')"

            listSQL.Add(SQL)

            For Each item In listPRHistory
                Dim itemPR = Me.GetParticipantPrudential(item.IDNumber.IDNumber)

                With item
                    If itemPR.IDNumber = "" Then
                        SQL = "INSERT INTO AM_PRUDENTIAL (ID_NUMBER, INTEREST_AMOUNT,  UPDATED_BY)" & _
                              "VALUES ('" & .IDNumber.IDNumber & "'," & .Amount & ",'" & Me.UserName & "')"
                    Else
                        SQL = "UPDATE AM_PRUDENTIAL " & _
                              "SET INTEREST_AMOUNT = INTEREST_AMOUNT + " & .Amount & ", " & _
                              "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                              "WHERE id_number = '" & .IDNumber.IDNumber & "' "
                    End If

                    listSQL.Add(SQL)
                End With
            Next

            'Data for Journal Voucher
            With itemJV
                Dim row As DataRow
                row = dtJV.NewRow()

                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("BATCH_CODE") = batchCode
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                row("AM_JV_DATE") = .JVDate
                dtJV.Rows.Add(row)
            End With
            dtJV.AcceptChanges()

            'Data for Journal Voucher Details
            For Each item In itemJV.JVDetails
                Dim row As DataRow
                row = dtJVDetails.NewRow()
                row("AM_JV_NO") = jvNo
                row("ACCT_CODE") = item.AccountCode
                row("DEBIT") = item.Debit
                row("CREDIT") = item.Credit
                row("UPDATED_BY") = Me.UserName
                dtJVDetails.Rows.Add(row)
            Next
            dtJVDetails.AcceptChanges()

            'Data for WESM Bill GP Posted
            With itemGP
                Dim row As DataRow
                row = dtGPPosted.NewRow()
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("REMARKS") = .Remarks
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("AM_JV_NO") = jvNo
                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()

            For Each item In listPRHistory
                Dim IDNumber = item.IDNumber.IDNumber
                Dim DMCMNo = Me.GetSequenceID("SEQ_AM_DMCM_NO")

                'Update the DMCM Number
                item.DMCMNumber = DMCMNo

                Dim rowPR = dtPRHistory.NewRow()
                With item
                    rowPR("OR_NO") = .ORNo
                    rowPR("AM_DMCM_NO") = DMCMNo
                    rowPR("BATCH_CODE") = batchCode
                    rowPR("ID_NUMBER") = .IDNumber.IDNumber
                    rowPR("AMOUNT") = .Amount
                    rowPR("TRANS_TYPE") = .TransType
                    rowPR("TRANS_DATE") = .TransDate
                    rowPR("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(rowPR)
                End With
                dtPRHistory.AcceptChanges()

                Dim itemDMCM = (From x In listDMCM _
                                Where x.IDNumber = IDNumber _
                                Select x).First()

                Dim row = dtDMCM.NewRow()
                With itemDMCM
                    row("AM_DMCM_NO") = DMCMNo
                    row("AM_JV_NO") = jvNo
                    row("ID_NUMBER") = .IDNumber
                    row("PARTICULARS") = .Particulars
                    row("CHARGE_TYPE") = .ChargeType.ToString()
                    row("TRANS_TYPE") = .TransType
                    row("EWT") = .EWT
                    row("EWV") = .EWV
                    row("VATABLE") = .Vatable
                    row("VAT") = .VAT
                    row("VAT_EXEMPT") = .VATExempt
                    row("VAT_ZERO_RATED") = .VatZeroRated
                    row("TOTAL_AMOUNT_DUE") = .TotalAmountDue
                    row("PREPARED_BY") = Me.UserName
                    row("CHECKED_BY") = .CheckedBy
                    row("APPROVED_BY") = .ApprovedBy
                    row("UPDATED_BY") = Me.UserName
                    row("UPDATED_DATE") = .UpdatedDate

                    dtDMCM.Rows.Add(row)
                End With

                For Each itemDetails In itemDMCM.DMCMDetails
                    Dim rowDetails = dtDMCMDetails.NewRow()

                    With itemDetails
                        rowDetails("AM_DMCM_NO") = DMCMNo
                        rowDetails("ACCT_CODE") = .AccountCode
                        rowDetails("DEBIT") = .Debit
                        rowDetails("CREDIT") = .Credit
                        rowDetails("INV_DM_CM") = .InvDMCMNo
                        rowDetails("SUMMARY_TYPE") = .SummaryType
                        rowDetails("ID_NUMBER") = .IDNumber.IDNumber
                        rowDetails("UPDATED_BY") = Me.UserName

                        dtDMCMDetails.Rows.Add(rowDetails)
                    End With
                Next
                dtDMCMDetails.AcceptChanges()
            Next
            dtDMCM.AcceptChanges()

            With ds.Tables
                .Add(dtPRHistory)
                .Add(dtDMCM)
                .Add(dtDMCMDetails)
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
            End With
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub

#End Region

#Region "Save Prudential Interest Temporary"
    Public Sub SavePrudentialInterestTemporary(ByVal TransDate As Date, ByVal listPRHistory As List(Of PrudentialHistory))
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"

            With dtPRHistory.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("OR_NO", GetType(Long))
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY WHERE " & _
                  "trans_type = " & EnumPrudentialTransType.InterestAmount & " AND " & _
                  "trans_date = TO_DATE('" & TransDate & "','MM/DD/YYYY') AND am_dmcm_no = 0"

            listSQL.Add(SQL)

            For Each item In listPRHistory
                Dim IDNumber = item.IDNumber.IDNumber

                Dim rowPR = dtPRHistory.NewRow()
                With item
                    rowPR("OR_NO") = .ORNo
                    rowPR("AM_DMCM_NO") = .DMCMNumber
                    rowPR("BATCH_CODE") = ""
                    rowPR("ID_NUMBER") = .IDNumber.IDNumber
                    rowPR("AMOUNT") = .Amount
                    rowPR("TRANS_TYPE") = .TransType
                    rowPR("TRANS_DATE") = .TransDate
                    rowPR("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(rowPR)
                End With
                dtPRHistory.AcceptChanges()
            Next

            With ds.Tables
                .Add(dtPRHistory)
            End With
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub

#End Region

#Region "Save Prudential Transfer Interest"
    Public Sub SavePrudentialTransferInterest(ByVal listPRHistory As List(Of PrudentialHistory), _
                                              ByVal itemJV As JournalVoucher, ByVal itemGP As WESMBillGPPosted, _
                                              ByVal transDate As Date)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"

            With dtPRHistory.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("BATCH_CODE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_DATE", GetType(Date))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'Delete the existing PR History
            SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY " & _
                  "WHERE trans_type = " & EnumPrudentialTransType.TransferInterestAmount & " AND " & _
                  "trans_date = TO_DATE('" & transDate & "','MM/DD/YYYY') AND batch_code IS NULL"

            listSQL.Add(SQL)

            For Each item In listPRHistory
                With item
                    SQL = "UPDATE AM_PRUDENTIAL " & _
                          "SET PRUDENTIAL_AMOUNT = PRUDENTIAL_AMOUNT + " & .Amount & ", " & _
                          "INTEREST_AMOUNT = INTEREST_AMOUNT - " & .Amount & ", UPDATED_BY = '" & Me.UserName & "', " & _
                          "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE id_number = '" & .IDNumber.IDNumber & "'"

                    listSQL.Add(SQL)
                End With
            Next

            'Get the journal voucher no
            Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")

            'Get the batch code
            Dim batchCode = EnumPostedType.PRTI.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'Data for Journal Voucher
            Dim row As DataRow
            With itemJV
                row = dtJV.NewRow()

                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("BATCH_CODE") = batchCode
                row("STATUS") = .Status
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                row("AM_JV_DATE") = .JVDate
                dtJV.Rows.Add(row)
            End With
            dtJV.AcceptChanges()

            'Data for Journal Voucher Details
            For Each item In itemJV.JVDetails
                row = dtJVDetails.NewRow()
                row("AM_JV_NO") = jvNo
                row("ACCT_CODE") = item.AccountCode
                row("DEBIT") = item.Debit
                row("CREDIT") = item.Credit
                row("UPDATED_BY") = Me.UserName
                dtJVDetails.Rows.Add(row)
            Next
            dtJVDetails.AcceptChanges()

            'Data for WESM Bill GP Posted
            With itemGP
                row = dtGPPosted.NewRow()
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("AM_JV_NO") = jvNo
                row("REMARKS") = "Transferred Prudential Interest into Capital as of " & listPRHistory.First.TransDate.ToString("MM/dd/yyyy") & "."
                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()

            For Each item In listPRHistory
                Dim rowPR = dtPRHistory.NewRow()
                With item
                    rowPR("BATCH_CODE") = batchCode
                    rowPR("ID_NUMBER") = .IDNumber.IDNumber
                    rowPR("AMOUNT") = .Amount
                    rowPR("TRANS_TYPE") = .TransType
                    rowPR("TRANS_DATE") = .TransDate
                    rowPR("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(rowPR)
                End With
                dtPRHistory.AcceptChanges()
            Next

            With ds.Tables
                .Add(dtPRHistory)
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
            End With
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub

#End Region

#Region "Save Prudential Transfer Interest Temporary"
    Public Sub SavePrudentialTransferInterestTemporary(ByVal listPRHistory As List(Of PrudentialHistory), ByVal transDate As Date)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dtPRHistory As New DataTable
            dtPRHistory.TableName = "AM_PRUDENTIAL_HISTORY"

            With dtPRHistory.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("AMOUNT", GetType(Decimal))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("TRANS_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtPRHistory.AcceptChanges()

            'Delete the existing PR History
            SQL = "DELETE FROM AM_PRUDENTIAL_HISTORY " & _
                  "WHERE trans_type = " & EnumPrudentialTransType.TransferInterestAmount & " AND " & _
                  "trans_date = TO_DATE('" & transDate & "','MM/DD/YYYY') AND batch_code IS NULL"

            listSQL.Add(SQL)

            For Each item In listPRHistory
                Dim rowPR = dtPRHistory.NewRow()
                With item
                    rowPR("ID_NUMBER") = .IDNumber.IDNumber
                    rowPR("AMOUNT") = .Amount
                    rowPR("TRANS_TYPE") = .TransType
                    rowPR("TRANS_DATE") = .TransDate
                    rowPR("UPDATED_BY") = Me.UserName
                    dtPRHistory.Rows.Add(rowPR)
                End With
                dtPRHistory.AcceptChanges()
            Next

            ds.Tables.Add(dtPRHistory)
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub

#End Region

#Region "Save Billing Periods"
    Public Sub SaveCalendarBPs(ByVal listBP As List(Of CalendarBillingPeriod))
        Dim report As New DataReport
        Dim ds As New DataSet, dt As New DataTable
        Dim listSQL As New List(Of String)

        Try
            dt.TableName = "AM_CALENDAR_BP"

            With dt.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("START_DATE", GetType(Date))
                .Add("END_DATE", GetType(Date))
                .Add("BILLING_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
            End With
            dt.AcceptChanges()

            For Each item In listBP
                With item
                    Dim row = dt.NewRow()
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("START_DATE") = .StartDate
                    row("END_DATE") = .EndDate
                    row("BILLING_DATE") = .BillingDate
                    row("UPDATED_BY") = Me.UserName
                    dt.Rows.Add(row)
                End With
            Next
            dt.AcceptChanges()

            ds.Tables.Add(dt)
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "PostDailyCollections"
    Public Sub PostDailyCollections(ByRef ListCollections As List(Of Collection), ByVal itemJVCollection As JournalVoucher, _
                                    ByVal itemGPCollection As WESMBillGPPosted)
        Dim listSQL As New List(Of String)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim batchCode As String
        Dim SQL As String

        Try
            'DataTable for AM_WESM_BILL_GP_POSTED
            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("REMARKS", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            'DataTable for AM_JV
            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            'DataTable for AM_JV_DETAILS
            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            'Get the batch code
            batchCode = EnumPostedType.DC.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            'Get the journal voucher no
            Dim jvNo As Long = Me.GetSequenceID("SEQ_AM_JV_NO")

            For Each item In ListCollections
                'Update the batch code of the collections
                SQL = "UPDATE AM_COLLECTION " & _
                      "SET DAILY_BATCH_CODE = '" & batchCode & "', UPDATED_BY = '" & Me.UserName & "', " & _
                      "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE COLLECTION_NO = " & item.CollectionNumber
                listSQL.Add(SQL)

                item.DailyBatchCode = batchCode
            Next

            'Data for Journal Voucher
            With itemJVCollection
                Dim row As DataRow
                row = dtGPPosted.NewRow()

                row = dtJV.NewRow()
                row("AM_JV_NO") = jvNo
                row("BATCH_CODE") = batchCode
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                dtJV.Rows.Add(row)

                'Data for Journal Voucher Details (Debit)
                For Each item In itemJVCollection.JVDetails
                    row = dtJVDetails.NewRow()
                    row("AM_JV_NO") = jvNo
                    row("ACCT_CODE") = item.AccountCode
                    row("DEBIT") = item.Debit
                    row("CREDIT") = item.Credit
                    row("UPDATED_BY") = Me.UserName
                    dtJVDetails.Rows.Add(row)
                Next
                dtJVDetails.AcceptChanges()
            End With
            dtJV.AcceptChanges()

            'Data for WESM Bill GP Posted
            With itemGPCollection
                Dim row As DataRow
                row = dtGPPosted.NewRow()
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("REMARKS") = "Collection summary for the batch " & batchCode & "."
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("AM_JV_NO") = jvNo
                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()

            With ds.Tables
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtGPPosted)
            End With

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length > 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(report.ErrorMessage)
        End Try
    End Sub

#End Region

#Region "Save WESM Bill Sales And Purchased"
    Public Sub SaveWESMBillSalesAndPurchased(ByVal FileBillingPd As Integer, ByVal FileSTLRun As String, _
                                             ByVal listWESMBillSP As List(Of WESMBillSalesAndPurchased), ByVal wbschangeparentidlist As List(Of WESMBillSummaryChangeParentId))
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)

        Try
            'DataTable for AM_WESM_BILL_SALES_PURCHASED
            Dim dtWESMSalesPurchases As New DataTable
            dtWESMSalesPurchases.TableName = "AM_WESM_BILL_SALES_PURCHASED"

            With dtWESMSalesPurchases.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("VATABLE_SALES", GetType(Decimal))
                .Add("ZERO_RATED_SALES", GetType(Decimal))
                .Add("ZERO_RATED_ECOZONE", GetType(Decimal))
                .Add("VATABLE_PURCHASES", GetType(Decimal))
                .Add("ZERO_RATED_PURCHASES", GetType(Decimal))
                .Add("TTA", GetType(Decimal))
                .Add("VAT_ON_SALES", GetType(Decimal))
                .Add("VAT_ON_PURCHASES", GetType(Decimal))
                .Add("WITHHOLDING_TAX", GetType(Decimal))
                .Add("GMR", GetType(Decimal))
                .Add("NSSRA", GetType(Decimal))
                .Add("TRANSACTION_TYPE", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMSalesPurchases.AcceptChanges()


            Dim dtWESMSAPPrinting As New DataTable
            dtWESMSAPPrinting.TableName = "AM_WESM_SALES_PURCHASES_PRINT"

            With dtWESMSAPPrinting.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STL_RUN", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("REG_ID", GetType(String))
                .Add("INVOICE_NO", GetType(String))
                .Add("VATABLE_SALES", GetType(Decimal))
                .Add("ZERO_RATED_SALES", GetType(Decimal))
                .Add("ZERO_RATED_ECOZONE", GetType(Decimal))
                .Add("VATABLE_PURCHASES", GetType(Decimal))
                .Add("ZERO_RATED_PURCHASES", GetType(Decimal))
                .Add("TTA", GetType(Decimal))
                .Add("VAT_ON_SALES", GetType(Decimal))
                .Add("VAT_ON_PURCHASES", GetType(Decimal))
                .Add("WITHHOLDING_TAX", GetType(Decimal))
                .Add("GMR", GetType(Decimal))
                .Add("NSSRA", GetType(Decimal))
                .Add("TRANSACTION_TYPE", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With

            dtWESMSAPPrinting.AcceptChanges()
            For Each item In listWESMBillSP
                With item
                    Dim UniqueKey = .IDNumber.IDNumber & .RegistrationID

                    Dim getParentID As String = (From x In wbschangeparentidlist
                                                Where x.BillingPeriod = item.BillingPeriod And x.ParentParticipants.IDNumber = item.IDNumber.IDNumber And x.ChildParticipants.IDNumber = item.RegistrationID
                                                Select x.NewParentParticipants.IDNumber).FirstOrDefault
                    Dim parentID As String = ""
                    If getParentID IsNot Nothing Then
                        If Not getParentID.Contains(AMModule.FITParticipantCode.ToString) Then
                            parentID = getParentID
                        Else
                            parentID = .IDNumber.IDNumber
                        End If
                    Else
                        parentID = .IDNumber.IDNumber
                    End If

                    Dim row As DataRow, rowP As DataRow
                    row = dtWESMSalesPurchases.NewRow()
                    rowP = dtWESMSAPPrinting.NewRow()

                    row("BILLING_PERIOD") = .BillingPeriod
                    row("STL_RUN") = .SettlementRun
                    row("ID_NUMBER") = parentID
                    row("REG_ID") = .RegistrationID
                    row("INVOICE_NO") = .InvoiceNumber
                    row("VATABLE_SALES") = .VatableSales
                    row("ZERO_RATED_SALES") = .ZeroRatedSales
                    row("ZERO_RATED_ECOZONE") = .ZeroRatedEcozone
                    row("VATABLE_PURCHASES") = .VatablePurchases
                    row("ZERO_RATED_PURCHASES") = .ZeroRatedPurchases
                    row("TTA") = .NetSettlementAmount
                    row("VAT_ON_SALES") = .VATonSales
                    row("VAT_ON_PURCHASES") = .VATonPurchases
                    row("WITHHOLDING_TAX") = .WithholdingTAX
                    row("GMR") = .GMR
                    row("NSSRA") = .NSSRA
                    row("TRANSACTION_TYPE") = .TransactionType
                    row("UPDATED_BY") = AMModule.UserName

                    dtWESMSalesPurchases.Rows.Add(row)

                    'For Printing
                    rowP("BILLING_PERIOD") = .BillingPeriod
                    rowP("STL_RUN") = .SettlementRun
                    rowP("ID_NUMBER") = .IDNumber.IDNumber
                    rowP("REG_ID") = .RegistrationID
                    rowP("INVOICE_NO") = .InvoiceNumber
                    rowP("VATABLE_SALES") = .VatableSales
                    rowP("ZERO_RATED_SALES") = .ZeroRatedSales
                    rowP("ZERO_RATED_ECOZONE") = .ZeroRatedEcozone
                    rowP("VATABLE_PURCHASES") = .VatablePurchases
                    rowP("ZERO_RATED_PURCHASES") = .ZeroRatedPurchases
                    rowP("TTA") = .NetSettlementAmount
                    rowP("VAT_ON_SALES") = .VATonSales
                    rowP("VAT_ON_PURCHASES") = .VATonPurchases
                    rowP("WITHHOLDING_TAX") = .WithholdingTAX
                    rowP("GMR") = .GMR
                    rowP("NSSRA") = .NSSRA
                    rowP("TRANSACTION_TYPE") = .TransactionType
                    rowP("UPDATED_BY") = AMModule.UserName

                    dtWESMSAPPrinting.Rows.Add(rowP)
                End With
            Next

         
            'For Deletion
            Dim SQL = "DELETE FROM AM_WESM_BILL_SALES_PURCHASED  " & _
                      "WHERE BILLING_PERIOD = " & FileBillingPd & " " & _
                      "AND STL_RUN = '" & FileSTLRun & "'"

            listSQL.Add(SQL)

            'For Deletion
            SQL = "DELETE FROM AM_WESM_SALES_PURCHASES_PRINT " & _
                      "WHERE BILLING_PERIOD = " & FileBillingPd & " " & _
                      "AND STL_RUN = '" & FileSTLRun & "'"

            listSQL.Add(SQL)


            ds.Tables.Add(dtWESMSalesPurchases)
            ds.Tables.Add(dtWESMSAPPrinting)
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub
#End Region

#Region "Save Admin Settings"
    Public Sub SaveAdminSettings(ByVal item As AdminSettings)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            With item
                SQL = "UPDATE AM_ADMIN_SETTINGS " & _
                      "SET description = '" & .Description & "', " & _
                      "value = '" & .Value & "', " & _
                      "updated_by = '" & Me.UserName & "', " & _
                      "updated_date = (SELECT SYSDATE FROM DUAL)" & _
                      "WHERE code_name = '" & .CodeName & "'"

                listSQL.Add(SQL)
            End With

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "Save Prudential Margin Call Main"
    Public Sub SavePrudentialMarginCallMain(ByVal TransactionDate As Date, ByVal StartDate As Date, ByVal EndDate As Date, _
                                            ByVal listMarginCall As List(Of PrudentialMarginCall))
        Dim report As New DataReport
        Dim ds As New DataSet, dtMain As New DataTable, dtDetails As New DataTable
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            dtMain.TableName = "AM_MARGIN_CALL_MAIN"
            With dtMain.Columns
                .Add("REF_NO", GetType(Long))
                .Add("TRANS_DATE", GetType(Date))
                .Add("MARGIN_CALL_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("NO_OF_MONTHS", GetType(Integer))
                .Add("TOTAL", GetType(Decimal))
                .Add("MONTHLY_AVERAGE", GetType(Decimal))
                .Add("DAILY_AVERAGE", GetType(Decimal))
                .Add("MAXIMUM_EXPOSURE", GetType(Decimal))
                .Add("ADVANCE_PAYMENT", GetType(Decimal))
                .Add("ACTUAL_NET_EXPOSURE", GetType(Decimal))
                .Add("PRUDENTIAL_DEPOSIT", GetType(Decimal))
                .Add("PRUDENTIAL_INTEREST", GetType(Decimal))
                .Add("TOTAL_PRUDENTIAL", GetType(Decimal))
                .Add("TRADING_LIMIT", GetType(Decimal))
                .Add("MARGIN_CALL_AMOUNT", GetType(Decimal))
                .Add("STATUS", GetType(Integer))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtMain.AcceptChanges()

            dtDetails.TableName = "AM_MARGIN_CALL_DETAILS"
            With dtDetails.Columns
                .Add("REF_NO", GetType(Long))
                .Add("INVOICE_NO", GetType(Long))
            End With
            dtDetails.AcceptChanges()

            SQL = "DELETE FROM AM_MARGIN_CALL_MAIN WHERE trans_date = TO_DATE('" & TransactionDate & "','MM/DD/YYYY')"
            listSQL.Add(SQL)

            SQL = "UPDATE AM_MARGIN_CALL_MAIN SET STATUS = " & EnumMarginCallStatus.NotFinal & "  " & _
                  "WHERE trans_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                  "AND TO_DATE('" & EndDate & "','MM/DD/YYYY') "
            listSQL.Add(SQL)

            For Each item In listMarginCall
                Dim refNo = Me.GetSequenceID("SEQ_AM_MARGIN_CALL_NO")
                With item
                    Dim row = dtMain.NewRow()
                    row("REF_NO") = refNo
                    row("TRANS_DATE") = .TransactionDate
                    row("MARGIN_CALL_DATE") = .MarginCallDate
                    row("ID_NUMBER") = .IDNumber.IDNumber
                    row("NO_OF_MONTHS") = .NoOfMonths
                    row("TOTAL") = .Total
                    row("MONTHLY_AVERAGE") = .MonthlyAverage
                    row("DAILY_AVERAGE") = .DailyAverage
                    row("MAXIMUM_EXPOSURE") = .MaximumNetExposure
                    row("ADVANCE_PAYMENT") = .AdvancePayment + .OutstandingBalance
                    row("ACTUAL_NET_EXPOSURE") = .ActualNetExposure
                    row("PRUDENTIAL_DEPOSIT") = .PrudentialDeposit
                    row("PRUDENTIAL_INTEREST") = .PrudentialInterest
                    row("TOTAL_PRUDENTIAL") = .TotalPrudential
                    row("TRADING_LIMIT") = .TradingLimit
                    row("MARGIN_CALL_AMOUNT") = .MarginCallAmount
                    row("STATUS") = EnumMarginCallStatus.Final
                    row("UPDATED_BY") = Me.UserName
                    dtMain.Rows.Add(row)

                    For Each itemWESMBill In .ListOfWESMBills
                        Dim rowDetails = dtDetails.NewRow()

                        rowDetails("REF_NO") = refNo
                        rowDetails("INVOICE_NO") = itemWESMBill.InvoiceNumber
                        dtDetails.Rows.Add(rowDetails)
                    Next
                    dtDetails.AcceptChanges()
                End With
            Next
            dtMain.AcceptChanges()

            ds.Tables.Add(dtMain)
            ds.Tables.Add(dtDetails)
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "SaveManualDMCM"
    Public Sub SaveManualDMCM(ByVal itemDMCM As DebitCreditMemo, ByVal itemWESMBillSummary As WESMBillSummary, _
                              ByVal itemJV As JournalVoucher, ByVal itemGP As WESMBillGPPosted, ByVal AdjustMentAmount As Decimal, _
                              ByVal Flag As Boolean)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim DMCMNo As Long, JVNo As Long, WESMBillSummaryNo As Long
        Dim batchCode As String

        Try

            Dim dtDMCM As New DataTable
            dtDMCM.TableName = "AM_DMCM"
            With dtDMCM.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("AM_JV_NO", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("DUE_DATE", GetType(Date))
                .Add("TRANS_TYPE", GetType(Integer))
                .Add("PARTICULARS", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("EWT", GetType(Decimal))
                .Add("EWV", GetType(Decimal))
                .Add("VATABLE", GetType(Decimal))
                .Add("VAT", GetType(Decimal))
                .Add("VAT_EXEMPT", GetType(Decimal))
                .Add("VAT_ZERO_RATED", GetType(Decimal))
                .Add("TOTAL_AMOUNT_DUE", GetType(Decimal))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCM.AcceptChanges()

            Dim dtDMCMDetails As New DataTable
            dtDMCMDetails.TableName = "AM_DMCM_DETAILS"
            With dtDMCMDetails.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(String))
                .Add("CREDIT", GetType(String))
                .Add("INV_DM_CM", GetType(Long))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtDMCMDetails.AcceptChanges()

            Dim dtWESMBillSummary As New DataTable
            dtWESMBillSummary.TableName = "AM_WESM_BILL_SUMMARY"
            With dtWESMBillSummary.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("NEW_DUEDATE", GetType(Date))
                .Add("BEGINNING_BALANCE", GetType(Decimal))
                .Add("ENDING_BALANCE", GetType(Decimal))
                .Add("GROUP_NO", GetType(Long))
                .Add("ID_TYPE", GetType(String))
                .Add("IS_MFWTAX_DEDUCTED", GetType(String))
                .Add("INV_DM_CM", GetType(Long))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtWESMBillSummary.AcceptChanges()

            Dim dtJV As New DataTable
            dtJV.TableName = "AM_JV"
            With dtJV.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
            End With
            dtJV.AcceptChanges()

            Dim dtJVDetails As New DataTable
            dtJVDetails.TableName = "AM_JV_DETAILS"
            With dtJVDetails.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dtJVDetails.AcceptChanges()

            Dim dtGPPosted As New DataTable
            dtGPPosted.TableName = "AM_WESM_BILL_GP_POSTED"
            With dtGPPosted.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("DOCUMENT_AMOUNT", GetType(Decimal))
                .Add("BATCH_CODE", GetType(String))
                .Add("REMARKS", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                .Add("POSTED", GetType(Integer))
                .Add("AM_JV_NO", GetType(Long))
            End With
            dtGPPosted.AcceptChanges()

            Dim dtDMCMWESMBillSummary As New DataTable
            dtDMCMWESMBillSummary.TableName = "AM_DMCM_WESM_BILL_SUMMARY"
            With dtDMCMWESMBillSummary.Columns
                .Add("AM_DMCM_NO", GetType(Long))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("ADJUSTMENT", GetType(Integer))
            End With
            dtDMCMWESMBillSummary.AcceptChanges()

            'Get the DMCM No and JV No
            Dim row As DataRow
            DMCMNo = Me.GetSequenceID("SEQ_AM_DMCM_NO")
            JVNo = Me.GetSequenceID("SEQ_AM_JV_NO")
            batchCode = EnumPostedType.MDMCM.ToString() & "-" & Me.GetSequenceID("SEQ_AM_BATCH_CODE").ToString()

            If Flag = True Then
                WESMBillSummaryNo = Me.GetSequenceID("SEQ_AM_WESMBILL_SUMMARY_NO")
            Else
                WESMBillSummaryNo = itemWESMBillSummary.WESMBillSummaryNo
            End If

            'Data for DMCM
            With itemDMCM

                'Update the DMCMNo and JVNo
                .DMCMNumber = DMCMNo
                .JVNumber = JVNo

                row = dtDMCM.NewRow()
                row("AM_DMCM_NO") = .DMCMNumber
                row("AM_JV_NO") = .JVNumber
                row("ID_NUMBER") = .IDNumber
                row("BILLING_PERIOD") = .BillingPeriod
                row("DUE_DATE") = .DueDate
                row("TRANS_TYPE") = .TransType
                row("EWT") = .EWT
                row("EWV") = .EWV
                row("VATABLE") = .Vatable
                row("VAT") = .VAT
                row("VAT_EXEMPT") = .VATExempt
                row("VAT_ZERO_RATED") = .VatZeroRated
                row("TOTAL_AMOUNT_DUE") = .TotalAmountDue
                row("PARTICULARS") = .Particulars
                row("CHARGE_TYPE") = .ChargeType.ToString()
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                dtDMCM.Rows.Add(row)
            End With
            dtDMCM.AcceptChanges()

            'Data for DMCM Details
            For Each itemDMCMDetails In itemDMCM.DMCMDetails
                With itemDMCMDetails
                    row = dtDMCMDetails.NewRow()
                    row("AM_DMCM_NO") = DMCMNo
                    row("ACCT_CODE") = .AccountCode
                    row("DEBIT") = .Debit
                    row("CREDIT") = .Credit
                    row("INV_DM_CM") = .InvDMCMNo
                    row("SUMMARY_TYPE") = .SummaryType
                    row("ID_NUMBER") = .IDNumber.IDNumber
                    row("UPDATED_BY") = Me.UserName
                    dtDMCMDetails.Rows.Add(row)
                End With
            Next
            dtDMCMDetails.AcceptChanges()

            If Flag = True Then
                With itemWESMBillSummary
                    row = dtWESMBillSummary.NewRow()
                    row("BILLING_PERIOD") = .BillPeriod
                    row("ID_NUMBER") = .IDNumber.IDNumber
                    row("CHARGE_TYPE") = .ChargeType
                    row("DUE_DATE") = .DueDate
                    row("NEW_DUEDATE") = .DueDate
                    row("BEGINNING_BALANCE") = .BeginningBalance
                    row("ENDING_BALANCE") = .EndingBalance
                    row("GROUP_NO") = 0
                    row("ID_TYPE") = .IDType
                    row("IS_MFWTAX_DEDUCTED") = .IsMFWTaxDeducted
                    row("INV_DM_CM") = DMCMNo
                    row("SUMMARY_TYPE") = .SummaryType
                    row("WESMBILL_SUMMARY_NO") = WESMBillSummaryNo
                    row("UPDATED_BY") = Me.UserName
                    dtWESMBillSummary.Rows.Add(row)
                End With
                dtWESMBillSummary.AcceptChanges()
            Else
                Dim SQL = "UPDATE AM_WESM_BILL_SUMMARY " & _
                          "SET ENDING_BALANCE = ENDING_BALANCE - " & AdjustMentAmount & ", " & _
                          "UPDATED_BY = '" & Me.UserName & "', UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                          "WHERE WESMBILL_SUMMARY_NO = " & WESMBillSummaryNo
                listSQL.Add(SQL)
            End If

            'Data for Journal Voucher
            With itemJV
                row = dtJV.NewRow()
                row("AM_JV_NO") = JVNo
                row("BATCH_CODE") = batchCode
                row("STATUS") = 1
                row("PREPARED_BY") = Me.UserName
                row("CHECKED_BY") = .CheckedBy
                row("APPROVED_BY") = .ApprovedBy
                row("UPDATED_BY") = Me.UserName
                row("POSTED_TYPE") = .PostedType
                dtJV.Rows.Add(row)
            End With
            dtJV.AcceptChanges()

            'Data for Journal Voucher Details
            For Each item In itemJV.JVDetails
                row = dtJVDetails.NewRow()
                row("AM_JV_NO") = JVNo
                row("ACCT_CODE") = item.AccountCode
                row("DEBIT") = item.Debit
                row("CREDIT") = item.Credit
                row("UPDATED_BY") = Me.UserName
                dtJVDetails.Rows.Add(row)
            Next
            dtJVDetails.AcceptChanges()

            'Data for WESM Bill GP Posted
            With itemGP
                row = dtGPPosted.NewRow()
                row("BILLING_PERIOD") = .BillingPeriod
                row("CHARGE_TYPE") = .Charge
                row("DUE_DATE") = .DueDate
                row("DOCUMENT_AMOUNT") = .DocumentAmount
                row("REMARKS") = "Manual DMCM for  " & batchCode & "."
                row("POSTED") = 0
                row("UPDATED_BY") = Me.UserName
                row("BATCH_CODE") = batchCode
                row("POSTED_TYPE") = .PostType
                row("AM_JV_NO") = JVNo
                dtGPPosted.Rows.Add(row)
            End With
            dtGPPosted.AcceptChanges()

            'Data for DMCM WESM Bill Summary
            row = dtDMCMWESMBillSummary.NewRow()
            row("AM_DMCM_NO") = DMCMNo
            row("WESMBILL_SUMMARY_NO") = WESMBillSummaryNo

            If Flag = True Then
                row("ADJUSTMENT") = 0
            Else
                row("ADJUSTMENT") = 1
            End If
            dtDMCMWESMBillSummary.Rows.Add(row)
            dtDMCMWESMBillSummary.AcceptChanges()

            With ds.Tables
                .Add(dtWESMBillSummary)
                .Add(dtJV)
                .Add(dtJVDetails)
                .Add(dtDMCM)
                .Add(dtDMCMDetails)
                .Add(dtGPPosted)
                .Add(dtDMCMWESMBillSummary)
            End With
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "Save Prudential Drawdown"
    Public Sub SavePrudentialDrawdown(ByVal TransactionDate As Date, _
                                      ByVal listDrawdown As List(Of PrudentialDrawdown))
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dt As New DataTable
            dt.TableName = "AM_PRUDENTIAL_DRAWDOWN"
            With dt.Columns
                .Add("COLLECTION_NO", GetType(Long))
                .Add("TRANS_DATE", GetType(Date))
                .Add("DUE_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("DRAWDOWN_AMOUNT", GetType(Decimal))
                .Add("REMAINING_PRUDENTIAL", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            dt.AcceptChanges()

            SQL = "DELETE FROM AM_PRUDENTIAL_DRAWDOWN WHERE trans_date = TO_DATE('" & TransactionDate & "','MM/DD/YYYY')"
            listSQL.Add(SQL)

            For Each item In listDrawdown
                With item
                    Dim row = dt.NewRow()
                    row("COLLECTION_NO") = .CollectionNo
                    row("TRANS_DATE") = .TransactionDate
                    row("DUE_DATE") = .DueDate
                    row("ID_NUMBER") = .IDNumber.IDNumber
                    row("DRAWDOWN_AMOUNT") = .DrawdownAmount
                    row("REMAINING_PRUDENTIAL") = .RemaningPrudential
                    row("UPDATED_BY") = Me.UserName
                    dt.Rows.Add(row)
                End With
            Next
            dt.AcceptChanges()

            ds.Tables.Add(dt)
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "Save Settlement Notice Beginning Balance"
    Public Sub SaveSettlementNoticeBeginningBalance(ByVal TransactionDate As Date, _
                                                    ByVal ListWESMBillSummary As List(Of WESMBillSummary))
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim row As DataRow
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            Dim dt As New DataTable
            dt.TableName = "AM_STL_NOTICE_BEGINNING_BAL"
            With dt.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("NEW_DUEDATE", GetType(Date))
                .Add("BEGINNING_BALANCE", GetType(Decimal))
                .Add("ENDING_BALANCE", GetType(Decimal))
                .Add("GROUP_NO", GetType(Long))
                .Add("ID_TYPE", GetType(String))
                .Add("IS_MFWTAX_DEDUCTED", GetType(String))
                .Add("INV_DM_CM", GetType(String))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
                .Add("TRANSACTION_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
                .Add("ADJUSTMENT", GetType(Integer))
            End With
            dt.AcceptChanges()

            SQL = "DELETE FROM AM_STL_NOTICE_BEGINNING_BAL WHERE transaction_date = TO_DATE('" & TransactionDate & "','MM/DD/YYYY')"
            listSQL.Add(SQL)

            For Each itemWESMBillSummary In ListWESMBillSummary
                With itemWESMBillSummary
                    'Data for GP Posted
                    row = dt.NewRow()
                    row("BILLING_PERIOD") = .BillPeriod
                    row("ID_NUMBER") = .IDNumber.IDNumber
                    row("CHARGE_TYPE") = .ChargeType
                    row("DUE_DATE") = .DueDate
                    row("NEW_DUEDATE") = .DueDate
                    row("BEGINNING_BALANCE") = .BeginningBalance
                    row("ENDING_BALANCE") = .EndingBalance
                    row("GROUP_NO") = .GroupNo
                    row("ID_TYPE") = .IDType
                    row("IS_MFWTAX_DEDUCTED") = .IsMFWTaxDeducted
                    row("INV_DM_CM") = .INVDMCMNo
                    row("SUMMARY_TYPE") = .SummaryType
                    row("WESMBILL_SUMMARY_NO") = .WESMBillSummaryNo
                    row("TRANSACTION_DATE") = TransactionDate
                    row("UPDATED_BY") = Me.UserName
                    row("ADJUSTMENT") = .Adjustment
                    dt.Rows.Add(row)
                End With
            Next
            dt.AcceptChanges()
            ds.Tables.Add(dt)

            Dim dtMain As New DataTable
            dtMain.TableName = "AM_STL_NOTICE_MAIN"
            With dtMain.Columns
                .Add("TRANSACTION_DATE", GetType(Date))
                .Add("TOTAL_BEGINNING_BALANCE", GetType(Decimal))
                .Add("ID_NUMBER", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With

            SQL = "DELETE FROM AM_STL_NOTICE_MAIN WHERE transaction_date = TO_DATE('" & TransactionDate & "','MM/DD/YYYY')"
            listSQL.Add(SQL)

            'Get Distinct Participant from list wesm summary
            Dim lstParticipants As List(Of String)
            lstParticipants = (From x In ListWESMBillSummary _
                               Select x.IDNumber.IDNumber Distinct).ToList

            For Each itmParticipant In lstParticipants
                'Get Total Sum of Participant Beginning Balance
                Dim _itmParticipant = itmParticipant

                Dim TotalBeginningBalance As Decimal = 0
                TotalBeginningBalance = (From x In ListWESMBillSummary _
                                         Where x.IDNumber.IDNumber = _itmParticipant _
                                         Select x.EndingBalance).Sum

                Dim dRow As DataRow
                dRow = dtMain.NewRow
                dRow("TRANSACTION_DATE") = TransactionDate
                dRow("TOTAL_BEGINNING_BALANCE") = TotalBeginningBalance
                dRow("ID_NUMBER") = itmParticipant
                dRow("UPDATED_BY") = Me.UserName
                dRow("UPDATED_DATE") = SystemDate
                dtMain.Rows.Add(dRow)
                dtMain.AcceptChanges()
            Next

            ds.Tables.Add(dtMain)
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "Delete Charge ID Code"
    Public Sub delChargeID(ByVal item As ChargeId)
        Dim delSQL As String
        Dim report As DataReport

        

        Dim Sql = "SELECT revision FROM AM_CHARGE_ID_LIB WHERE CHARGE_ID = '" & item.ChargeId & "'"
        Dim revision = Me.GetRevisionNumber(Sql)

        delSQL = "UPDATE AM_CHARGE_ID_LIB " & _
                 "SET status =0, revision = " & revision & ", updated_by = '" & Me.UserName & "', " & _
                 "updated_date = (SELECT SYSDATE FROM DUAL) " & _
                 "WHERE charge_id = '" & item.ChargeId & "'"
        Try
            report = DataAccess.ExcuteNonQuery(delSQL)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Delete Accounting ID"
    Public Sub delAC(ByVal item As AccountingCode)
        Dim delSQL As String
        Dim report As DataReport

        

        Dim Sql = "SELECT revision FROM AM_ACCOUNTING_CODE WHERE acct_code = '" & item.AccountCode & "'"
        Dim revision = Me.GetRevisionNumber(Sql)

        delSQL = "UPDATE AM_ACCOUNTING_CODE " & _
                 "SET status = 0, revision = " & revision & ", updated_by = '" & Me.UserName & "', " & _
                 "date_committed = (SELECT SYSDATE FROM DUAL) " & _
                 "WHERE ACCT_CODE = '" & item.AccountCode & "'"
        Try
            report = DataAccess.ExcuteNonQuery(delSQL)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get Interest Earned"

    Public Function GetInterestEarned() As List(Of InterestEarned)

        Dim result As New List(Of InterestEarned)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_INTEREST_EARNED ORDER BY TRANSACTION_DATE DESC"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetInterestEarned(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetInterestEarned(ByVal dr As IDataReader) As List(Of InterestEarned)
        Dim result As New List(Of InterestEarned)

        Try
            While dr.Read()
                With dr
                    Dim item As New InterestEarned
                    item.rowId = CInt(.Item("ID"))
                    item.transDate = CDate(FormatDateTime(CDate(.Item("TRANSACTION_DATE")), DateFormat.ShortDate))
                    item.intEarned = CDec(.Item("INT_EARNED"))
                    item.status = CType(CInt(.Item("INT_STATUS")), EnumPostedTypeStatus)
                    item.dtCreated = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.LongDate))
                    item.JVNumber = CLng(.Item("AM_JV_NO"))


                    If Not IsDBNull(.Item("UPDATED_BY")) Then
                        item.updatedby = CStr(.Item("UPDATED_BY"))
                    Else
                        item.updatedby = Nothing
                    End If

                    If Not IsDBNull(.Item("REMARKS")) Then
                        item.Remarks = CStr(.Item("REMARKS"))
                    Else
                        item.Remarks = Nothing
                    End If

                    'item.Remarks = CStr(.Item("REMARKS"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Search Interest Earned"

    Public Function SearchInterestEarned(ByVal start_date As Date, ByVal end_date As Date, ByVal status As Integer) As List(Of InterestEarned)

        Dim result As New List(Of InterestEarned)
        Dim report As New DataReport
        Dim SQL As String

        Try
            

            If status < 0 Then

                SQL = "SELECT * FROM AM_INTEREST_EARNED WHERE TRANSACTION_DATE >= TO_DATE('" & start_date & "','MM/DD/YYYY') AND TRANSACTION_DATE <= TO_DATE('" & end_date & "','MM/DD/YYYY')"

            Else

                SQL = "SELECT * FROM AM_INTEREST_EARNED WHERE TRANSACTION_DATE >= TO_DATE('" & start_date & "','MM/DD/YYYY') AND TRANSACTION_DATE <= TO_DATE('" & end_date & "','MM/DD/YYYY') AND INT_STATUS = '" & status & "'"


            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = GetInterestEarned(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

#End Region

#Region "Get Interest Earn"

    Public Function GetInterestEarn(ByVal transdate As Date) As List(Of InterestEarned)

        Dim result As New List(Of InterestEarned)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_INTEREST_EARNED WHERE TRANSACTION_DATE = TO_DATE('" & transdate & "','MM/DD/YYYY') AND INT_STATUS = 2" 'Check if same date and status(posted) is already exist
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetInterestEarn(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetInterestEarn(ByVal dr As IDataReader) As List(Of InterestEarned)
        Dim result As New List(Of InterestEarned)

        Try
            While dr.Read()
                With dr
                    Dim item As New InterestEarned
                    item.rowId = CInt(.Item("ID"))
                    item.transDate = CDate(FormatDateTime(CDate(.Item("TRANSACTION_DATE")), DateFormat.ShortDate))
                    item.intEarned = CDec(.Item("INT_EARNED"))
                    item.status = CType(CInt(.Item("INT_STATUS")), EnumPostedTypeStatus)
                    item.dtCreated = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.ShortDate))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Save/Update Interest Earned"
    Public Sub SaveInterestEarned(ByVal TransactionDate As Date, ByVal InterestRate As Decimal, ByVal InterestStatus As Integer, ByVal jv_number As Integer, ByVal remarks As String, ByVal Idx As Integer, ByVal Action As Integer)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Dim jv_signatories = GetSignatories("EI").First()

        

        Try
            'Flag 0 means Insert New, else update.
            If Action = 0 Then
                SQL = "INSERT INTO AM_INTEREST_EARNED (ID,TRANSACTION_DATE, INT_EARNED, INT_STATUS, AM_JV_NO, REMARKS,UPDATED_BY) " & _
                      "VALUES (SEQ_AM_INTEREST_EARNED_NO.NEXTVAL, TO_DATE('" & TransactionDate & "','MM/DD/YYYY'), " & InterestRate & ", " & InterestStatus & "," & jv_number & ",'" & remarks & "','" & Me.UserName & "')"
                listSQL.Add(SQL)
            Else
                SQL = "UPDATE AM_INTEREST_EARNED SET INT_EARNED = " & InterestRate & ", INT_STATUS ='" & InterestStatus & "', " & _
                      "AM_JV_NO = '" & jv_number & "', REMARKS='" & remarks & "', UPDATED_BY='" & Me.UserName & "'," & _
                      "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                      "WHERE ID = " & Idx
                listSQL.Add(SQL)
                'SQL = "UPDATE AM_INTEREST_EARNED SET TRANSACTION_DATE = TO_DATE('" & TransactionDate & "','MM/DD/YYYY'), INT_EARNED = " & InterestRate & ", INT_STATUS ='" & InterestStatus & "', " & _
                '      "AM_JV_NO = '" & jv_number & "', REMARKS='" & remarks & "', UPDATED_BY='" & Me.UserName & "'," & _
                '      "UPDATED_DATE = (SELECT SYSDATE FROM DUAL) " & _
                '      "WHERE ID = " & Idx
            End If

            'Create JV
            'If InterestStatus = 0 Then ' Only posted status are allowed to created JV
            If InterestStatus = 2 Then ' Only posted status are allowed to created JV

                Dim batch_sequence As Integer = CInt(GetSequenceID("SEQ_AM_BATCH_CODE"))
                Dim bacth_code As String = EnumPostedType.IES.ToString & "-" & batch_sequence

                'Posted Positive
                If InterestRate > 0 Then

                    SQL = "INSERT INTO AM_JV (AM_JV_NO, AM_JV_DATE, BATCH_CODE, STATUS, PREPARED_BY, CHECKED_BY, APPROVED_BY ,UPDATED_BY, POSTED_TYPE) " & _
                          "VALUES (" & jv_number & ",TO_DATE('" & TransactionDate & "','MM/DD/YYYY') ,'" & bacth_code & "', " & EnumStatus.Active & ",'" & Me.UserName & "','" & jv_signatories.Signatory_2 & "','" & jv_signatories.Signatory_3 & "','" & Me.UserName & "', '" & EnumPostedType.IES.ToString & "')"
                    listSQL.Add(SQL)

                    SQL = "INSERT INTO AM_JV_DETAILS (AM_JV_NO, ACCT_CODE, DEBIT,  UPDATED_BY) " & _
                          "VALUES (" & jv_number & ", '" & CashInbankSettlementcode & "', " & InterestRate & ",'" & Me.UserName & "')"
                    listSQL.Add(SQL)

                    SQL = "INSERT INTO AM_JV_DETAILS (AM_JV_NO, ACCT_CODE, CREDIT,  UPDATED_BY) " & _
                          "VALUES (" & jv_number & ", '" & InterestPayableSTLCode & "', " & InterestRate & ",'" & Me.UserName & "')"
                    listSQL.Add(SQL)

                    SQL = "INSERT INTO AM_WESM_BILL_GP_POSTED (REMARKS, POSTED, UPDATED_DATE, UPDATED_BY, BATCH_CODE, POSTED_TYPE, DOCUMENT_AMOUNT, AM_JV_NO) " & _
                          "VALUES ('" & remarks & "', '0', TO_DATE('" & TransactionDate & "','MM/DD/YYYY'), '" & Me.UserName & "', '" & bacth_code & "', '" & EnumPostedType.IES.ToString & "', '" & InterestRate & "', '" & jv_number & "')"
                    listSQL.Add(SQL)

                Else

                    SQL = "INSERT INTO AM_JV (AM_JV_NO, AM_JV_DATE, BATCH_CODE, STATUS, PREPARED_BY, CHECKED_BY, APPROVED_BY ,UPDATED_BY, POSTED_TYPE) " & _
                          "VALUES (" & jv_number & ",TO_DATE('" & TransactionDate & "','MM/DD/YYYY'),'" & bacth_code & "', " & EnumStatus.Active & ",'" & Me.UserName & "','" & jv_signatories.Signatory_1 & "','" & jv_signatories.Signatory_2 & "','" & Me.UserName & "', '" & EnumPostedType.IES.ToString & "')"
                    listSQL.Add(SQL)

                    SQL = "INSERT INTO AM_JV_DETAILS (AM_JV_NO, ACCT_CODE, DEBIT,  UPDATED_BY) " & _
                          "VALUES (" & jv_number & ", '" & InterestPayableSTLCode & "', " & Math.Abs(InterestRate) & ",'" & Me.UserName & "')"
                    listSQL.Add(SQL)

                    SQL = "INSERT INTO AM_JV_DETAILS (AM_JV_NO, ACCT_CODE, CREDIT,  UPDATED_BY) " & _
                          "VALUES (" & jv_number & ", '" & CashInbankSettlementcode & "', " & Math.Abs(InterestRate) & ",'" & Me.UserName & "')"
                    listSQL.Add(SQL)

                    SQL = "INSERT INTO AM_WESM_BILL_GP_POSTED (REMARKS, POSTED, UPDATED_DATE, UPDATED_BY, BATCH_CODE, POSTED_TYPE, DOCUMENT_AMOUNT, AM_JV_NO) " & _
                          "VALUES ('" & remarks & "', '0', TO_DATE('" & TransactionDate & "','MM/DD/YYYY'), '" & Me.UserName & "', '" & bacth_code & "', '" & EnumPostedType.IES.ToString & "', '" & InterestRate & "', '" & jv_number & "')"
                    listSQL.Add(SQL)
                End If

            End If

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Delete Interest Earned"
    Public Sub DeleteInterestEarned(ByVal Idx As Integer)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        

        Try
            SQL = "DELETE FROM AM_INTEREST_EARNED " & _
                  "WHERE ID = " & Idx

            listSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get Current Deferred Payment"
    Public Function GetCurrentDeferredPayment() As List(Of DeferredMain)
        Dim ret As New List(Of DeferredMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_DEFERRED_PAYMENT_MAIN A " & _
                                 "WHERE PAYMENT_NO = (SELECT MAX(PAYMENT_NO) FROM AM_DEFERRED_PAYMENT_MAIN) " & _
                                 "AND OUTSTANDING_DEFERRED_PAYMENT >= 0"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetCurrentDeferredPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Public Function GetCurrentDeferredPayment(ByVal PaymentNo As Long) As List(Of DeferredMain)
        Dim ret As New List(Of DeferredMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_DEFERRED_PAYMENT_MAIN A " & _
                                 "WHERE PAYMENT_NO = " & PaymentNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetCurrentDeferredPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetCurrentDeferredPayment(ByVal dr As IDataReader) As List(Of DeferredMain)
        Dim ret As New List(Of DeferredMain)
        Try
            While dr.Read()
                With dr
                    Dim item As New DeferredMain
                    item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                    item.DeferredPaymentNo = CLng(.Item("DEFERRED_PAYMENT_NO"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.OutstandingBalanceDeferredPayment = CDec(.Item("OUTSTANDING_DEFERRED_PAYMENT"))
                    item.PaymentNo = CLng(.Item("PAYMENT_NO"))
                    item.DeferredAmount = CDec(.Item("DEFERRED_AMOUNT"))
                    item.DeferredType = DirectCast([Enum].Parse(GetType(EnumDeferredType), .Item("DEFERRED_TYPE").ToString), EnumDeferredType)
                    item.ChargeType = DirectCast([Enum].Parse(GetType(EnumChargeType), .Item("CHARGE_TYPE").ToString), EnumChargeType)
                    item.OriginalDate = CDate(FormatDateTime(CDate(.Item("ORIG_DATE")), DateFormat.ShortDate))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get Previous Deferred Payment"
    Public Function GetPrevDeferredPayment(ByVal PaymentNo As Long) As List(Of DeferredMain)
        Dim ret As New List(Of DeferredMain)
        Dim report As New DataReport
        Dim report2 As New DataReport

        Try

            Dim SQL As String = "SELECT MAX(PAYMENT_NO) AS PREV_PAYMENT_NO FROM AM_PAYMENT_NEW WHERE PAYMENT_NO < " & PaymentNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim SQL2 As String = "SELECT A.* FROM AM_DEFERRED_PAYMENT_MAIN A WHERE A.PAYMENT_NO =" & Me.GetPrevDeferredPaymentNo(report.ReturnedIDatareader)

            report2 = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL2)
            If report2.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report2.ErrorMessage)
            End If

            ret = Me.GetCurrentDeferredPayment(report2.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetPrevDeferredPaymentNo(ByVal dr As IDataReader) As Long
        Dim ret As New Long
        Try
            While dr.Read()
                With dr
                    ret = CLng(If(IsDBNull(.Item("PREV_PAYMENT_NO")), 0, CLng(.Item("PREV_PAYMENT_NO"))))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get ARCollection on AM_COLLECTION, AM_COLLECTION_ALLOCATION and AM_COLLECTION_MONITORING"

    Public Function GetCollectionAllocation(ByVal ARAllocationDate As Date,
                                            ByVal IsAllocated As Integer) As List(Of ARCollection)
        Dim result As New List(Of ARCollection)
        Dim report As New DataReport
        Try
            'Dim SQL As String = "SELECT AWS.WESMBILL_SUMMARY_NO, AWS.BILLING_PERIOD, AWS.ID_NUMBER, AP.PARTICIPANT_ID, AWS.INV_DM_CM, AWS.DUE_DATE, ACA.ENDING_BALANCE, " & vbNewLine & _
            '                           "CASE WHEN ACA.AMOUNT<0 AND COLLECTION_TYPE IN (0,1,6,7,9,11) THEN ACA.ENDING_BALANCE - ABS(ACA.AMOUNT) " & vbNewLine & _
            '                            "WHEN ACA.AMOUNT>0  AND COLLECTION_TYPE IN (0,1,6,7,9,11) THEN ACA.ENDING_BALANCE - ACA.AMOUNT WHEN ACA.AMOUNT>0 AND COLLECTION_TYPE = 8 THEN ACA.ENDING_BALANCE ELSE 0 END AS NEW_ENDING_BALANCE, " & vbNewLine & _
            '                           "ACA.NEW_DUEDATE, ACA.ALLOCATION_DATE, ACA.AMOUNT, ACA.ENERGY_WITHHOLD, ACA.COLLECTION_TYPE, AC.COLLECTION_CATEGORY, AWS.WESMBILL_BATCH_NO, AW.REMARKS " & vbNewLine & _
            '                    "FROM AM_COLLECTION AC " & vbNewLine & _
            '                    "JOIN AM_COLLECTION_ALLOCATION ACA ON AC.COLLECTION_NO = ACA.COLLECTION_NO " & vbNewLine & _
            '                    "JOIN AM_WESM_BILL_SUMMARY AWS ON AWS.WESMBILL_SUMMARY_NO = ACA.WESMBILL_SUMMARY_NO " & vbNewLine & _
            '                    "JOIN AM_PARTICIPANTS AP ON AP.ID_NUMBER = AWS.ID_NUMBER " & vbNewLine & _
            '                    "JOIN AM_WESM_BILL AW ON AW.INVOICE_NO = AWS.INV_DM_CM AND AW.CHARGE_TYPE = AWS.CHARGE_TYPE " & vbNewLine & _
            '                    "WHERE AC.ALLOCATION_DATE = TO_DATE('" & CDate(FormatDateTime(ARAllocationDate, DateFormat.ShortDate)) & "', 'MM/DD/YYYY') " & vbNewLine & _
            '                    "AND AC.IS_ALLOCATED = " & IsAllocated & " AND AC.IS_POSTED = 1 AND ACA.COLLECTION_TYPE IN (" & vbNewLine & _
            '                    EnumCollectionType.DefaultInterestOnEnergy & ", " & _
            '                    EnumCollectionType.Energy & ", " & _
            '                    EnumCollectionType.VatOnEnergy & ", " & _
            '                    EnumCollectionType.WithholdingTaxOnMF & ", " & _
            '                    EnumCollectionType.WithholdingVatOnMF & ", " & _
            '                    EnumCollectionType.WithholdingTaxOnDefaultInterest & ", " & _
            '                    EnumCollectionType.WithholdingVatOnDefaultInterest & ", " & _
            '                    EnumCollectionType.DefaultInterestOnMF & ", " & _
            '                    EnumCollectionType.DefaultInterestOnVatOnMF & ", " & _
            '                    EnumCollectionType.MarketFees & ", " & _
            '                    EnumCollectionType.VatOnMarketFees & ")"

            ' Change FROM AWS.ID_NUMBER To ACA.ID_NUMBER To cater the historical movement of invoices as 06/05/2020
            Dim SQL As String = "SELECT AWS.WESMBILL_SUMMARY_NO, AWS.BILLING_PERIOD, ACA.ID_NUMBER, AP.PARTICIPANT_ID, AWS.INV_DM_CM, AWS.DUE_DATE, ACA.ENDING_BALANCE, " & vbNewLine & _
                                       "CASE WHEN ACA.AMOUNT<0 AND COLLECTION_TYPE IN (0,1,6,7,9,11) THEN ACA.ENDING_BALANCE - ABS(ACA.AMOUNT) " & vbNewLine & _
                                        "WHEN ACA.AMOUNT>0  AND COLLECTION_TYPE IN (0,1,6,7,9,11) THEN ACA.ENDING_BALANCE - ACA.AMOUNT WHEN ACA.AMOUNT>0 AND COLLECTION_TYPE = 8 THEN ACA.ENDING_BALANCE ELSE 0 END AS NEW_ENDING_BALANCE, " & vbNewLine & _
                                       "ACA.DUE_DATE AS NEW_DUEDATE, ACA.ALLOCATION_DATE, ACA.AMOUNT, ACA.ENERGY_WITHHOLD, ACA.COLLECTION_TYPE, AC.COLLECTION_CATEGORY, AWS.WESMBILL_BATCH_NO, AW.REMARKS " & vbNewLine & _
                                "FROM AM_COLLECTION AC " & vbNewLine & _
                                "JOIN AM_COLLECTION_ALLOCATION ACA ON AC.COLLECTION_NO = ACA.COLLECTION_NO " & vbNewLine & _
                                "JOIN AM_WESM_BILL_SUMMARY AWS ON AWS.WESMBILL_SUMMARY_NO = ACA.WESMBILL_SUMMARY_NO " & vbNewLine & _
                                "JOIN AM_PARTICIPANTS AP ON AP.ID_NUMBER = ACA.ID_NUMBER " & vbNewLine & _
                                "JOIN AM_WESM_BILL AW ON AW.INVOICE_NO = AWS.INV_DM_CM AND AW.CHARGE_TYPE = AWS.CHARGE_TYPE " & vbNewLine & _
                                "WHERE AC.ALLOCATION_DATE = TO_DATE('" & CDate(FormatDateTime(ARAllocationDate, DateFormat.ShortDate)) & "', 'MM/DD/YYYY') " & vbNewLine & _
                                "AND AC.IS_ALLOCATED = " & IsAllocated & " AND AC.IS_POSTED = 1 AND ACA.COLLECTION_TYPE IN (" & vbNewLine & _
                                EnumCollectionType.DefaultInterestOnEnergy & ", " & _
                                EnumCollectionType.Energy & ", " & _
                                EnumCollectionType.VatOnEnergy & ", " & _
                                EnumCollectionType.WithholdingTaxOnMF & ", " & _
                                EnumCollectionType.WithholdingVatOnMF & ", " & _
                                EnumCollectionType.WithholdingTaxOnDefaultInterest & ", " & _
                                EnumCollectionType.WithholdingVatOnDefaultInterest & ", " & _
                                EnumCollectionType.DefaultInterestOnMF & ", " & _
                                EnumCollectionType.DefaultInterestOnVatOnMF & ", " & _
                                EnumCollectionType.MarketFees & ", " & _
                                EnumCollectionType.VatOnMarketFees & ")"

            report = DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocationDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionAllocationDetails(ByVal dr As IDataReader) As List(Of ARCollection)
        Dim result As New List(Of ARCollection)

        Try
            While dr.Read()
                Dim item As New ARCollection
                With dr
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.IDNumber = CStr(.Item("ID_NUMBER").ToString())
                    item.ParticipantID = .Item("PARTICIPANT_ID").ToString()
                    item.InvoiceNumber = .Item("INV_DM_CM").ToString()
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE").ToString()) * -1
                    item.EnergyWithHold = CDec(.Item("ENERGY_WITHHOLD").ToString())
                    item.NewDueDate = CDate(FormatDateTime(CDate(.Item("NEW_DUEDATE")), DateFormat.ShortDate))
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE").ToString()) * -1
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE").ToString())
                    item.AllocationAmount = CDec(.Item("AMOUNT").ToString()) * -1
                    item.CollectionType = CType(.Item("COLLECTION_TYPE"), EnumCollectionType)
                    item.CollectionCategory = CType(.Item("COLLECTION_CATEGORY"), EnumCollectionCategory)
                    item.BillingRemarks = CStr(.Item("REMARKS").ToString)
                    item.OffsettingSequence = 0
                    result.Add(item)
                End With
            End While

            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get AllocationDate on AM_PAYMENT_NEW"
    Public Function GetAMPaymentNew(ByVal JVNo As Long) As AllocationDate
        Dim ret As New AllocationDate
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT B.*, A.* FROM AM_PAYMENT_NEW A " & _
                                "LEFT JOIN AM_PAYMENT_NEW_DETAILS B ON A.PAYMENT_NO = B.PAYMENT_NO " & _
                                "WHERE B.AM_JV_NO = " & JVNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetPaymentNewForGP(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetPaymentNewForGP(ByVal reader As IDataReader) As AllocationDate
        Dim result As New AllocationDate
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result = New AllocationDate(CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")))), CLng(.Item("PAYMENT_NO")))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetPayAllocDate() As List(Of AllocationDate)
        Dim result As New List(Of AllocationDate)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT DISTINCT APN.ALLOCATION_DATE, APN.PAYMENT_NO, APN.REMITTANCE_DATE FROM AM_PAYMENT_NEW APN ORDER BY APN.ALLOCATION_DATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPayAllocDateList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Public Function GetPayAllocDate(ByVal AllocDate As Date) As List(Of AllocationDate)
        Dim result As New List(Of AllocationDate)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT DISTINCT APN.ALLOCATION_DATE, APN.PAYMENT_NO, APN.REMITTANCE_DATE " & _
                                "FROM AM_PAYMENT_NEW APN " & vbNewLine & _
                                "WHERE APN.ALLOCATION_DATE = TO_DATE('" & AllocDate & "','MM/DD/YYYY') " & vbNewLine & _
                                "ORDER BY APN.ALLOCATION_DATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPayAllocDateList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetPayAllocDateList(ByVal reader As IDataReader) As List(Of AllocationDate)
        Dim result As New List(Of AllocationDate)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(New AllocationDate(CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")))), CLng(.Item("PAYMENT_NO")), CDate(FormatDateTime(CDate(.Item("REMITTANCE_DATE"))))))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get Data on AM_PAYMENT_NEW_DETAILS"
    Public Function GetAMPaymentNewDetails(ByVal PaymentNo As Long) As List(Of Long)
        Dim ret As New List(Of Long)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_PAYMENT_NEW_DETAILS A " & _
                                 "WHERE PAYMENT_NO = " & PaymentNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewDetails(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Public Function GetAMPaymentNewDetails(ByVal dr As IDataReader) As List(Of Long)
        Dim ret As New List(Of Long)
        Try
            While dr.Read()
                With dr
                    ret.Add(CLng(.Item("AM_JV_NO")))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    'Public Function GetAMPaymentNewDetails(ByVal PaymentBatchCode As String) As List(Of )
    '    Dim ret As New List(Of Long)
    '    Dim report As New DataReport

    '    Try
    '        Dim SQL As String = "SELECT A.* FROM AM_PAYMENT_NEW_DETAILS A " & _
    '                             "WHERE PAYMENT_NO = " & PaymentNo

    '        report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
    '        If report.ErrorMessage.Length <> 0 Then
    '            Throw New ApplicationException(report.ErrorMessage)
    '        End If

    '        ret = Me.GetAMPaymentNewDetails(report.ReturnedIDatareader)

    '    Catch ex As Exception
    '        Throw New ApplicationException(ex.Message)
    '    End Try

    '    Return ret
    'End Function

    'Public Function GetAMPaymentNewDetails(ByVal dr As IDataReader) As List(Of Long)
    '    Dim ret As New List(Of Long)
    '    Try
    '        While dr.Read()
    '            With dr
    '                ret.Add(CLng(.Item("AM_JV_NO")))
    '            End With
    '        End While
    '    Catch ex As Exception
    '        Throw New ApplicationException(ex.Message)
    '    Finally
    '        If Not dr.IsClosed Then
    '            dr.Close()
    '        End If
    '    End Try
    '    Return ret
    'End Function

#End Region

#Region "Get JournalVoucher for Payment"
    Public Function GetPaymentJV(ByVal ListofJVNumber As List(Of Long)) As List(Of JournalVoucher)
        Dim ret As New List(Of JournalVoucher)
        Dim report As New DataReport

        Try
            If ListofJVNumber.Count > 0 Then
                Dim SQL As String = "SELECT A.* FROM AM_JV A " _
                                & "WHERE AM_JV_NO  IN ("
                For Each JVNo In ListofJVNumber
                    SQL &= "'" & JVNo & "',"
                Next

                If SQL.Length <> 0 Then
                    SQL = Trim(Mid(SQL, 1, Len(SQL) - 1)) & ")"
                End If
                report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

                If report.ErrorMessage.Length <> 0 Then
                    Throw New ApplicationException(report.ErrorMessage)
                End If

                ret = Me.GetPaymentJV(report.ReturnedIDatareader)            
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetPaymentJV(ByVal dr As IDataReader) As List(Of JournalVoucher)
        Dim ret As New List(Of JournalVoucher)
        Try
            While dr.Read()
                With dr
                    Dim item As New JournalVoucher
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.ShortDate))
                    item.BatchCode = CStr(.Item("BATCH_CODE"))
                    item.Status = CInt(.Item("STATUS"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))
                    item.CheckedBy = CStr(.Item("CHECKED_BY"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.PostedType = CStr(.Item("POSTED_TYPE"))
                    item.JVDetails = Me.GetPaymentJVDetails(item.JVNumber)
                    item.Remarks = GetWESMBillGPPostedRemarks(item.JVNumber).Remarks
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    Public Function GetWESMBillGPPostedRemarks(ByVal JVNo As Long) As WESMBillGPPosted
        Dim ret As New WESMBillGPPosted
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.* FROM AM_WESM_BILL_GP_POSTED a " & _
                                "WHERE A.AM_JV_NO = " & JVNo & _
                                "ORDER BY a.BILLING_PERIOD, a.POSTED ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetWESMBillGPPostedRemarks(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetWESMBillGPPostedRemarks(ByVal dr As IDataReader) As WESMBillGPPosted
        Dim result As New WESMBillGPPosted
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillGPPosted

                    If Not .Item("BILLING_PERIOD") Is DBNull.Value Then
                        item.BillingPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    Else
                        item.BillingPeriod = 0
                    End If

                    item.SettlementRun = CStr(.Item("STL_RUN").ToString())

                    If (.Item("CHARGE_TYPE")) Is DBNull.Value Then
                        item.Charge = Nothing
                    Else
                        item.Charge = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    End If

                    item.Posted = CInt(.Item("POSTED"))
                    If Not IsDate(.Item("DUE_DATE")) Then
                        item.DueDate = Nothing
                    Else
                        item.DueDate = CDate(.Item("DUE_DATE"))
                    End If

                    item.DocumentAmount = CDec(.Item("DOCUMENT_AMOUNT"))
                    item.BatchCode = .Item("BATCH_CODE").ToString()
                    item.Remarks = .Item("REMARKS").ToString()
                    item.GPRefNo = CStr(.Item("GP_REFNO").ToString())
                    item.PostType = CStr(.Item("POSTED_TYPE").ToString())                    
                    item.JVNumber = CLng(.Item("AM_JV_NO").ToString)
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumPostedType), CStr(.Item("POSTED_TYPE"))), EnumPostedType)

                    result = item
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetPaymentJVDetails(ByVal JVNo As Long) As List(Of JournalVoucherDetails)
        Dim ret As New List(Of JournalVoucherDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_JV_DETAILS A " _
                                & "WHERE AM_JV_NO  = " & JVNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetPaymentJVDetails(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetPaymentJVDetails(ByVal dr As IDataReader) As List(Of JournalVoucherDetails)
        Dim ret As New List(Of JournalVoucherDetails)
        Try
            While dr.Read()
                With dr
                    Dim item As New JournalVoucherDetails
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    item.AccountCode = CStr(.Item("ACCT_CODE"))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get FundTransferForm for Payment"
    Public Function GetFTFforPayment(ByVal ListofJVNumber As List(Of String)) As List(Of FundTransferFormMain)
        Dim ret As New List(Of FundTransferFormMain)
        Dim report As New DataReport

        Try

            If ListofJVNumber.Count > 0 Then
                Dim SQL As String = "SELECT A.* FROM AM_FTF_MAIN A " _
                                    & "WHERE BATCH_CODE  IN ("
                For Each JVNo In ListofJVNumber
                    SQL &= "'" & JVNo & "',"
                Next

                If SQL.Length <> 0 Then
                    SQL = Trim(Mid(SQL, 1, Len(SQL) - 1)) & ")"
                End If

                report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
                If report.ErrorMessage.Length <> 0 Then
                    Throw New ApplicationException(report.ErrorMessage)
                End If

                ret = Me.GetFTFforPayment(report.ReturnedIDatareader)            
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Public Function GetFTFforPayment(ByVal JVNumber As Long) As List(Of FundTransferFormMain)
        Dim ret As New List(Of FundTransferFormMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_FTF_MAIN A " _
                                & "WHERE BATCH_CODE = " & JVNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetFTFforPayment(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetFTFforPayment(ByVal dr As IDataReader) As List(Of FundTransferFormMain)
        Dim ret As New List(Of FundTransferFormMain)
        Try
            While dr.Read()
                With dr
                    Dim item As New FundTransferFormMain
                    item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                    item.BatchCode = CStr(.Item("BATCH_CODE"))
                    item.RefNo = CInt(.Item("REF_NO"))
                    item.DRDate = CDate(FormatDateTime(CDate(.Item("DR_DATE")), DateFormat.ShortDate))
                    item.CRDate = CDate(FormatDateTime(CDate(.Item("CR_DATE")), DateFormat.ShortDate))
                    item.TotalAmount = CDec(.Item("TOTAL_AMOUNT"))
                    item.TransType = CType(.Item("TRANS_TYPE"), EnumFTFTransType)
                    item.Status = CType(.Item("STATUS"), EnumStatus)
                    item.IsPosted = CType(.Item("IS_POSTED"), EnumIsPosted)
                    item.RequestingApproval = CStr(.Item("REQUESTING_APPROVAL"))
                    item.PreparedBy = CStr(.Item("UPDATED_BY"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.ListOfFTFParticipants = Me.GetFTFParticipantForPayment(item.RefNo)
                    item.ListOfFTFDetails = Me.GetFTFDetailsForPayment(item.RefNo)
                    ret.Add(item)
                    ret.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    Public Function GetFTFParticipantForPayment(ByVal RefNumber As Long) As List(Of FundTransferFormParticipant)
        Dim ret As New List(Of FundTransferFormParticipant)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID FROM AM_FTF_PARTICIPANT A " _
                                & "LEFT JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER " _
                                & "WHERE A.REF_NO = " & RefNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetFTFParticipantForPayment(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetFTFParticipantforPayment(ByVal dr As IDataReader) As List(Of FundTransferFormParticipant)
        Dim ret As New List(Of FundTransferFormParticipant)
        Try
            While dr.Read()
                With dr
                    Dim item As New FundTransferFormParticipant
                    item.RefNo = CLng(.Item("REF_NO"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.Amount = CDec(.Item("AMOUNT"))
                    ret.Add(item)
                    ret.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    Public Function GetFTFDetailsForPayment(ByVal RefNumber As Long) As List(Of FundTransferFormDetails)
        Dim result As New List(Of FundTransferFormDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_FTF_DETAILS A " _
                                & "WHERE REF_NO = " & RefNumber

            
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetFundTransferFormDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetFTFDetailsForPayment(ByVal dr As IDataReader) As List(Of FundTransferFormDetails)
        Dim ret As New List(Of FundTransferFormDetails)
        Try
            While dr.Read()
                With dr
                    Dim item As New FundTransferFormDetails
                    item.RefNo = CLng(.Item("REF_NO"))
                    item.BankAccountNo = CStr(.Item("BANK_ACCNT_NO").ToString)
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    ret.Add(item)
                    ret.TrimExcess()
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return ret
    End Function
#End Region

#Region "Get DebitCreditMemo for Payment"
    Public Function GetDMCMforPayment(ByVal JVNumber As Long) As List(Of DebitCreditMemo)
        Dim ret As New List(Of DebitCreditMemo)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT A.* FROM AM_DMCM A " _
                                & "WHERE AM_JV_NO = " & JVNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetDMCMforPayment(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetDMCMforPayment(ByVal dr As IDataReader) As List(Of DebitCreditMemo)
        Dim ret As New List(Of DebitCreditMemo)
        Dim DMCMNoList As New List(Of Long)
        Try
            While dr.Read()
                With dr
                    Dim item As New DebitCreditMemo

                    item.DMCMNumber = CInt(.Item("AM_DMCM_NO"))

                    DMCMNoList.Add(item.DMCMNumber)

                    item.JVNumber = CLng(.Item("AM_JV_NO"))

                    If IsNumeric(.Item("BILLING_PERIOD")) Then
                        item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    End If

                    If IsDate(.Item("DUE_DATE")) Then
                        item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    End If

                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.TransType = CType(System.Enum.Parse(GetType(EnumDMCMTransactionType), CStr(.Item("TRANS_TYPE"))), EnumDMCMTransactionType)
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.Particulars = .Item("PARTICULARS").ToString()
                    item.EWT = CDec(.Item("EWT"))
                    item.EWV = CDec(.Item("EWV"))
                    item.Vatable = CDec(.Item("VATABLE"))
                    item.VAT = CDec(.Item("VAT"))
                    item.VATExempt = CDec(.Item("VAT_EXEMPT"))
                    item.VatZeroRated = CDec(.Item("VAT_ZERO_RATED"))
                    item.Others = CDec(.Item("OTHERS"))
                    item.TotalAmountDue = CDec(.Item("TOTAL_AMOUNT_DUE"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))
                    item.CheckedBy = CStr(.Item("CHECKED_BY"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    ret.Add(item)
                    ret.TrimExcess()
                End With
            End While

            Dim DMCMDetailsList As List(Of DebitCreditMemoDetails) = Me.GetDMCMDetailsforPayment(DMCMNoList)
            Dim cnt As Integer = 0
            For Each item In ret
                cnt += 1
                Dim DMCMDetailsPerItem As List(Of DebitCreditMemoDetails) = (From x In DMCMDetailsList _
                                                                             Where x.DMCMNumber = item.DMCMNumber _
                                                                             Select x).ToList
                item.DMCMDetails = DMCMDetailsPerItem
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    Public Function GetDMCMDetailsforPayment(ByVal DMCMNoList As List(Of Long)) As List(Of DebitCreditMemoDetails)
        Dim ret As New List(Of DebitCreditMemoDetails)
        Dim report As New DataReport

        Try

            Dim dmcmMin As Long = (From x In DMCMNoList).DefaultIfEmpty.Min
            Dim dmcmMax As Long = (From x In DMCMNoList).DefaultIfEmpty.Max

            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID FROM AM_DMCM_DETAILS A " _
                              & "LEFT JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER " _
                              & "WHERE A.AM_DMCM_NO BETWEEN " & dmcmMin & " And " & dmcmMax




            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetDMCMDetailsforPayment(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetDMCMDetailsforPayment(ByVal dr As IDataReader) As List(Of DebitCreditMemoDetails)
        Dim ret As New List(Of DebitCreditMemoDetails)

        Try
            While dr.Read()
                With dr
                    Dim item As New DebitCreditMemoDetails

                    item.DMCMNumber = CInt(.Item("AM_DMCM_NO"))
                    item.InvDMCMNo = CStr(If(IsDBNull(.Item("INV_DM_CM")), "", .Item("INV_DM_CM")))
                    item.IDNumber = New AMParticipants(.Item("ID_NUMBER").ToString(), .Item("PARTICIPANT_ID").ToString())
                    item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType)
                    item.AccountCode = CStr(.Item("ACCT_CODE"))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    item.IsComputed = CType(System.Enum.Parse(GetType(EnumDMCMComputed), CStr(.Item("IS_COMPUTE"))), EnumDMCMComputed)
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    ret.Add(item)
                End With
            End While

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return ret
    End Function


#End Region

#Region "Get APAllocation on AM_PAYMENT_NEW_AP"

    Public Function GetAMPaymentNewAPByYear(ByVal SelectedYear As String) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Dim report As New DataReport
        Try

            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, B.WESMBILL_BATCH_NO, B.ENERGY_WITHHOLD, C.ID_NUMBER, C.PARTICIPANT_ID, D.REMARKS " & vbNewLine _
                                & "FROM AM_PAYMENT_NEW_AP A " & vbNewLine _
                                & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " & vbNewLine _
                                & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                                & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                                & "WHERE TO_CHAR(A.ALLOCATION_DATE, 'YYYY') = '" & SelectedYear & "' AND B.BALANCE_TYPE = 'AP'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewAP(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetAMPaymentNewAP(ByVal PaymentNo As Long) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Dim report As New DataReport
        Try

            'Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS FROM AM_PAYMENT_NEW_AP A " _
            '      & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
            '      & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = B.ID_NUMBER " _
            '      & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
            '      & "WHERE A.PAYMENT_NO  = " & PaymentNo & " AND B.BALANCE_TYPE = 'AP'"

            'added by lance for historical of CAP Summary 06/05/2020 FROM B.ID_NUMBER TO A.ID_NUMBER
            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS FROM AM_PAYMENT_NEW_AP A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                              & "WHERE A.PAYMENT_NO  = " & PaymentNo & " AND B.BALANCE_TYPE = 'AP'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewAP(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewAP(ByVal dr As IDataReader) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Try
            While dr.Read()
                With dr
                    Dim item As New APAllocation
                    Debug.Print(CStr(.Item("INV_DM_CM")))
                    item.BillingRemarks = CStr(.Item("REMARKS"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE"))
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.NewDueDate = CDate(FormatDateTime(CDate(.Item("NEW_DUEDATE")), DateFormat.ShortDate))
                    item.AllocationAmount = CDec(.Item("ALLOCATION_AMOUNT"))
                    item.PaymentType = CType(.Item("PAYMENT_TYPE"), EnumPaymentNewType)
                    item.PaymentCategory = CType(.Item("PAYMENT_CATEGORY"), EnumCollectionCategory)
                    item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    item.ChargeType = CType(CStr(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE")))), EnumChargeType)
                    item.OffsettingSequence = 0
                    item.InvoiceNumber = CStr(.Item("INV_DM_CM"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.EnergyWithHold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.GeneratedDMCM = CLng(.Item("AM_DMCM_NO"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get AM_PAYMENT_NEW_OFFSETTING_AP"
    Public Function GetAMPaymentNewOffsetAPByYear(ByVal SelectedYear As String) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, B.WESMBILL_BATCH_NO, B.ENERGY_WITHHOLD, C.ID_NUMBER, C.PARTICIPANT_ID, D.REMARKS FROM AM_PAYMENT_NEW_OFFSETTING_AP A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                              & "WHERE TO_CHAR(A.ALLOCATION_DATE, 'YYYY') = '" & SelectedYear & "' AND B.BALANCE_TYPE = 'AP'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewOffsetAP(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetAMPaymentNewOffsetAP(ByVal PaymentNo As Long) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Dim report As New DataReport
        Try
            'Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS FROM AM_PAYMENT_NEW_OFFSETTING_AP A " _
            '                  & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
            '                  & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = B.ID_NUMBER " _
            '                  & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
            '                  & "WHERE A.PAYMENT_NO  = " & PaymentNo & " AND B.BALANCE_TYPE = 'AP'"

            'added by lance for historical of CAP Summary 06/05/2020 FROM B.ID_NUMBER TO A.ID_NUMBER
            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, A.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS FROM AM_PAYMENT_NEW_OFFSETTING_AP A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                              & "WHERE A.PAYMENT_NO  = " & PaymentNo & " AND B.BALANCE_TYPE = 'AP'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewOffsetAP(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewOffsetAP(ByVal dr As IDataReader) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Try
            Dim ctr As Integer = 0
            While dr.Read()
                With dr
                    Dim item As New APAllocation
                    ctr += 1
                    item.BillingRemarks = CStr(.Item("REMARKS"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE"))
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.NewDueDate = CDate(FormatDateTime(CDate(.Item("NEW_DUEDATE")), DateFormat.ShortDate))
                    item.AllocationAmount = CDec(.Item("ALLOCATION_AMOUNT"))
                    item.PaymentType = CType(.Item("PAYMENT_TYPE"), EnumPaymentNewType)
                    item.PaymentCategory = CType(.Item("PAYMENT_CATEGORY"), EnumCollectionCategory)
                    item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    item.ChargeType = CType(CStr(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE")))), EnumChargeType)
                    item.OffsettingSequence = CInt(.Item("OFFSET_SEQ"))
                    item.InvoiceNumber = CStr(.Item("INV_DM_CM"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.GeneratedDMCM = CLng(.Item("AM_DMCM_NO"))
                    item.EnergyWithHold = CDec(.Item("ENERGY_WITHHOLD"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get AM_PAYMENT_NEW_WBS_BALANCE"
    Public Function GetAMPaymentNewWBSBalance(ByVal PaymentNo As Long) As List(Of PaymentWBSHistoryBalance)
        Dim ret As New List(Of PaymentWBSHistoryBalance)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID " _
                              & "FROM AM_PAYMENT_NEW_WBS_BALANCE A " _
                              & "LEFT JOIN AM_PARTICIPANTS B ON B.ID_NUMBER = A.ID_NUMBER " _
                              & "WHERE A.PAYMENT_NO  = " & PaymentNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewWBSBalance(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewWBSBalance(ByVal dr As IDataReader) As List(Of PaymentWBSHistoryBalance)
        Dim ret As New List(Of PaymentWBSHistoryBalance)
        Try
            While dr.Read()
                With dr
                    Dim item As New PaymentWBSHistoryBalance                    
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.OriginalDueDate = CDate(FormatDateTime(CDate(.Item("ORIG_DUE_DATE")), DateFormat.ShortDate))
                    item.BillingPeriodRemarks = If(IsDBNull(.Item("BILLING_PERIOD_REMARKS")), "", CStr(.Item("BILLING_PERIOD_REMARKS")))
                    item.TotalBillAmount = CDec(.Item("TOTAL_BILL"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.AmountBalance = CDec(.Item("AMOUNT_BALANCE"))
                    item.ChargeType = CType(CStr(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE")))), EnumChargeType)
                    item.BalanceType = CType(CStr(System.Enum.Parse(GetType(EnumBalanceType), CStr(.Item("BALANCE_TYPE")))), EnumBalanceType)
                    item.WESMBillBatchNo = CLng(If(IsDBNull(.Item("WESMBILL_BATCH_NO")), 0, .Item("WESMBILL_BATCH_NO")))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

#End Region

#Region "Get AM_PAYMENT_NEW_WBS_NOTRANS AR"
    Public Function GetAMPaymentNewNoTransAR(ByVal PaymentNo As Long, ByVal ChargeType As EnumChargeType) As List(Of ARCollection)
        Dim ret As New List(Of ARCollection)
        Dim report As New DataReport
        Dim SQL As String = ""
        Try
            'Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS " _
            '                  & "FROM AM_PAYMENT_NEW_WBS_NOTRANS A " _
            '                  & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
            '                  & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = B.ID_NUMBER " _
            '                  & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
            '                  & "WHERE B.BALANCE_TYPE = 'AR' AND A.ENDING_BALANCE <= 0 AND A.PAYMENT_NO  = " & PaymentNo & " AND B.CHARGE_TYPE ='" & ChargeType.ToString() & "'"

            'added by lance for historical of CAP Summary 06/05/2020 FROM B.ID_NUMBER TO A.ID_NUMBER
            Sql = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS " _
                              & "FROM AM_PAYMENT_NEW_WBS_NOTRANS A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                              & "WHERE B.BALANCE_TYPE = 'AR' AND A.ENDING_BALANCE <= 0 AND A.PAYMENT_NO  = " & PaymentNo & " AND B.CHARGE_TYPE ='" & ChargeType.ToString() & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewNoTransAR(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewNoTransAR(ByVal dr As IDataReader) As List(Of ARCollection)
        Dim ret As New List(Of ARCollection)
        Try
            While dr.Read()
                With dr
                    Dim item As New ARCollection
                    item.BillingRemarks = If(IsDBNull(.Item("REMARKS")), "", CStr(.Item("REMARKS")))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE"))
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.NewDueDate = CDate(FormatDateTime(CDate(.Item("NEW_DUEDATE")), DateFormat.ShortDate))
                    item.AllocationAmount = CDec(.Item("ALLOCATION_AMOUNT"))

                    Select Case .Item("CHARGE_TYPE").ToString
                        Case "E"
                            item.CollectionType = EnumCollectionType.Energy
                        Case "EV"
                            item.CollectionType = EnumCollectionType.VatOnEnergy
                        Case "MF"
                            item.CollectionType = EnumCollectionType.MarketFees
                        Case "MFV"
                            item.CollectionType = EnumCollectionType.VatOnMarketFees
                    End Select

                    item.CollectionCategory = EnumCollectionCategory.NoTrans
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    item.OffsettingSequence = 0
                    item.InvoiceNumber = CStr(.Item("INV_DM_CM"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.GeneratedDMCM = 0
                    item.EnergyWithHold = CDec(.Item("ENERGY_WITHHOLD"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get AM_PAYMENT_NEW_WBS_NOTRANS AP"
    Public Function GetAMPaymentNewNoTransAP(ByVal PaymentNo As Long, ByVal ChargeType As EnumChargeType) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Dim report As New DataReport
        Try
            'Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS " _
            '                  & "FROM AM_PAYMENT_NEW_WBS_NOTRANS A " _
            '                  & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
            '                  & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = B.ID_NUMBER " _
            '                  & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
            '                  & "WHERE B.BALANCE_TYPE = 'AP' AND A.ENDING_BALANCE >= 0 AND A.PAYMENT_NO  = " & PaymentNo & " AND B.CHARGE_TYPE ='" & ChargeType.ToString() & "'"

            'added by lance for historical of CAP Summary 06/05/2020 FROM B.ID_NUMBER TO A.ID_NUMBER
            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS " _
                              & "FROM AM_PAYMENT_NEW_WBS_NOTRANS A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                              & "WHERE B.BALANCE_TYPE = 'AP' AND A.ENDING_BALANCE >= 0 AND A.PAYMENT_NO  = " & PaymentNo & " AND B.CHARGE_TYPE ='" & ChargeType.ToString() & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewNoTransAP(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewNoTransAP(ByVal dr As IDataReader) As List(Of APAllocation)
        Dim ret As New List(Of APAllocation)
        Try
            While dr.Read()
                With dr
                    Dim item As New APAllocation
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.BillingRemarks = If(IsDBNull(.Item("REMARKS")), "", CStr(.Item("REMARKS")))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE"))
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.NewDueDate = CDate(FormatDateTime(CDate(.Item("NEW_DUEDATE")), DateFormat.ShortDate))
                    item.AllocationAmount = CDec(.Item("ALLOCATION_AMOUNT"))
                    Select Case .Item("CHARGE_TYPE").ToString
                        Case "E"
                            item.PaymentType = EnumPaymentNewType.Energy
                        Case "EV"
                            item.PaymentType = EnumPaymentNewType.VatOnEnergy
                        Case "MF"
                            item.PaymentType = EnumPaymentNewType.MarketFees
                        Case "MFV"
                            item.PaymentType = EnumPaymentNewType.VatOnMarketFees
                    End Select                    
                    item.PaymentCategory = EnumCollectionCategory.NoTrans
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    item.OffsettingSequence = 0
                    item.InvoiceNumber = CStr(.Item("INV_DM_CM"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.EnergyWithHold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.GeneratedDMCM = 0
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get AM_PAYMENT_NEW_OFFSETTING_AR"
    Public Function GetAMPaymentNewOffsetARByYear(ByVal SelectedYear As String) As List(Of ARCollection)
        Dim ret As New List(Of ARCollection)
        Dim report As New DataReport
        Try
            'Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, B.WESMBILL_BATCH_NO, B.ENERGY_WITHHOLD, C.ID_NUMBER, C.PARTICIPANT_ID, D.REMARKS " _
            '                  & "FROM AM_PAYMENT_NEW_OFFSETTING_AR A " _
            '                  & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
            '                  & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = B.ID_NUMBER " _
            '                  & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
            '                  & "WHERE TO_CHAR(A.ALLOCATION_DATE,'YYYY')  = '" & SelectedYear & "' AND B.BALANCE_TYPE = 'AR'"
            'added by lance for historical of CAP Summary 06/05/2020 FROM B.ID_NUMBER TO A.ID_NUMBER
            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, B.WESMBILL_BATCH_NO, B.ENERGY_WITHHOLD, C.ID_NUMBER, C.PARTICIPANT_ID, D.REMARKS " _
                              & "FROM AM_PAYMENT_NEW_OFFSETTING_AR A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                              & "WHERE TO_CHAR(A.ALLOCATION_DATE,'YYYY')  = '" & SelectedYear & "' AND B.BALANCE_TYPE = 'AR'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewOffsetAR(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetAMPaymentNewOffsetAR(ByVal PaymentNo As Long) As List(Of ARCollection)
        Dim ret As New List(Of ARCollection)
        Dim report As New DataReport
        Try
            'Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS " _
            '                  & "FROM AM_PAYMENT_NEW_OFFSETTING_AR A " _
            '                  & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
            '                  & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = B.ID_NUMBER " _
            '                  & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
            '                  & "WHERE A.PAYMENT_NO  = " & PaymentNo & " AND B.BALANCE_TYPE = 'AR'"
            'added by lance for historical of CAP Summary 06/05/2020 FROM B.ID_NUMBER TO A.ID_NUMBER
            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, D.REMARKS " _
                              & "FROM AM_PAYMENT_NEW_OFFSETTING_AR A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN AM_WESM_BILL D ON D.INVOICE_NO = B.INV_DM_CM AND D.CHARGE_TYPE = B.CHARGE_TYPE " _
                              & "WHERE A.PAYMENT_NO  = " & PaymentNo & " AND B.BALANCE_TYPE = 'AR'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewOffsetAR(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewOffsetAR(ByVal dr As IDataReader) As List(Of ARCollection)
        Dim ret As New List(Of ARCollection)
        Try
            While dr.Read()
                With dr
                    Dim item As New ARCollection
                    item.BillingRemarks = If(IsDBNull(.Item("REMARKS")), "", CStr(.Item("REMARKS")))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.NewEndingBalance = CDec(.Item("NEW_ENDING_BALANCE"))
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.NewDueDate = CDate(FormatDateTime(CDate(.Item("NEW_DUEDATE")), DateFormat.ShortDate))
                    item.AllocationAmount = CDec(.Item("ALLOCATION_AMOUNT"))
                    item.CollectionType = CType(.Item("COLLECTION_TYPE"), EnumCollectionType)
                    item.CollectionCategory = CType(.Item("COLLECTION_CATEGORY"), EnumCollectionCategory)
                    item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    item.OffsettingSequence = CInt(.Item("OFFSET_SEQ"))
                    item.InvoiceNumber = CStr(.Item("INV_DM_CM"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.GeneratedDMCM = CLng(.Item("AM_DMCM_NO"))
                    item.EnergyWithHold = CDec(.Item("ENERGY_WITHHOLD"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get PaymentShare on AM_PAYMENT_NEW_SHARE / AM_PAYMENT_NEW_SHARE_DETAILS"
    Public Function GetAMPaymentNewShare(ByVal PaymentNo As Long) As List(Of PaymentShare)
        Dim ret As New List(Of PaymentShare)
        Dim report As New DataReport
        Try

            Dim SQL As String = "SELECT A.* FROM AM_PAYMENT_NEW_SHARE A " _
                                & "WHERE A.PAYMENT_NO  = " & PaymentNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewShare(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewShare(ByVal dr As IDataReader) As List(Of PaymentShare)
        Dim ret As New List(Of PaymentShare)
        Try
            Dim PaymentShareNoList As New List(Of Long)
            Dim PaymentSHareNoObjList As New List(Of PaymentShareDetails)            
            While dr.Read()
                With dr
                    Dim item As New PaymentShare
                    Dim PaymentShareNo As Long = CLng(.Item("PAYMENT_SHARE_NO"))                    
                    PaymentShareNoList.Add(PaymentShareNo)
                    item.PaymentShareNo = PaymentShareNo
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILLSUMMARY_NO"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.InvoiceNumber = If(IsDBNull(.Item("INV_NUMBER")), "", CStr(.Item("INV_NUMBER")))
                    item.AmountShare = CDec(.Item("AMOUNT_SHARE"))
                    item.ChargeType = CType(CStr(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE")))), EnumChargeType)
                    item.OffsettingSequence = CInt(.Item("OFFSETTING_SEQ_NO"))
                    item.PaymentType = CType(CStr(System.Enum.Parse(GetType(EnumPaymentNewType), CStr(.Item("PAYMENT_TYPE")))), EnumPaymentNewType)
                    ret.Add(item)
                End With
            End While

            PaymentSHareNoObjList = Me.GetAMPaymentNewShareDetails(PaymentShareNoList)
            For Each Item In ret
                Item.AmountOffset = (From x In PaymentSHareNoObjList _
                                     Where x.PaymentShareNo = Item.PaymentShareNo _
                                     Select x).ToList()
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    Public Function GetAMPaymentNewShareDetails(ByVal PaymentShareNo As List(Of Long)) As List(Of PaymentShareDetails)
        Dim ret As New List(Of PaymentShareDetails)
        Dim report As New DataReport
        Try
            Dim GetMinPSNo As Long = PaymentShareNo.DefaultIfEmpty.Min()
            Dim GetMaxPSno As Long = PaymentShareNo.DefaultIfEmpty.Max()

            Dim SQL As String = "SELECT A.* FROM AM_PAYMENT_NEW_SHARE_DETAILS A " _
                                & "WHERE A.PAYMENT_SHARE_NO BETWEEN " & GetMinPSNo & " AND " & GetMaxPSno

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewShareDetails(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewShareDetails(ByVal dr As IDataReader) As List(Of PaymentShareDetails)
        Dim ret As New List(Of PaymentShareDetails)
        Try
            While dr.Read()
                With dr
                    Dim item As New PaymentShareDetails
                    item.PaymentShareNo = CLng(.Item("PAYMENT_SHARE_NO"))
                    item.ForWESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.InvoiceNumber = CStr(.Item("INV_NUMBER"))
                    item.OffsetAmount = CDec(.Item("AMOUNT_OFFSET"))
                    item.ChargeType = CType(CStr(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE")))), EnumChargeType)
                    item.BatchGroupSequence = CInt(.Item("OFFSETTING_SEQ_NO"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get Payment Transfer To PR on AM_PAYMENT_NEW_TRANS_TO_PR"
    Public Function GetAMPaymentNewTransToPR(ByVal PaymentNo As Long) As List(Of PaymentTransferToPR)
        Dim ret As New List(Of PaymentTransferToPR)
        Dim report As New DataReport
        Try


            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID FROM AM_PAYMENT_NEW_TRANSFER_TO_PR A " _
                                & "LEFT JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER " _
                                & "WHERE A.PAYMENT_NO  = " & PaymentNo & " ORDER BY B.PARTICIPANT_ID"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewTransToPR(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentNewTransToPR(ByVal dr As IDataReader) As List(Of PaymentTransferToPR)
        Dim ret As New List(Of PaymentTransferToPR)
        Try
            While dr.Read()
                With dr
                    Dim item As New PaymentTransferToPR
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.PaymentOnExcessCollection = CDec(.Item("PAYMENT_EXCESS_COLLECTION"))
                    item.PaymentOnDeferredonEnergy = CDec(.Item("PAYMENT_DEFERRED_ENERGY"))
                    item.PaymentOnDeferredonVATonEnergy = CDec(.Item("PAYMENT_DEFERRED_VATONENERGY"))
                    item.OffsetOnOffsetDeferredonEnergy = CDec(.Item("OFFSET_DEFERRED_ENERGY"))
                    item.OffsetOnOffsetDeferredonVATonEnergy = CDec(.Item("OFFSET_DEFERRED_VAT"))
                    item.PaymentOnMFWithVAT = CDec(.Item("PAYMENT_MF"))
                    item.PaymentOnEnergy = CDec(.Item("PAYMENT_ENERGY"))
                    item.PaymentOnVATonEnergy = CDec(.Item("PAYMENT_VATONENERGY"))
                    item.TotalPaymentAllocated = CDec(.Item("PAYMENT_TOTAL"))
                    item.FullyTransferToPR = CBool(.Item("FULLY_TRANSFER_TO_PR"))
                    item.TransferToPrudential = CDec(.Item("TRANSFER_TO_PR"))
                    item.FullyTransferToFinPen = CBool(.Item("FULLY_TRANSFER_TO_FINPEN"))
                    item.TransferToFinPen = CDec(.Item("TRANSFER_TO_FINPEN"))
                    item.TotalAmountForRemittance = CDec(.Item("TOTAL_AMOUNT_FOR_REMITTANCE"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

#End Region

#Region "Get Request For Payment on AM_RFP_MAIN"
    Public Function GetAMRFPMain(ByVal PaymentNo As Long) As RequestForPayment
        Dim ret As New RequestForPayment
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.* FROM AM_RFP A " _
                                & "WHERE A.PAYMENT_NO  = " & PaymentNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMRFPMain(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetAMRFPMainForChecks(ByVal JVNumber As Long) As RequestForPayment
        Dim ret As New RequestForPayment
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.* FROM AM_RFP A " _
                                & "LEFT JOIN AM_PAYMENT_NEW_DETAILS B ON A.PAYMENT_NO = B.PAYMENT_NO " _
                                & "WHERE B.AM_JV_NO  = " & JVNumber

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMRFPMain(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMRFPMain(ByVal dr As IDataReader) As RequestForPayment
        Dim ret As New RequestForPayment
        Try
            Dim ListOfRefNo As New List(Of Long)
            Dim ListofRFPDetails As New List(Of RequestForPaymentDetails)
            While dr.Read()
                With dr
                    Dim item As New RequestForPayment
                    item.ReferenceNo = CLng(.Item("REFERENCE_NO"))
                    item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                    item.PaymentDate = CDate(FormatDateTime(CDate(.Item("PAYMENT_DATE")), DateFormat.ShortDate))
                    item.toRFP = CStr(.Item("RFP_TO"))
                    item.FromRFP = CStr(.Item("RFP_FROM"))
                    item.PurposeOfPayment = CStr(.Item("RFP_PURPOSE"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))
                    item.ReviewedBy = CStr(.Item("REVIEWED_BY"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.NSSAmount = CDec(.Item("NSS_APPLIED"))
                    item.PRReplenishment = CDec(.Item("PR_REPLENISHMENT"))
                    item.MarketFees = CDec(.Item("MF_APPLIED"))
                    item.TransferToPEMC = CDec(.Item("TRANSFER_PEMC"))
                    item.HeldCollection = CDec(.Item("HELD_COLLECTION"))
                    ListOfRefNo.Add(item.ReferenceNo)
                    ret = item
                End With
            End While

            Dim GetRFPDetails As List(Of RequestForPaymentDetails) = Me.GetAMRFPDetails(ListOfRefNo)
            ret.RFPDetails = GetRFPDetails
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    Public Function GetAMRFPDetails(ByVal ListofRefNo As List(Of Long)) As List(Of RequestForPaymentDetails)
        Dim ret As New List(Of RequestForPaymentDetails)
        Dim report As New DataReport
        Try
            Dim GetMinRefNo As Long = ListofRefNo.Min()
            Dim GetMaxRefno As Long = ListofRefNo.Max()

            Dim SQL As String = "SELECT A.* FROM AM_RFP_DETAILS A " _
                                & "WHERE A.REFERENCE_NO BETWEEN " & GetMinRefNo & " AND " & GetMaxRefno

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMRFPDetails(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMRFPDetails(ByVal dr As IDataReader) As List(Of RequestForPaymentDetails)
        Dim ret As New List(Of RequestForPaymentDetails)
        Try
            Dim xcounter As Integer = 0
            While dr.Read()
                With dr
                    Dim item As New RequestForPaymentDetails
                    item.ReferenceNo = CLng(.Item("REFERENCE_NO"))
                    item.Participant = CStr(.Item("ID_NUMBER"))
                    item.BankBranch = CStr(If(IsDBNull(.Item("BANK_BRANCH")), "", CStr(.Item("BANK_BRANCH"))))
                    item.AccountNo = CStr(If(IsDBNull(.Item("ACCOUNT_NO")), "", CStr(.Item("ACCOUNT_NO"))))
                    item.PaymentType = CType(.Item("RFP_PAYMENT_TYPE"), EnumParticipantPaymentType)
                    item.RFPDetailsType = CType(.Item("RFP_DETAILS_TYPE"), EnumRFPDetailsType)
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.DateOfDeposit = CStr(FormatDateTime(CDate(.Item("DATE_OF_DEPOSIT")), DateFormat.ShortDate))
                    item.Particulars = CStr(If(IsDBNull(.Item("PARTICULARS")), "", CStr(.Item("PARTICULARS"))))
                    item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                    ret.Add(item)
                End With
            End While

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get Payment EFT"
    Public Function GetAMPaymentEFT(ByVal PaymentNo As Long) As List(Of EFT)
        Dim ret As New List(Of EFT)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.*, B.* FROM AM_PAYMENT_NEW_EFT A " _
                                & "LEFT JOIN AM_PARTICIPANTS B ON B.ID_NUMBER = A.ID_NUMBER " _
                                & "WHERE A.PAYMENT_NO  = " & PaymentNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetAMPaymentEFT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMPaymentEFT(ByVal dr As IDataReader) As List(Of EFT)
        Dim ret As New List(Of EFT)
        While dr.Read()
            With dr
                Dim item As New EFT
                Dim AMParticipantsInfo As AMParticipants = GetAMParticipants(CStr(.Item("ID_NUMBER"))).FirstOrDefault
                item.AllocationDate = CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))
                item.Participant = AMParticipantsInfo
                item.PaymentType = CType(.Item("PAYMENT_TYPE"), EnumParticipantPaymentType)
                item.CheckNumber = CLng(.Item("CHECK_NO"))
                item.ExcessCollection = CDec(.Item("EXCESS_COLLECTION"))
                item.DeferredEnergy = CDec(.Item("DEFERRED_ENERGY"))
                item.DeferredVAT = CDec(.Item("DEFERRED_VAT"))
                item.OffsetOnDeferredEnergy = CDec(.Item("OFFSET_DEFERRED_ENERGY"))
                item.OffsetOnDeferredVAT = CDec(.Item("OFFSET_DEFERRED_VAT"))
                item.Energy = CDec(.Item("ENERGY"))
                item.VAT = CDec(.Item("VAT"))
                item.MarketFees = CDec(.Item("MF"))
                item.ReturnAmount = CDec(.Item("RETURN_AMOUNT"))
                item.TransferPrudential = CDec(.Item("TRANSFER_TO_PRUDENTIAL"))
                item.TransferFinPen = CDec(.Item("TRANSFER_TO_FINPEN"))
                item.NSSInterest = CDec(.Item("INTEREST_NSS"))
                item.STLInterest = CDec(.Item("INTEREST_STL"))
                item.TotalPayment = Math.Round((item.ExcessCollection + _
                                                item.DeferredEnergy + _
                                                item.DeferredVAT + _
                                                item.OffsetOnDeferredEnergy + _
                                                item.OffsetOnDeferredVAT + _
                                                item.Energy + _
                                                item.VAT + _
                                                item.MarketFees + _
                                                item.ReturnAmount + _
                                                item.NSSInterest + _
                                                item.STLInterest) - (item.TransferPrudential + item.TransferFinPen), 2)
                ret.Add(item)
            End With
        End While
        Return ret
    End Function

#End Region

#Region "Get SPA Data"
    Public Function GetAMSPANumber(ByVal JVNo As Long, ByVal objPostedType As EnumPostedType) As Long
        Dim ret As New Long
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            Select Case objPostedType
                Case EnumPostedType.SPAC
                    SQL = "SELECT A.* FROM AM_SPA_MAIN A " & _
                                "WHERE A.JV_NO_CLOSING = " & JVNo
                Case EnumPostedType.SPASU
                    SQL = "SELECT A.* FROM AM_SPA_MAIN A " & _
                                "WHERE A.JV_NO_SETUP = " & JVNo
            End Select

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetAMSPANumber(report.ReturnedIDatareader, objPostedType)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetAMSPANumber(ByVal dr As IDataReader, ByVal objPostedType As EnumPostedType) As Long
        Dim ret As New Long
        While dr.Read()
            With dr
                ret = CLng(.Item("SPA_NO"))                
            End With
        End While
        Return ret
    End Function

    Public Function GetSPAList() As DataTable
        Dim ret As New DataTable
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_SPA_MAIN"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSPAList(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetSPAList(ByVal dr As IDataReader) As DataTable
        Dim SPAList As New List(Of SPAMain)
        Dim ret As New DataTable
        While dr.Read()
            With dr
                Dim Item As New SPAMain
                Dim AMParticipantsInfo As AMParticipants = GetAMParticipants(CStr(.Item("ID_NUMBER"))).FirstOrDefault
                Item.ParticipantInfo = AMParticipantsInfo
                Item.SPANo = CLng(.Item("SPA_NO"))
                Item.FirstPaymentDate = CDate(FormatDateTime(CDate(.Item("FIRST_PAYMENT_DATE")), DateFormat.ShortDate))
                Item.InMonths = CInt(.Item("TERMS_OF_LOAN_INMONTHS"))
                Item.InterestRate = CDec(.Item("INTEREST_RATE"))
                Item.TotalPrincipalAmount = CDec(.Item("TOTAL_PRINCIPAL_AMOUNT"))
                Item.TotalInterestAmount = CDec(.Item("TOTAL_INTEREST_AMOUNT"))
                SPAList.Add(Item)
            End With
        End While
        ret = Me.CreateDTofSPA(SPAList)
        Return ret
    End Function

    Private Function CreateDTofSPA(ByVal objSPAList As List(Of SPAMain)) As DataTable
        Dim DTSPA As New DataTable
        With DTSPA
            .TableName = "SPAMain"
            With .Columns
                .Add("SPANumber", GetType(Long))
                .Add("IDNumber", GetType(String))
                .Add("ParticipantID", GetType(String))
                .Add("FirstPaymentDate", GetType(Date))
                .Add("TermsOfLoan(in Months)", GetType(Integer))
                .Add("InterestRate(%)", GetType(String))
                .Add("TotalPrincipalAmount", GetType(String))
                .Add("TotalInterestAmount", GetType(String))
                .Add("TotalSPAAmount", GetType(String))
            End With
        End With
        For Each item In objSPAList
            Dim row As DataRow
            row = DTSPA.NewRow()
            row("SPANumber") = item.SPANo
            row("IDNumber") = item.ParticipantInfo.IDNumber
            row("ParticipantID") = item.ParticipantInfo.ParticipantID
            row("FirstPaymentDate") = item.FirstPaymentDate
            row("TermsOfLoan(in Months)") = item.InMonths
            row("InterestRate(%)") = FormatNumber(item.InterestRate, UseParensForNegativeNumbers:=Microsoft.VisualBasic.TriState.True)
            row("TotalPrincipalAmount") = FormatNumber(item.TotalPrincipalAmount, UseParensForNegativeNumbers:=Microsoft.VisualBasic.TriState.True)
            row("TotalInterestAmount") = FormatNumber(item.TotalInterestAmount, UseParensForNegativeNumbers:=Microsoft.VisualBasic.TriState.True)
            row("TotalSPAAmount") = FormatNumber(item.TotalBalance, UseParensForNegativeNumbers:=Microsoft.VisualBasic.TriState.True)
            DTSPA.Rows.Add(row)
        Next
        DTSPA.AcceptChanges()
        Return DTSPA        
    End Function
#End Region

#Region "Get SOA"
    Public Function GetSOAOffsetting(ByVal DateFrom As Date, ByVal DateTo As Date) As List(Of ARCollection)
        Dim ret As New List(Of ARCollection)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.*, B.CHARGE_TYPE, B.INV_DM_CM, C.ID_NUMBER, C.PARTICIPANT_ID, B.WESMBILL_BATCH_NO, B.ENERGY_WITHHOLD " _
                              & "FROM AM_PAYMENT_NEW_OFFSETTING_AR A " _
                              & "LEFT JOIN AM_WESM_BILL_SUMMARY B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "WHERE A.ALLOCATION_DATE BETWEEN  TO_DATE('" & DateFrom & "', 'MM/DD/YYYY') AND TO_DATE('" & DateTo & "','MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetAMPaymentNewOffsetAR(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetCurrentSOANumber() As Long
        Dim ret As Long
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT MAX(AM_SOA_NO) AS CUR_SOA_NO FROM AM_SOA"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetCurrentSOANumber(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New Exception(ex.Message)
        End Try
        Return ret
    End Function
    Private Function GetCurrentSOANumber(ByVal reader As IDataReader) As Long
        Dim result As New Long
        Try
            While reader.Read()
                result = If(IsDBNull(reader.Item("CUR_SOA_NO")), 0, CLng(reader.Item("CUR_SOA_NO")))
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetStatementOfAccountNew(ByVal SelecteDueDate As String) As List(Of StatementofAccountNew)
        Dim result As New List(Of StatementofAccountNew)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_SOA A WHERE A.INV_DUEDATE = TO_DATE('" & CDate(SelecteDueDate).ToShortDateString & "', 'MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetStatementOfAccountNew(report.ReturnedIDatareader)
            If result.Count = 0 Then
                Exit Try
            End If

            For Each item In result
                SQL = "SELECT B.AM_SOA_NO, A.*, C.*  FROM AM_WESM_BILL_SUMMARY A " & vbNewLine _
                    & "LEFT JOIN AM_SOA_DETAILS B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " & vbNewLine _
                    & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                    & "WHERE B.AM_SOA_NO = " & item.SOANumber

                report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
                Dim resultDetails As New List(Of WESMBillSummary)
                resultDetails = Me.GetStatementOfAccountDetailsNew(report.ReturnedIDatareader)
                item.WESMBillSummaryList = resultDetails
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Public Function GetStatementOfAccountNew() As List(Of StatementofAccountNew)
        Dim result As New List(Of StatementofAccountNew)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_SOA"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetStatementOfAccountNew(report.ReturnedIDatareader)
            report = New DataReport
            If result.Count = 0 Then
                Exit Try
            End If

            For Each item In result
                SQL = "SELECT B.AM_SOA_NO, A.*, C.* FROM AM_WESM_BILL_SUMMARY A " & vbNewLine _
                    & "LEFT JOIN AM_SOA_DETAILS B ON A.WESMBILL_SUMMARY_NO = B.WESMBILL_SUMMARY_NO " & vbNewLine _
                    & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                    & "WHERE B.AM_SOA_NO = " & item.SOANumber

                report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
                Dim resultDetails As New List(Of WESMBillSummary)
                resultDetails = Me.GetStatementOfAccountDetailsNew(report.ReturnedIDatareader)
                item.WESMBillSummaryList = resultDetails
                report = New DataReport
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetStatementOfAccountNew(ByVal reader As IDataReader) As List(Of StatementofAccountNew)
        Dim result As New List(Of StatementofAccountNew)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                Dim StatementItem As New StatementofAccountNew
                With reader
                    cnt += 1
                    StatementItem.DueDate = CDate(.Item("INV_DUEDATE"))
                    StatementItem.IDNumber = CStr(.Item("ID_NUMBER"))
                    StatementItem.SOADate = CDate(.Item("AM_SOA_DATE"))
                    StatementItem.SOANumber = CLng(.Item("AM_SOA_NO"))
                    StatementItem.PreviousBalanceDueOnEnergy = CDec(.Item("PREV_BALANCE_DUE_ENE"))
                    StatementItem.PreviousBalanceDueOnVAT = CDec(.Item("PREV_BALANCE_DUE_VAT"))
                    StatementItem.PreviousBalanceDueOnMF = CDec(.Item("PREV_BALANCE_DUE_MF"))
                    StatementItem.PaymentReceivedOnEnergy = CDec(.Item("PAY_RECEIVED_ENE"))
                    StatementItem.PaymentReceivedOnVAT = CDec(.Item("PAY_RECEIVED_VAT"))
                    StatementItem.PaymentReceivedOnMF = CDec(.Item("PAY_RECEIVED_MF"))
                    StatementItem.PaymentReceivedOnDefaultInterest = CDec(.Item("PAY_RECEIVED_DEFAULT"))
                    StatementItem.SettledThruOffsettingOnEnergy = CDec(.Item("SETL_OFFSETING_ENE"))
                    StatementItem.SettledThruOffsettingOnVAT = CDec(.Item("SETL_OFFSETING_VAT"))
                    StatementItem.SettledThruOffsettingOnMF = CDec(.Item("SETL_OFFSETING_MF"))
                    StatementItem.SettledThruOffsettingOnDefaultInterest = CDec(.Item("SETL_OFFSETTING_DEFAULT"))
                End With
                result.Add(StatementItem)
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message & vbNewLine & " Error triggered in row " & cnt & ".")
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function


    Private Function GetStatementOfAccountDetailsNew(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary                    
                    'item.GroupNo = CInt(.Item("GROUP_NO").ToString)                    
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("PARTICIPANT_ADDRESS").ToString()), CStr(.Item("CITY").ToString()), CStr(.Item("PROVINCE").ToString()), _
                                                       CStr(.Item("ZIP_CODE").ToString()))
                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE").ToString())), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    item.BeginningBalance = Math.Round(CDec(.Item("BEGINNING_BALANCE").ToString()), 2)
                    item.EndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.OrigEndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.IDType = CStr(.Item("ID_TYPE").ToString())
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.OrigNewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.IsMFWTaxDeducted = CInt(.Item("IS_MFWTAX_DEDUCTED").ToString())
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM").ToString())
                    If .Item("SUMMARY_TYPE") IsNot DBNull.Value Then
                        item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE").ToString())), EnumSummaryType)
                    End If
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.Adjustment = CInt(.Item("ADJUSTMENT").ToString())
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.EnergyWithhold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    item.EnergyWithholdStatus = CType(CInt(.Item("ENERGY_WITHHOLD_STATUS")), EnumEnergyWithholdStatus)                    
                    result.Add(item)                    
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function


    Public Function VerifyIfSOAHasCreated(ByVal SelectedDueDate As String) As Boolean
        Dim ret As Boolean = False
        Dim Result As List(Of Date)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT B.INV_DUEDATE AS DUEDATE, COUNT(B.INV_DUEDATE) AS TOTAL_COUNT " & vbNewLine _
                              & "FROM AM_SOA B " & vbNewLine _
                              & "WHERE B.INV_DUEDATE = TO_DATE('" & SelectedDueDate & "', 'MM/DD/YYYY') " & vbNewLine _
                              & "GROUP BY B.INV_DUEDATE ORDER BY B.INV_DUEDATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            Result = Me.GetWESMBillSummaryDueDateList(report.ReturnedIDatareader)
            If Result.Count > 0 Then
                ret = True
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetSOADueDateList() As List(Of Date)
        Dim ret As New List(Of Date)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT B.INV_DUEDATE " & vbNewLine _
                              & "FROM AM_SOA B " & vbNewLine _
                              & "ORDER BY B.INV_DUEDATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetSOADueDateList(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSOADueDateList(ByVal dr As IDataReader) As List(Of Date)
        Dim DueDateList As New List(Of Date)
        Dim ret As New List(Of Date)
        While dr.Read()
            With dr
                DueDateList.Add(CDate(.Item("INV_DUEDATE")))
            End With
        End While

        ret = DueDateList
        Return ret
    End Function

    Public Function GetWESMBillSummaryDueDateList(ByVal DueDate As String) As List(Of Date)
        Dim ret As New List(Of Date)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT B." & DueDate & " AS DUEDATE " & vbNewLine _
                              & "FROM AM_WESM_BILL_SUMMARY B " & vbNewLine _
                              & "ORDER BY B." & DueDate & " DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMBillSummaryDueDateList(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function
    Private Function GetWESMBillSummaryDueDateList(ByVal dr As IDataReader) As List(Of Date)
        Dim DueDateList As New List(Of Date)
        Dim ret As New List(Of Date)
        While dr.Read()
            With dr
                DueDateList.Add(CDate(.Item("DUEDATE")))
            End With
        End While

        ret = DueDateList
        Return ret
    End Function

#End Region

#Region "Get EWT Payable for BIR"
    Public Function GetAMBIRATC() As List(Of BIRAlphanumericTaxCode)
        Dim ret As New List(Of BIRAlphanumericTaxCode)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_BIR_ATC"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetAMBIRATC(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMBIRATC(ByVal dr As IDataReader) As List(Of BIRAlphanumericTaxCode)
        Dim result As New List(Of BIRAlphanumericTaxCode)

        Try
            While dr.Read()
                Dim item As New BIRAlphanumericTaxCode

                With dr
                    item.ATCName = CStr(.Item("ATC_NAME"))
                    item.ATCDescription = CStr(.Item("ATC_DESC"))
                    item.ATCRate = CDec(.Item("ATC_RATE"))
                    item.UpdateDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetWESMBillSalesAndPurchasedForEWT(ByVal _DueDate As Date) As List(Of WESMBillSalesAndPurchased)
        Dim ret As New List(Of WESMBillSalesAndPurchased)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.*, C.PARTICIPANT_ID FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN (SELECT DISTINCT BILLING_PERIOD, STL_RUN, DUE_DATE, INVOICE_NO FROM AM_WESM_BILL) B ON B.INVOICE_NO = A.INVOICE_NO " & vbNewLine _                              
                              & "WHERE B.DUE_DATE = TO_DATE('" & _DueDate & "', 'MM/DD/YYYY') AND A.WITHHOLDING_TAX <> 0"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMBillSalesAndPurchasedForEWT(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetWESMBillSalesAndPurchasedForEWT2(ByVal _DueDate As Date) As List(Of WESMBillSalesAndPurchasedForWT)
        Dim ret As New List(Of WESMBillSalesAndPurchasedForWT)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.*, C.PARTICIPANT_ID, D.WESMBILL_BATCH_NO FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN (SELECT DISTINCT BILLING_PERIOD, STL_RUN, DUE_DATE, INVOICE_NO FROM AM_WESM_BILL) B ON B.INVOICE_NO = A.INVOICE_NO " & vbNewLine _
                              & "INNER JOIN (SELECT * FROM AM_WESM_BILL_SUMMARY WHERE CHARGE_TYPE = 'E') D ON D.INV_DM_CM = A.INVOICE_NO " & vbNewLine _
                              & "WHERE B.DUE_DATE = TO_DATE('" & _DueDate & "', 'MM/DD/YYYY') AND A.WITHHOLDING_TAX <> 0"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMBillSalesAndPurchasedForEWT2(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetWESMBillSalesAndPurchasedForEWT(ByVal _DueDate As Date, StlRun As String, bp As Integer) As List(Of WESMBillSalesAndPurchased)
        Dim ret As New List(Of WESMBillSalesAndPurchased)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.*, C.PARTICIPANT_ID FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                              & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " _
                              & "LEFT JOIN (SELECT DISTINCT BILLING_PERIOD, STL_RUN, DUE_DATE, INVOICE_NO FROM AM_WESM_BILL) B ON B.INVOICE_NO = A.INVOICE_NO " & vbNewLine _
                              & "WHERE B.DUE_DATE = TO_DATE('" & _DueDate & "', 'MM/DD/YYYY') AND B.STL_RUN = '" & StlRun & "' AND B.BILLING_PERIOD = " & bp & " AND A.WITHHOLDING_TAX <> 0"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMBillSalesAndPurchasedForEWT(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetWESMBillSalesAndPurchasedForEWT(ByVal dr As IDataReader) As List(Of WESMBillSalesAndPurchased)
        Dim result As New List(Of WESMBillSalesAndPurchased)

        Try
            While dr.Read()
                Dim item As New WESMBillSalesAndPurchased

                With dr
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.RegistrationID = CStr(.Item("REG_ID"))
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcozone = CDec(.Item("ZERO_RATED_ECOZONE"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.NetSettlementAmount = CDec(.Item("TTA"))
                    item.VATonSales = CDec(.Item("VAT_ON_SALES"))
                    item.VATonPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.WithholdingTAX = CDec(.Item("WITHHOLDING_TAX"))
                    item.GMR = CDec(.Item("GMR"))
                    item.NSSRA = CDec(.Item("NSSRA"))
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumWESMBillSalesAndPurchasedTransType), _
                                                                   CStr(.Item("TRANSACTION_TYPE"))), EnumWESMBillSalesAndPurchasedTransType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()
            If result.Count = 0 Then
                'Throw New Exception("No available record.")
            End If

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetWESMBillSalesAndPurchasedForEWT2(ByVal dr As IDataReader) As List(Of WESMBillSalesAndPurchasedForWT)
        Dim result As New List(Of WESMBillSalesAndPurchasedForWT)

        Try
            While dr.Read()
                Dim item As New WESMBillSalesAndPurchasedForWT

                With dr
                    item.BillingBatchNo = CInt(.Item("WESMBILL_BATCH_NO"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.RegistrationID = CStr(.Item("REG_ID"))
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcozone = CDec(.Item("ZERO_RATED_ECOZONE"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.NetSettlementAmount = CDec(.Item("TTA"))
                    item.VATonSales = CDec(.Item("VAT_ON_SALES"))
                    item.VATonPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.WithholdingTAX = CDec(.Item("WITHHOLDING_TAX"))
                    item.GMR = CDec(.Item("GMR"))
                    item.NSSRA = CDec(.Item("NSSRA"))
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumWESMBillSalesAndPurchasedTransType), _
                                                                   CStr(.Item("TRANSACTION_TYPE"))), EnumWESMBillSalesAndPurchasedTransType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()
            If result.Count = 0 Then
                'Throw New Exception("No available record.")
            End If

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetYearForEWTCertificates() As List(Of Integer)
        Dim ret As New List(Of Integer)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT TO_CHAR(B.DUE_DATE,'YYYY') AS BILLING_YEAR " & vbNewLine _
                              & "FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                              & "LEFT JOIN AM_WESM_BILL B ON B.BILLING_PERIOD = A.BILLING_PERIOD "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetYearForEWTCertificates(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetYearForEWTCertificates(ByVal dr As IDataReader) As List(Of Integer)
        Dim DueDateList As New List(Of Integer)
        Dim ret As New List(Of Integer)
        While dr.Read()
            With dr
                DueDateList.Add(CInt(.Item("BILLING_YEAR")))
            End With
        End While
        ret = DueDateList
        Return ret
    End Function

    Public Function GetMonthForEWTCertificates(ByVal SelectedYear As Integer) As List(Of String)
        Dim ret As New List(Of String)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT TO_CHAR(B.DUE_DATE,'MMM') AS BILLING_MONTH " & vbNewLine _
                              & "FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                              & "LEFT JOIN AM_WESM_BILL B ON B.BILLING_PERIOD = A.BILLING_PERIOD " & vbNewLine _
                              & "WHERE TO_CHAR(B.DUE_DATE, 'YYYY') = '" & SelectedYear.ToString & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetMonthForEWTCertificates(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetMonthForEWTCertificates(ByVal dr As IDataReader) As List(Of String)
        Dim DMonthList As New List(Of String)
        Dim ret As New List(Of String)
        While dr.Read()
            With dr
                DMonthList.Add(CStr(.Item("BILLING_MONTH")))
            End With
        End While
        ret = DMonthList
        Return ret
    End Function

    Public Function GetDueDateSalesAndPurchased() As List(Of Date)
        Dim ret As New List(Of Date)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT B.DUE_DATE " & vbNewLine _
                              & "FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                              & "INNER JOIN AM_WESM_BILL B ON B.INVOICE_NO = A.INVOICE_NO " & vbNewLine _
                              & "ORDER BY B.DUE_DATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetDueDateSalesAndPurchased(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetDueDateSalesAndPurchased(ByVal dr As IDataReader) As List(Of Date)
        Dim DueDateList As New List(Of Date)
        Dim ret As New List(Of Date)
        While dr.Read()
            With dr
                DueDateList.Add(CDate(.Item("DUE_DATE")))
            End With
        End While

        ret = DueDateList
        Return ret
    End Function

    Public Function GetParticipantsListBasedonWBSAP(ByVal DueDate As Date) As List(Of String)
        Dim ret As New List(Of String)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT C.PARTICIPANT_ID FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                             & "LEFT JOIN (SELECT DISTINCT BILLING_PERIOD, STL_RUN, DUE_DATE, INVOICE_NO FROM AM_WESM_BILL) B ON B.INVOICE_NO = A.INVOICE_NO " & vbNewLine _
                             & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                             & "WHERE B.DUE_DATE = TO_DATE('" & DueDate.ToShortDateString & "', 'MM/DD/YYYY') ORDER BY C.PARTICIPANT_ID"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetBillingPeriodSalesAndPurchased(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetBillingPeriodSalesAndPurchased(ByVal dr As IDataReader) As List(Of String)
        Dim ParticpantList As New List(Of String)
        Dim ret As New List(Of String)
        While dr.Read()
            With dr
                ParticpantList.Add(CStr(.Item("PARTICIPANT_ID")))
            End With
        End While
        ret = ParticpantList
        Return ret
    End Function

    Public Function GetSettlementRun(ByVal DueDate As Date, ByVal BillingPeriodNo As Integer) As List(Of String)
        Dim ret As New List(Of String)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT DISTINCT A.STL_RUN " & vbNewLine _
                              & "FROM AM_WESM_BILL_SALES_PURCHASED A" & vbNewLine _
                              & "WHERE A.BILLING_PERIOD = " & BillingPeriodNo & vbNewLine _
                              & "AND A.DUE_DATE = TO_DATE('" & DueDate & "', 'MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSettlementRun(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSettlementRun(ByVal dr As IDataReader) As List(Of String)
        Dim SettlementRunList As New List(Of String)
        Dim ret As New List(Of String)
        While dr.Read()
            With dr
                SettlementRunList.Add(CStr(.Item("STL_RUN")))
            End With
        End While
        ret = SettlementRunList
        Return ret
    End Function
#End Region

#Region "Get BIR Access To Record"
    Public Function GetWESMBillSummaryPerYear(ByVal SelectedYear As String) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & _
                                "A.CHARGE_TYPE, A.DUE_DATE, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, a.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, A.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, D.REMARKS, A.BALANCE_TYPE " & _
                                "FROM AM_WESM_BILL_SUMMARY A " & _
                                "INNER JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & _
                                "INNER JOIN  AM_WESM_BILL D on D.invoice_no = a.inv_dm_cm and D.charge_type = a.charge_type " & _
                                "WHERE TO_CHAR(A.DUE_DATE,'YYYY') = '" & SelectedYear & "' AND A.BEGINNING_BALANCE <> 0 AND SUMMARY_TYPE = 'INV'"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetBIRWBSalesAndPurchased(ByVal SelectedYear As String) As List(Of WESMBillSalesAndPurchased)
        Dim ret As New List(Of WESMBillSalesAndPurchased)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, C.PARTICIPANT_ID FROM AM_WESM_BILL_SALES_PURCHASED A " & vbNewLine _
                              & "INNER JOIN (SELECT BILLING_PERIOD, STL_RUN, ID_NUMBER, REG_ID, INVOICE_NO, DUE_DATE, COUNT(INVOICE_NO) FROM AM_WESM_BILL GROUP BY BILLING_PERIOD, STL_RUN, ID_NUMBER, REG_ID, INVOICE_NO, DUE_DATE) B ON B.BILLING_PERIOD = A.BILLING_PERIOD " & vbNewLine _
                              & "AND B.STL_RUN = A.STL_RUN AND B.ID_NUMBER = A.ID_NUMBER AND B.REG_ID = A.REG_ID AND B.INVOICE_NO = A.INVOICE_NO " & vbNewLine _
                              & "INNER JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                              & "WHERE TO_CHAR(B.DUE_DATE,'YYYY') = '" & SelectedYear & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetBIRWBSalesAndPurchased(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetBIRWBSalesAndPurchased(ByVal dr As IDataReader) As List(Of WESMBillSalesAndPurchased)
        Dim result As New List(Of WESMBillSalesAndPurchased)

        Try
            While dr.Read()
                Dim item As New WESMBillSalesAndPurchased

                With dr
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN"))
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                    item.RegistrationID = CStr(.Item("REG_ID"))
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcozone = CDec(.Item("ZERO_RATED_ECOZONE"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.NetSettlementAmount = CDec(.Item("TTA"))
                    item.VATonSales = CDec(.Item("VAT_ON_SALES"))
                    item.VATonPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.WithholdingTAX = CDec(.Item("WITHHOLDING_TAX"))
                    item.GMR = CDec(.Item("GMR"))
                    item.NSSRA = CDec(.Item("NSSRA"))
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumWESMBillSalesAndPurchasedTransType), _
                                                                   CStr(.Item("TRANSACTION_TYPE"))), EnumWESMBillSalesAndPurchasedTransType)
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetAMTransactionYearList() As List(Of String)
        Dim ret As New List(Of String)
        Dim report As New DataReport
        Try
            'Dim SQL As String = "SELECT DISTINCT TO_CHAR(A.DUE_DATE, 'YYYY') AS TRANSACTION_YEAR FROM AM_WESM_BILL A " & vbNewLine _
            '                 & "INNER JOIN AM_WESM_BILL_SALES_PURCHASED B ON B.BILLING_PERIOD = A.BILLING_PERIOD " & vbNewLine _
            '                 & "AND B.STL_RUN = A.STL_RUN AND B.ID_NUMBER = A.ID_NUMBER AND B.INVOICE_NO = A.INVOICE_NO AND B.REG_ID = A.REG_ID " & vbNewLine _
            '                 & "WHERE B.WITHHOLDING_TAX <>0"

            Dim SQL As String = "SELECT DISTINCT TO_CHAR(A.DUE_DATE, 'YYYY') AS TRANSACTION_YEAR FROM AM_WESM_BILL A " & vbNewLine _
                             & "INNER JOIN AM_WESM_BILL_SALES_PURCHASED B ON B.BILLING_PERIOD = A.BILLING_PERIOD " & vbNewLine _
                             & "AND B.STL_RUN = A.STL_RUN AND B.ID_NUMBER = A.ID_NUMBER AND B.INVOICE_NO = A.INVOICE_NO AND B.REG_ID = A.REG_ID "


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetAMTransactionYearList(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetAMTransactionYearList(ByVal dr As IDataReader) As List(Of String)
        Dim result As New List(Of String)

        Try
            While dr.Read()
                Dim item As String = ""
                With dr
                    item = CStr(.Item("TRANSACTION_YEAR"))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get ParentChildOffsettingExemption"
    Public Function checkItemIfExistInPCOffsettingExemption(ByVal ParentId As String, ByVal ChildID As String, ByVal ChargeType As EnumChargeType) As Boolean
        Dim ret As Boolean = False
        Dim report As New DataReport
        Dim result As New List(Of ParentChildExemption)
        Try
            Dim SQL As String = "SELECT A.* FROM AM_P2C_1STOFFSET_EXEMPTION A " & vbNewLine & _
                                "WHERE A.ID_NUMBER_PARENT = '" & ParentId & "' AND ID_NUMBER_CHILD = '" & ChildID & "' " & vbNewLine & _
                                "AND CHARGE_TYPE = '" & ChargeType.ToString() & "'"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            Dim dr As IDataReader = report.ReturnedIDatareader
            Dim CountItem As Integer = 0
            While dr.Read()
                Dim item As New ParentChildExemption
                With dr
                    item.ParentParticipantID = New AMParticipants(CStr(.Item("ID_NUMBER_PARENT")))
                    item.ChildParticipantID = New AMParticipants(CStr(.Item("ID_NUMBER_CHILD")))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), _
                                                                   CStr(.Item("STATUS"))), EnumStatus)
                    result.Add(item)
                    CountItem += 1
                End With
            End While
            If CountItem > 0 Then
                ret = True
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret

    End Function
    Public Function GetParentChildOffsettingExemp() As List(Of ParentChildExemption)
        Dim ret As New List(Of ParentChildExemption)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.ID_NUMBER_PARENT, B.PARTICIPANT_ID AS PARENT_NAME, A.ID_NUMBER_CHILD, C.PARTICIPANT_ID AS CHILD_NAME, A.CHARGE_TYPE, A.STATUS, A.UPDATED_BY, A.UPDATED_DATE " & vbNewLine _
                             & "FROM AM_P2C_1STOFFSET_EXEMPTION A " & vbNewLine _
                             & "LEFT JOIN AM_PARTICIPANTS B ON B.ID_NUMBER = A.ID_NUMBER_PARENT " & vbNewLine _
                             & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER_CHILD WHERE A.STATUS = 1"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetParentChildOffsettingExemp(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetParentChildOffsettingExemp(ByVal ParentIDnumber As String, ByVal ChildIDNumber As String, ByVal ChargeType As EnumChargeType) As List(Of ParentChildExemption)
        Dim ret As New List(Of ParentChildExemption)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_P2C_1STOFFSET_EXEMPTION A"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetParentChildOffsettingExemp(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetParentChildOffsettingExemp(ByVal dr As IDataReader) As List(Of ParentChildExemption)
        Dim result As New List(Of ParentChildExemption)
        Try
            While dr.Read()
                Dim item As New ParentChildExemption
                With dr
                    item.ParentParticipantID = New AMParticipants(CStr(.Item("ID_NUMBER_PARENT")), CStr(.Item("PARENT_NAME")))
                    item.ChildParticipantID = New AMParticipants(CStr(.Item("ID_NUMBER_CHILD")), CStr(.Item("CHILD_NAME")))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), _
                                                                   CStr(.Item("STATUS"))), EnumStatus)

                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get WESM BILL Summary Change Parent ID"
    Public Function GetWESMBillSummaryChangeParentIDAll() As List(Of WESMBillSummaryChangeParentId)
        Dim ret As New List(Of WESMBillSummaryChangeParentId)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID AS PARENT_NAME, C.PARTICIPANT_ID AS CHILD_NAME, " & vbNewLine _
                              & "D.PARTICIPANT_ID AS NEW_PARENT_NAME " & vbNewLine _
                              & "FROM AM_WESM_BILL_SUMMARY_CHANGEID A " & vbNewLine _
                              & "INNER JOIN AM_PARTICIPANTS B ON B.ID_NUMBER = A.PARENT_ID_NUMBER " & vbNewLine _
                              & "INNER JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.CHILD_ID_NUMBER " & vbNewLine _
                              & "INNER JOIN AM_PARTICIPANTS D ON D.ID_NUMBER = A.NEW_PARENT_ID_NUMBER "
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMBillSummaryChangeParentID(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetWESMBillSummaryChangeParentID(ByVal BillingPeriodNo As Integer) As List(Of WESMBillSummaryChangeParentId)
        Dim ret As New List(Of WESMBillSummaryChangeParentId)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID AS PARENT_NAME, C.PARTICIPANT_ID AS CHILD_NAME, " & vbNewLine _
                              & "D.PARTICIPANT_ID AS NEW_PARENT_NAME " & vbNewLine _
                              & "FROM AM_WESM_BILL_SUMMARY_CHANGEID A " & vbNewLine _
                              & "INNER JOIN AM_PARTICIPANTS B ON B.ID_NUMBER = A.PARENT_ID_NUMBER " & vbNewLine _
                              & "INNER JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.CHILD_ID_NUMBER " & vbNewLine _
                              & "INNER JOIN AM_PARTICIPANTS D ON D.ID_NUMBER = A.NEW_PARENT_ID_NUMBER " & vbNewLine _
                              & "WHERE A.BILLING_PERIOD = " & BillingPeriodNo
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMBillSummaryChangeParentID(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetWESMBillSummaryChangeParentID(ByVal dr As IDataReader) As List(Of WESMBillSummaryChangeParentId)
        Dim result As New List(Of WESMBillSummaryChangeParentId)

        Try
            While dr.Read()
                Dim item As New WESMBillSummaryChangeParentId

                With dr
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.ParentParticipants = New AMParticipants(CStr(.Item("PARENT_ID_NUMBER")), CStr(.Item("PARENT_NAME")))
                    item.ChildParticipants = New AMParticipants(CStr(.Item("CHILD_ID_NUMBER")), CStr(.Item("CHILD_NAME")))
                    item.NewParentParticipants = New AMParticipants(CStr(.Item("NEW_PARENT_ID_NUMBER")), CStr(.Item("NEW_PARENT_NAME")))
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), CStr(.Item("STATUS"))), EnumStatus)
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


#End Region

#Region "Get WESM Invoice CRSS Mapping"
    Public Function GetWESMInvoiceCRSSMappingAll() As List(Of WESMInvoiceCRSSMappping)
        Dim ret As New List(Of WESMInvoiceCRSSMappping)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT * " & vbNewLine _
                              & "FROM AM_WESM_INVOICE_CRSS_MAPPING"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMInvoiceCRSSMappingAll(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetWESMInvoiceCRSSMappingAll(ByVal dr As IDataReader) As List(Of WESMInvoiceCRSSMappping)
        Dim result As New List(Of WESMInvoiceCRSSMappping)

        Try
            While dr.Read()
                Dim item As New WESMInvoiceCRSSMappping

                With dr
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.RegIDNumber = CStr(.Item("REG_ID"))
                    item.NewRegIDNumber = CStr(.Item("NEW_REG_ID"))
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


#End Region

#Region "Get Summary of Accouting Books"
    Public Function GetSummaryAccountingBooksWESMBillEWT(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try



            Dim SQL As String = "SELECT a.am_jv_no, a.am_jv_date, c.invoice_no, c.id_number, d.full_name, c.invoice_date, c.charge_type, c.amount  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, (SELECT a.INVOICE_NO, a.ID_NUMBER, a.INVOICE_DATE, a.CHARGE_TYPE, b.AMOUNT, a.BATCH_CODE " & _
                                                                        " FROM AM_WESM_BILL a " & _
                                                                        " INNER Join " & _
                                                                        " (SELECT * FROM AM_WESM_INVOICE " & _
                                                                        " WHERE CHARGE_ID = 'WT') b ON b.ID_NUMBER = a.ID_NUMBER and a.INVOICE_NO = b.INVOICE_NO " & _
                                                                        " WHERE a.INVOICE_DATE BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') AND a.CHARGE_TYPE = 'E') c, AM_PARTICIPANTS d " & _
                                "WHERE a.posted_type = '" & EnumPostedType.U.ToString() & "' AND a.am_jv_no = b.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND b.posted <> 5 AND a.batch_code = c.batch_code AND c.id_number = d.id_number AND a.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksWESMBillEWT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksWESMBillEWT(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)
        Dim dicAcctCode As New Dictionary(Of String, String)
        Dim listAcctCode = Me.GetAccountingCodes()

        For Each itema In listAcctCode
            dicAcctCode.Add(itema.AccountCode, itema.Description)
        Next

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks
                Dim chargeType As EnumChargeType

                With dr
                    chargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = CStr(.Item("INVOICE_NO"))
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("INVOICE_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Bill Uploads"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))

                    If CDec(.Item("AMOUNT")) < 0 Then
                        item.ItemAccountCode = New AccountingCode(AMModule.EWTPayable, dicAcctCode(AMModule.EWTPayable))
                        item.Credit = CDec(.Item("AMOUNT"))
                        item.Debit = 0
                    Else
                        item.ItemAccountCode = New AccountingCode(AMModule.EWTPayable, dicAcctCode(AMModule.EWTPayable))
                        item.Credit = 0
                        item.Debit = CDec(.Item("AMOUNT"))
                    End If
                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksWESMBill(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.am_jv_no, a.am_jv_date, c.invoice_no, c.id_number, d.full_name, c.invoice_date, c.charge_type, c.amount  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_WESM_BILL c, AM_PARTICIPANTS d " & _
                                "WHERE a.posted_type = '" & EnumPostedType.U.ToString() & "' AND a.am_jv_no = b.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND b.posted <> 5 AND a.batch_code = c.batch_code AND c.id_number = d.id_number AND a.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksWESMBill(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksWESMBill(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)
        Dim dicAcctCode As New Dictionary(Of String, String)

        Dim listAcctCode = Me.GetAccountingCodes()

        For Each itema In listAcctCode
            dicAcctCode.Add(itema.AccountCode, itema.Description)
        Next

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks
                Dim chargeType As EnumChargeType

                With dr
                    chargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = CStr(.Item("INVOICE_NO"))
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("INVOICE_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Bill Uploads"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))

                    If chargeType = EnumChargeType.E Or chargeType = EnumChargeType.EV Then
                        If CDec(.Item("AMOUNT")) < 0 Then
                            item.ItemAccountCode = New AccountingCode(AMModule.CreditCode, dicAcctCode(AMModule.CreditCode))
                            item.Debit = CDec(.Item("AMOUNT"))
                            item.Credit = 0
                        Else
                            item.ItemAccountCode = New AccountingCode(AMModule.DebitCode, dicAcctCode(AMModule.DebitCode))
                            item.Debit = 0
                            item.Credit = CDec(.Item("AMOUNT"))
                        End If
                    ElseIf chargeType = EnumChargeType.MF Then
                        If CDec(.Item("AMOUNT")) < 0 Then
                            item.ItemAccountCode = New AccountingCode(AMModule.MarketTransFeesCode, dicAcctCode(AMModule.MarketTransFeesCode))
                            item.Debit = 0
                            item.Credit = CDec(.Item("AMOUNT"))
                        Else
                            item.ItemAccountCode = New AccountingCode(AMModule.MarketTransFeesCode, dicAcctCode(AMModule.MarketTransFeesCode))
                            item.Debit = CDec(.Item("AMOUNT"))
                            item.Credit = 0
                        End If
                    Else
                        If CDec(.Item("AMOUNT")) < 0 Then
                            item.ItemAccountCode = New AccountingCode(AMModule.MarketFeesOutputTaxCode, dicAcctCode(AMModule.MarketFeesOutputTaxCode))
                            item.Debit = 0
                            item.Credit = CDec(.Item("AMOUNT"))
                        Else
                            item.ItemAccountCode = New AccountingCode(AMModule.MarketFeesOutputTaxCode, dicAcctCode(AMModule.MarketFeesOutputTaxCode))
                            item.Debit = CDec(.Item("AMOUNT"))
                            item.Credit = 0
                        End If
                    End If

                    result.Add(item)


                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksWESMBillJV(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT a.am_jv_no, a.am_jv_date, c.invoice_no, c.id_number, d.full_name, c.invoice_date, c.charge_type, c.amount  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_WESM_BILL c, AM_PARTICIPANTS d " & _
                                "WHERE a.posted_type = '" & EnumPostedType.U.ToString() & "' AND a.am_jv_no = b.am_jv_no " & "AND b.charge_type ='" & EnumChargeType.MF.ToString() & "' " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND b.posted <> 5 AND a.batch_code = c.batch_code AND c.id_number = d.id_number AND a.status = " & EnumStatus.Active
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksWESMBillJV(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksWESMBillJV(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)
        Dim dicAcctCode As New Dictionary(Of String, String)
        Dim listAcctCode = Me.GetAccountingCodes()

        For Each itema In listAcctCode
            dicAcctCode.Add(itema.AccountCode, itema.Description)
        Next

        Try
            While dr.Read()
                Dim chargeType As EnumChargeType
                With dr
                    chargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    Dim item As New SummaryAccountingBooks
                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = CStr(.Item("INVOICE_NO"))
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("INVOICE_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Bill Uploads"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    If chargeType = EnumChargeType.MF Then
                        If CDec(.Item("AMOUNT")) < 0 Then
                            item.ItemAccountCode = New AccountingCode(AMModule.CreditCode, dicAcctCode(AMModule.CreditCode))
                            item.Debit = CDec(.Item("AMOUNT"))
                            item.Credit = 0
                        Else
                            item.ItemAccountCode = New AccountingCode(AMModule.DebitCode, dicAcctCode(AMModule.DebitCode))
                            item.Debit = 0
                            item.Credit = CDec(.Item("AMOUNT"))
                        End If
                    Else
                        If CDec(.Item("AMOUNT")) < 0 Then
                            item.ItemAccountCode = New AccountingCode(AMModule.CreditCode, dicAcctCode(AMModule.CreditCode))
                            item.Debit = CDec(.Item("AMOUNT"))
                            item.Credit = 0
                        Else
                            item.ItemAccountCode = New AccountingCode(AMModule.DebitCode, dicAcctCode(AMModule.DebitCode))
                            item.Debit = 0
                            item.Credit = CDec(.Item("AMOUNT"))
                        End If
                    End If
                    result.Add(item)
                End With
            End While
            result.TrimExcess()
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetSummaryAccountingBooksWESMBillOffsetting(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT a.am_jv_no, a.am_jv_date, c.am_dmcm_no, c.id_number, e.full_name, c.updated_date, c.charge_type, " & _
                                "d.acct_code, f.description,  d.debit, d.credit   " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_DMCM c, AM_DMCM_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.O.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.am_dmcm_no = d.am_dmcm_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksWESMBillOffsetting(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksWESMBillOffsetting(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr
                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_DMCM_NO")), BIRDocumentsType.DMCM)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "PC Offsetting"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksDailyCollection(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.or_no, c.id_number, d.full_name, c.collection_date, c.collected_amount " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_COLLECTION c, AM_PARTICIPANTS d " & _
                                "WHERE a.posted_type = '" & EnumPostedType.DC.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.batch_code = c.daily_batch_code " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "and c.id_number = d.id_number "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksDailyCollection(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksDailyCollection(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)
        Dim dicAcctCode As New Dictionary(Of String, String)

        Dim listAcctCode = Me.GetAccountingCodes()

        For Each item In listAcctCode
            dicAcctCode.Add(item.AccountCode, item.Description)
        Next
        Try
            While dr.Read()
                With dr                    
                    Dim item1 As New SummaryAccountingBooks
                    item1.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item1.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item1.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("OR_NO")), BIRDocumentsType.OfficialReceipt)
                    item1.DocumentDate = CDate(FormatDateTime(CDate(.Item("COLLECTION_DATE")), DateFormat.GeneralDate))
                    item1.TransactionType = "Collection"
                    item1.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item1.ItemAccountCode = New AccountingCode(AMModule.CashInbankSettlementcode, dicAcctCode(AMModule.CashInbankSettlementcode))
                    item1.Debit = CDec(.Item("COLLECTED_AMOUNT"))
                    item1.Credit = 0
                    result.Add(item1)

                    Dim item2 As New SummaryAccountingBooks
                    item2.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item2.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item2.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("OR_NO")), BIRDocumentsType.OfficialReceipt)
                    item2.DocumentDate = CDate(FormatDateTime(CDate(.Item("COLLECTION_DATE")), DateFormat.GeneralDate))
                    item2.TransactionType = "Collection"
                    item2.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item2.ItemAccountCode = New AccountingCode(AMModule.ClearingAccountCode, dicAcctCode(AMModule.ClearingAccountCode))
                    item2.Debit = 0
                    item2.Credit = CDec(.Item("COLLECTED_AMOUNT"))
                    result.Add(item2)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksDeletedDailyCollection(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.or_no, c.id_number, d.full_name, c.collection_date, c.collected_amount " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_COLLECTION c, AM_PARTICIPANTS d " & _
                                "WHERE a.posted_type = '" & EnumPostedType.DCC.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.batch_code = c.batch_code " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "and c.id_number = d.id_number "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksDeletedDailyCollection(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksDeletedDailyCollection(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)
        Dim dicAcctCode As New Dictionary(Of String, String)

        Dim listAcctCode = Me.GetAccountingCodes()

        For Each item In listAcctCode
            dicAcctCode.Add(item.AccountCode, item.Description)
        Next
        Try
            While dr.Read()
                With dr
                    Dim item1 As New SummaryAccountingBooks
                    item1.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item1.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item1.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("OR_NO")), BIRDocumentsType.OfficialReceipt)
                    item1.DocumentDate = CDate(FormatDateTime(CDate(.Item("COLLECTION_DATE")), DateFormat.GeneralDate))
                    item1.TransactionType = "Collection"
                    item1.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item1.ItemAccountCode = New AccountingCode(AMModule.ClearingAccountCode, dicAcctCode(AMModule.ClearingAccountCode))
                    item1.Debit = CDec(.Item("COLLECTED_AMOUNT"))
                    item1.Credit = 0
                    result.Add(item1)

                    Dim item2 As New SummaryAccountingBooks
                    item2.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item2.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item2.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("OR_NO")), BIRDocumentsType.OfficialReceipt)
                    item2.DocumentDate = CDate(FormatDateTime(CDate(.Item("COLLECTION_DATE")), DateFormat.GeneralDate))
                    item2.TransactionType = "Collection"
                    item2.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item2.ItemAccountCode = New AccountingCode(AMModule.CashInbankSettlementcode, dicAcctCode(AMModule.CashInbankSettlementcode))
                    item2.Debit = 0
                    item2.Credit = CDec(.Item("COLLECTED_AMOUNT"))
                    result.Add(item2)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksCollectionTagging(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.or_no, c.id_number, e.full_name, c.or_date, d.acct_code, f.description,  d.debit, d.credit " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_OFFICIAL_RECEIPT_MAIN c, AM_OFFICIAL_RECEIPT_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.C.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.batch_code = c.batch_code " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.or_no = d.or_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksCollectionTagging(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksCollectionTagging(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("OR_NO")), BIRDocumentsType.OfficialReceipt)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("OR_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Collection Tagging"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksCollectionTaggingDMCM(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try

            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.am_dmcm_no, c.id_number, e.full_name, c.updated_date, c.charge_type, d.acct_code, f.description,  d.debit, d.credit " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_DMCM c, AM_DMCM_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.C.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.am_dmcm_no = d.am_dmcm_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksCollectionTaggingDMCM(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksCollectionTaggingDMCM(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_DMCM_NO")), BIRDocumentsType.DMCM)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Collection Tagging"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksCollectionTaggingFTF(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try

            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.ref_no, c.dr_date, d.acct_code, e.description,  d.debit, d.credit " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_FTF_MAIN c, AM_FTF_DETAILS d, AM_ACCOUNTING_CODE e " & _
                                "WHERE a.posted_type = '" & EnumPostedType.C.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND b.batch_code = c.batch_code " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.ref_no = d.ref_no AND d.acct_code = e.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksCollectionTaggingFTF(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksCollectionTaggingFTF(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.FTF)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Collection Tagging-FTF"
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksPRReplenishment(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.or_no, c.id_number, e.full_name, c.or_date, d.acct_code, f.description,  d.debit, d.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_OFFICIAL_RECEIPT_MAIN c, AM_OFFICIAL_RECEIPT_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND a.posted_type = '" & EnumPostedType.PRR.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.batch_code = c.batch_code " & _
                                "AND c.or_no = d.or_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPRReplenishment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPRReplenishment(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("OR_NO")), BIRDocumentsType.OfficialReceipt)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("OR_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "PR Replenishment"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksPRInterest(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.am_dmcm_no, c.id_number, e.full_name, c.updated_date, c.charge_type, d.acct_code, f.description,  d.debit, d.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_DMCM c, AM_DMCM_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.PRI.ToString() & "'  AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.am_dmcm_no = d.am_dmcm_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPRInterest(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPRInterest(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_DMCM_NO")), BIRDocumentsType.DMCM)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "PR Interest"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksPRTransferInterest(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.am_jv_no, a.am_jv_date, c.acct_code, d.description,  c.debit, c.credit " & _
                                "FROM AM_JV a, AM_WESM_BILL_GP_POSTED b, AM_JV_DETAILS c, AM_ACCOUNTING_CODE d " & _
                                "WHERE a.posted_type = '" & EnumPostedType.PRTI.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 " & _
                                "AND a.am_jv_no = c.am_jv_no AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.acct_code = d.acct_code"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPRTransferInterest(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPRTransferInterest(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr
                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Transfer PR Interest"
                    item.ItemParticipant = New AMParticipants("", "")
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksPaymentAllocation(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.am_jv_no, a.am_jv_date, c.acct_code, d.description,  c.debit, c.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_JV_DETAILS c, AM_ACCOUNTING_CODE d " & _
                                "WHERE a.posted_type = '" & EnumPostedType.P.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_no = c.am_jv_no AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.acct_code = d.acct_code"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPaymentAllocation(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPaymentAllocation(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr
                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Payment Allocation"
                    item.ItemParticipant = New AMParticipants("", "")
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksPaymentAllocationOffsetting(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try

            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.am_dmcm_no, c.id_number, e.full_name, c.updated_date, c.charge_type, d.acct_code, f.description,  d.debit, d.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_DMCM c, AM_DMCM_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.PA.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.am_dmcm_no = d.am_dmcm_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPaymentAllocationOffsetting(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPaymentAllocationOffsetting(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_DMCM_NO")), BIRDocumentsType.DMCM)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Offsetting of AR against AP"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Public Function GetSummaryAccountingBooksWithholdingTAXAdjustmentSetup(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try

            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.am_dmcm_no, c.id_number, e.full_name, c.updated_date, c.charge_type, d.acct_code, f.description,  d.debit, d.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_DMCM c, AM_DMCM_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.ADJWHTAX.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.am_dmcm_no = d.am_dmcm_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksWithholdingTAXAdjustmentSetup(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksWithholdingTAXAdjustmentSetup(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_DMCM_NO")), BIRDocumentsType.DMCM)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Withholding TAX Adjustment"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Public Function GetSummaryAccountingBooksSPASetup(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try

            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.am_dmcm_no, c.id_number, e.full_name, c.updated_date, c.charge_type, d.acct_code, f.description,  d.debit, d.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_DMCM c, AM_DMCM_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.SPASU.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.am_dmcm_no = d.am_dmcm_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksSPASetup(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksSPASetup(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_DMCM_NO")), BIRDocumentsType.DMCM)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Special Payment Agreement - Setup"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksSPAClosing(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try

            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.am_dmcm_no, c.id_number, e.full_name, c.updated_date, c.charge_type, d.acct_code, f.description,  d.debit, d.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_DMCM c, AM_DMCM_DETAILS d,  AM_PARTICIPANTS e, AM_ACCOUNTING_CODE f " & _
                                "WHERE a.posted_type = '" & EnumPostedType.SPAC.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.am_jv_no = c.am_jv_no " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.am_dmcm_no = d.am_dmcm_no AND c.id_number = e.id_number AND d.acct_code = f.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksSPAClosing(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksSPAClosing(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_DMCM_NO")), BIRDocumentsType.DMCM)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Special Payment Agreement - Closing"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksPaymentAllocationFTF(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try

            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.ref_no, c.dr_date, d.acct_code, e.description,  d.debit, d.credit " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_FTF_MAIN c, AM_FTF_DETAILS d, AM_ACCOUNTING_CODE e " & _
                                "WHERE a.posted_type = '" & EnumPostedType.PEFT.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND b.batch_code = c.batch_code " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.ref_no = d.ref_no AND d.acct_code = e.acct_code and c.status =  " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPaymentAllocationFTF(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPaymentAllocationFTF(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("REF_NO")), BIRDocumentsType.FTF)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("DR_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Payment Allocation - FTF"
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksPaymentAllocationCheck(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.cv_number, c.id_number, f.full_name, c.date_released, e.account_code, g.description,  e.debit, e.credit  " & _
                                "FROM am_jv a, AM_WESM_BILL_GP_POSTED b, AM_CHECKS c, AM_CHECK_VOUCHER_MAIN d, AM_CHECK_VOUCHER_DETAILS e,  AM_PARTICIPANTS f, AM_ACCOUNTING_CODE g " & _
                                "WHERE a.posted_type = '" & EnumPostedType.PEFT.ToString() & "' AND a.am_jv_no = b.am_jv_no and b.posted <> 5 AND a.batch_code = c.batch_code " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND c.cv_number = d.cv_number and d.cv_number = e.cv_number AND d.id_number = f.id_number " & _
                                "AND e.account_code = g.acct_code and c.status = " & EnumStatus.Active

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPaymentAllocationCheck(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPaymentAllocationCheck(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr

                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("CV_NUMBER")), BIRDocumentsType.CHECK)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Checks"
                    item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCOUNT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)

                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    'Public Function GetSummaryAccountingBooksPaymentAllocationEFT(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
    '    Dim ret As New List(Of SummaryAccountingBooks)
    '    Dim report As New DataReport

    '    Try
    '        Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, c.reference_no, d.id_number, e.full_name, d.amount, d.rfp_payment_type " & _
    '                            "FROM AM_JV a, AM_PAYMENT_NEW_DETAILS b, AM_RFP c, AM_RFP_DETAILS d, AM_PARTICIPANTS e " & _
    '                            "WHERE a.am_jv_no = b.am_jv_no And b.payment_no = c.payment_no " & _
    '                            "AND c.reference_no = d.reference_no AND d.id_number = e.id_number AND a.posted_type = '" & EnumPostedType.PEFT.ToString() & "' " & _
    '                            "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
    '                            "AND d.rfp_payment_type IN (1,3) and d.rfp_details_type = 1"

    '        report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
    '        If report.ErrorMessage.Length <> 0 Then
    '            Throw New ApplicationException(report.ErrorMessage)
    '        End If
    '        ret = Me.GetSummaryAccountingBooksPaymentAllocationEFT(report.ReturnedIDatareader)
    '    Catch ex As Exception
    '        Throw New ApplicationException(ex.Message)
    '    End Try
    '    Return ret
    'End Function

    'Private Function GetSummaryAccountingBooksPaymentAllocationEFT(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
    '    Dim result As New List(Of SummaryAccountingBooks)
    '    Dim dicAcctCode As New Dictionary(Of String, String)

    '    Dim listAcctCode = Me.GetAccountingCodes()

    '    For Each item In listAcctCode
    '        dicAcctCode.Add(item.AccountCode, item.Description)
    '    Next

    '    Try
    '        While dr.Read()
    '            Dim item As New SummaryAccountingBooks

    '            With dr

    '                item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
    '                item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
    '                item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
    '                item.ItemParticipant = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("FULL_NAME")))

    '                If CInt(.Item("RFP_PAYMENT_TYPE")) = 1 Then
    '                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("REFERENCE_NO")), BIRDocumentsType.EFT)
    '                    item.ItemAccountCode = New AccountingCode(AMModule.CashInbankSettlementcode, dicAcctCode(AMModule.CashInbankSettlementcode))
    '                    item.TransactionType = "EFT"
    '                    item.Debit = 0
    '                    item.Credit = CDec(.Item("AMOUNT"))
    '                Else
    '                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
    '                    item.ItemAccountCode = New AccountingCode(AMModule.DeferredPaymentCode, dicAcctCode(AMModule.DeferredPaymentCode))
    '                    item.TransactionType = "Set as Deferred Payment"
    '                    item.Debit = CDec(.Item("AMOUNT"))
    '                    item.Credit = 0
    '                End If


    '                result.Add(item)

    '            End With
    '        End While
    '        result.TrimExcess()

    '    Catch ex As ApplicationException
    '        Throw New ApplicationException(ex.Message)
    '    Finally
    '        If Not dr.IsClosed Then
    '            dr.Close()
    '        End If
    '    End Try

    '    Return result
    'End Function

    Public Function GetSummaryAccountingBooksPRREfund(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, b.acct_code, c.description, b.debit, b.credit " & _
                                "FROM AM_JV a, AM_JV_DETAILS b, AM_ACCOUNTING_CODE c " & _
                                "WHERE a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND a.am_jv_no = b.am_jv_no AND b.acct_code = c.acct_code AND a.posted_type IN ('" & EnumPostedType.PRREFFTF.ToString() & "', '" & EnumPostedType.PRREF.ToString() & "', '" & EnumPostedType.PRREFEFT.ToString & "')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPRREfund(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPRREfund(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr
                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.TransactionType = "Prudential Requirements Refund - PR"
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))

                    result.Add(item)
                End With

            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Public Function GetSummaryAccountingBooksPaymentAllocationEFT(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim sql As String = "SELECT a.am_jv_no, a.am_jv_date, b.acct_code, c.description, b.debit, b.credit " & _
                                "FROM AM_JV a, AM_JV_DETAILS b, AM_ACCOUNTING_CODE c " & _
                                "WHERE a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND a.am_jv_no = b.am_jv_no AND b.acct_code = c.acct_code AND a.posted_type = '" & EnumPostedType.PEFT.ToString() & "' "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksPaymentAllocationEFT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksPaymentAllocationEFT(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr
                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), CStr(.Item("DESCRIPTION")))
                    item.TransactionType = "Electronic Fund Transfer - EFT"
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))

                    result.Add(item)
                End With

            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSummaryAccountingBooksSettlementInterest(StartDate As Date, EndDate As Date) As List(Of SummaryAccountingBooks)
        Dim ret As New List(Of SummaryAccountingBooks)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT a.am_jv_no, a.am_jv_date,  b.acct_code, b.debit, b.credit " & _
                                "FROM AM_JV a, AM_JV_DETAILS b, AM_WESM_BILL_GP_POSTED c " & _
                                "WHERE a.posted_type ='" & EnumPostedType.IES.ToString() & "' " & _
                                "AND a.am_jv_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') AND TO_DATE('" & EndDate & "','MM/DD/YYYY') " & _
                                "AND a.am_jv_no = b.am_jv_no and a.am_jv_no = c.am_jv_no"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetSummaryAccountingBooksSettlementInterest(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetSummaryAccountingBooksSettlementInterest(ByVal dr As IDataReader) As List(Of SummaryAccountingBooks)
        Dim result As New List(Of SummaryAccountingBooks)
        Dim dicAcctCode As New Dictionary(Of String, String)

        Dim listAcctCode = Me.GetAccountingCodes()

        For Each item In listAcctCode
            dicAcctCode.Add(item.AccountCode, item.Description)
        Next

        Try
            While dr.Read()
                Dim item As New SummaryAccountingBooks

                With dr
                    item.JVNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.DocumentNo = BFactory.GenerateBIRDocumentNumber(CInt(.Item("AM_JV_NO")), BIRDocumentsType.JournalVoucher)
                    item.DocumentDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.GeneralDate))
                    item.TransactionType = "Settlement Interest Earned"
                    item.ItemParticipant = New AMParticipants("", "")
                    item.ItemAccountCode = New AccountingCode(CStr(.Item("ACCT_CODE")), dicAcctCode(CStr(.Item("ACCT_CODE"))))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))

                    result.Add(item)
                End With
            End While
            result.TrimExcess()

        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Save Parent Child Mapping"
    Public Sub SaveParentChildMapping(ByVal ParentChildMapping As List(Of ParticipantParentChildMapping), ByVal BillPeriod As Integer, _
                                      Optional ByVal OverWrite As Boolean = False, Optional ByVal ParentParticipant As ParticipantParentChildMapping = Nothing)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        

        Try
            Dim dt As New DataTable
            dt.TableName = "AM_PARENT_CHILD_MAPPING"
            With dt.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("PC_NUMBER", GetType(String))
                .Add("PARENT_FLAG", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("CREATED_DATE", GetType(Date))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
                .Add("REMARKS", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
            End With
            dt.AcceptChanges()

            If OverWrite = True Then
                If ParentParticipant IsNot Nothing Then
                    listSQL.Add("UPDATE AM_PARENT_CHILD_MAPPING SET STATUS = 2  WHERE BILLING_PERIOD = '" & BillPeriod & "' AND PARENT_FLAG <> 1 AND PC_NUMBER = '" & ParentParticipant.IDNumber & "'")
                Else
                    listSQL.Add("UPDATE AM_PARENT_CHILD_MAPPING SET STATUS = 2  WHERE BILLING_PERIOD = '" & BillPeriod & "'")
                End If


            End If

            Dim row As DataRow
            For Each record In ParentChildMapping
                row = dt.NewRow()
                With record
                    row("ID_NUMBER") = .IDNumber
                    row("PC_NUMBER") = .PCNumber
                    row("PARENT_FLAG") = .ParentFlag
                    row("STATUS") = .Status
                    row("CREATED_DATE") = SystemDate
                    row("UPDATED_BY") = Me.UserName
                    row("UPDATED_DATE") = SystemDate
                    row("REMARKS") = .Remarks
                    row("BILLING_PERIOD") = BillPeriod
                End With
                dt.Rows.Add(row)
            Next
            dt.AcceptChanges()
            ds.Tables.Add(dt)
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Participant As Parent"
    Public Sub SaveParticipantAsParent(ByVal ParentIDNumber As ParticipantParentChildMapping)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        

        Try
            Dim dt As New DataTable
            dt.TableName = "AM_PARENT_CHILD_MAPPING"
            With dt.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("PC_NUMBER", GetType(String))
                .Add("PARENT_FLAG", GetType(Integer))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("CREATED_DATE", GetType(Date))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
                .Add("REMARKS", GetType(String))
            End With
            dt.AcceptChanges()

            listSQL.Add("UPDATE " & dt.TableName & " SET STATUS = 0, UPDATED_DATE = '" & Format(SystemDate, "dd-MMM-yy") & "' WHERE ID_NUMBER = '" & ParentIDNumber.IDNumber & "" & _
                        "' AND STATUS = 1 AND BILLING_PERIOD = '" & ParentIDNumber.BillPeriod & "'") 'AND PC_NUMBER = '" & ParentIDNumber.PCNumber 

            Dim row As DataRow
            row = dt.NewRow()
            With ParentIDNumber
                row("ID_NUMBER") = .IDNumber
                row("PC_NUMBER") = .IDNumber
                row("BILLING_PERIOD") = .BillPeriod
                row("PARENT_FLAG") = 1
                row("STATUS") = 1
                row("CREATED_DATE") = SystemDate
                row("UPDATED_BY") = Me.UserName
                row("UPDATED_DATE") = SystemDate
                row("REMARKS") = "Set as Parent at " & SystemDate & " by " & Me.UserName & "."
            End With
            dt.Rows.Add(row)
            dt.AcceptChanges()
            ds.Tables.Add(dt)
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Participant As Child"
    Public Sub SaveParticipantAsChild(ByVal ChildDetails As ParticipantParentChildMapping, ByVal BillPeriod As Integer)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        

        Try
            Dim dt As New DataTable
            dt.TableName = "AM_PARENT_CHILD_MAPPING"
            With dt.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("PC_NUMBER", GetType(String))
                .Add("PARENT_FLAG", GetType(Integer))
                .Add("STATUS", GetType(Integer))
                .Add("CREATED_DATE", GetType(Date))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
                .Add("REMARKS", GetType(String))
                .Add("BILLING_PERIOD", GetType(Integer))
            End With
            dt.AcceptChanges()


            listSQL.Add("UPDATE " & dt.TableName & " SET STATUS = 0, UPDATED_DATE = '" & Format(SystemDate, "dd-MMM-yy") & "' WHERE ID_NUMBER = '" & ChildDetails.IDNumber & "" & _
                        "' AND STATUS = 1 AND BILLING_PERIOD = '" & BillPeriod & "'") 'AND PC_NUMBER = '" & ChildDetails.PCNumber


            Dim row As DataRow
            row = dt.NewRow()
            With ChildDetails
                row("ID_NUMBER") = .IDNumber
                row("PC_NUMBER") = .PCNumber
                row("PARENT_FLAG") = 0
                row("STATUS") = 1
                row("CREATED_DATE") = SystemDate
                row("UPDATED_BY") = Me.UserName
                row("UPDATED_DATE") = SystemDate
                row("REMARKS") = .Remarks
                row("BILLING_PERIOD") = BillPeriod
            End With

            dt.Rows.Add(row)
            dt.AcceptChanges()
            ds.Tables.Add(dt)
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "UpdateSignatories"
    Public Sub SaveSignatories(ByVal UpdateSignatories As DocSignatories)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        

        Try
            Dim dt As New DataTable
            dt.TableName = "AM_SIGNATORIES"

            With UpdateSignatories
                SQL = " UPDATE " & dt.TableName & " SET " & _
                      " SIGNATORY_1 = '" & .Signatory_1 & "', " & _
                      " SIGNATORY_2 = '" & .Signatory_2 & "', " & _
                      " SIGNATORY_3 = '" & .Signatory_3 & "', " & _
                      " POSITION_1 = '" & .Position_1 & "', " & _
                      " POSITION_2 = '" & .Position_2 & "', " & _
                      " POSITION_3 = '" & .Position_3 & "', " & _
                      " DOC_DESC = '" & .DocDescription & "', " & _
                      " UPDATED_BY = '" & Me.UserName & "', " & _
                      " UPDATED_DATE = TO_DATE('" & CDate(FormatDateTime(DateTime.Now, DateFormat.ShortDate)) & "','MM/DD/YYYY') " & _
                      " WHERE DOC_CODE ='" & .DocCode & "'"
            End With

            report = Me.DataAccess.ExcuteNonQuery(SQL)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get AM Signatores"
    Public Function GetSignatories() As List(Of DocSignatories)
        Dim result As New List(Of DocSignatories)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_SIGNATORIES"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetSignatories(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetSignatories(ByVal DocumentCode As String) As List(Of DocSignatories)
        Dim result As New List(Of DocSignatories)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_SIGNATORIES WHERE DOC_CODE LIKE '" & DocumentCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetSignatories(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetSignatories(ByVal dr As IDataReader) As List(Of DocSignatories)
        Dim result As New List(Of DocSignatories)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New DocSignatories
                    item.DocCode = CStr(.Item("DOC_CODE").ToString)
                    item.DocDescription = CStr(.Item("DOC_DESC").ToString)
                    item.UpdatedBy = CStr(.Item("UPDATED_BY").ToString)
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE").ToString)

                    item.Signatory_1 = CStr(.Item("SIGNATORY_1").ToString)
                    item.Position_1 = CStr(.Item("POSITION_1").ToString)

                    item.Signatory_2 = CStr(.Item("SIGNATORY_2").ToString)
                    item.Position_2 = CStr(.Item("POSITION_2").ToString)

                    item.Signatory_3 = CStr(.Item("SIGNATORY_3").ToString)
                    item.Position_3 = CStr(.Item("POSITION_3").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Parent-Child Mapping"

    Public Function GetParentChildMapping(ByVal status As Integer) As List(Of ParticipantParentChildMapping)
        Dim result As New List(Of ParticipantParentChildMapping)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PARENT_CHILD_MAPPING WHERE "

            If status = 1 Then
                SQL &= "STATUS = 1"
            ElseIf status = 2 Then
                SQL &= "STATUS = 0"
            Else
                SQL = Replace(SQL, "WHERE ", "")
            End If
            SQL &= " ORDER BY UPDATED_DATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParentChildMapping(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetParentChildMapping(ByVal Participant As String, Optional ByVal isSearch As Boolean = False) As List(Of ParticipantParentChildMapping)
        Dim result As New List(Of ParticipantParentChildMapping)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PARENT_CHILD_MAPPING WHERE PC_NUMBER = '" & Participant & "' "

            If isSearch = True Then
                SQL &= "OR ID_NUMBER = '" & Participant & "' "
            End If

            SQL &= " ORDER BY BILLING_PERIOD DESC, PC_NUMBER ASC, PARENT_FLAG DESC "
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParentChildMapping(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetParentChildMappingPerBillingPeriod(ByVal BillingPeriod As Integer, Optional ByVal AllDetails As Boolean = False) As List(Of ParticipantParentChildMapping)
        Dim result As New List(Of ParticipantParentChildMapping)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = ""

            If AllDetails = True Then
                SQL = "SELECT * FROM AM_PARENT_CHILD_MAPPING " & _
                      "WHERE billing_period = " & BillingPeriod
            Else
                SQL = "SELECT * FROM AM_PARENT_CHILD_MAPPING " & _
                        "WHERE status = 1 AND billing_period = " & BillingPeriod
            End If

            SQL &= " ORDER BY BILLING_PERIOD DESC, PC_NUMBER ASC, PARENT_FLAG DESC "
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParentChildMapping(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetP2CMappingAllBP() As List(Of ParticipantParentChildMapping)
        Dim result As New List(Of ParticipantParentChildMapping)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT DISTINCT B.* " & _
                                "FROM AM_PARTICIPANTS A " & _
                                "LEFT JOIN AM_PARENT_CHILD_MAPPING B " & _
                                "ON (A.ID_NUMBER = B.ID_NUMBER OR A.ID_NUMBER = B.PC_NUMBER) " & _
                                "WHERE(B.STATUS = 1) " & _
                                "ORDER BY B.BILLING_PERIOD DESC, B.PC_NUMBER ASC, B.PARENT_FLAG DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParentChildMapping(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetParentChildMappingLogs(ByVal Participant As String) As List(Of ParticipantParentChildMapping)
        Dim result As New List(Of ParticipantParentChildMapping)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PARENT_CHILD_MAPPING WHERE ID_NUMBER = '" & Participant & "' OR PC_NUMBER = '" & Participant & "' " & _
                                "order by status desc, created_date desc"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParentChildMapping(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetParentChildMappingPerBillingPeriodForParent(ByVal BillingPeriod As Integer) As List(Of ParticipantParentChildMapping)
        Dim result As New List(Of ParticipantParentChildMapping)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PARENT_CHILD_MAPPING " & _
                                "WHERE status = 1 AND parent_flag = 1 AND billing_period = " & BillingPeriod

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetParentChildMapping(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetParentChildMapping(ByVal reader As IDataReader) As List(Of ParticipantParentChildMapping)
        Dim result As New List(Of ParticipantParentChildMapping)

        Try
            While reader.Read()
                Dim record As New ParticipantParentChildMapping
                With reader
                    record.IDNumber = CStr(.Item("ID_NUMBER"))
                    record.PCNumber = CStr(.Item("PC_NUMBER"))
                    record.BillPeriod = CInt(.Item("BILLING_PERIOD"))
                    record.ParentFlag = CInt(.Item("PARENT_FLAG"))
                    record.Status = CInt(.Item("STATUS"))
                    record.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    record.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    record.Remarks = CStr(.Item("REMARKS"))
                    record.DateCreated = CDate(.Item("CREATED_DATE"))
                End With
                result.Add(record)
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetUnmappedParticipants(ByVal BillingPeriod As Integer) As List(Of String)
        Dim result As New List(Of String)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT A.PARTICIPANT_ID, B.ID_NUMBER, B.PC_NUMBER " & _
                                "FROM AM_PARTICIPANTS A " & _
                                "LEFT JOIN (SELECT * FROM AM_PARENT_CHILD_MAPPING B WHERE BILLING_PERIOD = '" & BillingPeriod & "' AND STATUS = 1) B " & _
                                "ON A.ID_NUMBER = B.ID_NUMBER " & _
                                "OR A.ID_NUMBER = B.PC_NUMBER " & _
                                "WHERE(B.ID_NUMBER Is NULL And B.PC_NUMBER Is NULL) " & _
                                "ORDER BY A.PARTICIPANT_ID ASC "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetUnmappedParticipants(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetUnmappedParticipants(ByVal reader As IDataReader) As List(Of String)
        Dim result As New List(Of String)

        Try
            While reader.Read()
                With reader
                    result.Add(CStr(.Item("PARTICIPANT_ID").ToString))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get if Parent is Child"
    Public Function IsParentExistingAsChild(ByVal ParentId As String, ByVal BillingPeriod As Integer) As Boolean
        Dim result As Boolean
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT COUNT(*) AS CNT FROM AM_PARENT_CHILD_MAPPING WHERE ID_NUMBER = '" & ParentId & "' AND PARENT_FLAG = 0 AND STATUS = 1 AND BILLING_PERIOD = '" & BillingPeriod & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.IsParentExistingAsChild(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function IsParentExistingAsChild(ByVal reader As IDataReader) As Boolean
        Dim result As Boolean
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    cnt = CInt(.Item("CNT"))
                End With
            End While

            If cnt <> 0 Then
                result = True
            End If
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get if Parent is Already Existing"
    Public Function IsParentExisting(ByVal ParentId As String, ByVal BillingPeriod As Integer) As Integer
        Dim result As Integer
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT COUNT(*) AS CNT FROM AM_PARENT_CHILD_MAPPING WHERE PC_NUMBER = '" & ParentId & "' AND STATUS = 1 AND BILLING_PERIOD = '" & BillingPeriod & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.IsParentExisting(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function IsParentExisting(ByVal reader As IDataReader) As Integer
        Dim result As Integer
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    cnt = CInt(.Item("CNT"))
                End With
            End While

            result = cnt
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function

    Public Sub DisableParentChildMapping(ByVal RecordToDisable As ParticipantParentChildMapping)
        Dim report As New DataReport
        Dim SQL As String
        Dim listSQL As New List(Of String)
        Dim revision As Integer = 0

        

        Try
            With RecordToDisable
                SQL = "UPDATE AM_PARENT_CHILD_MAPPING SET STATUS = 0 WHERE ID_NUMBER = '" & .IDNumber & "' AND PC_NUMBER = '" & .PCNumber & "' " & _
                      "AND BILLING_PERIOD = '" & .BillPeriod & "' "
                listSQL.Add(SQL)
            End With

            listSQL.Add(SQL)
            report = Me.DataAccess.ExecuteUpdateQueryBulk(listSQL)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try


    End Sub
#End Region

#Region "Get WESM Bill GP Posted"
    Public Function GetWESMBillGPPosted(ByVal items As WESMBillGPPosted) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = ""
            If Trim(items.SettlementRun.ToString) = "" Then
                SQL = "SELECT a.*, b.am_jv_date FROM AM_WESM_BILL_GP_POSTED a, am_jv b " & _
                         " WHERE A.AM_JV_NO = B.AM_JV_NO and a.BILLING_PERIOD = '" & items.BillingPeriod & "' AND a.CHARGE_TYPE = '" & items.Charge.ToString & "'" & _
                         " AND a.BATCH_CODE = '0'"
            Else
                SQL = "SELECT a.*, b.am_jv_date FROM AM_WESM_BILL_GP_POSTED a, am_jv b " & _
                        " WHERE A.AM_JV_NO = B.AM_JV_NO and a.BILLING_PERIOD = '" & items.BillingPeriod & "' AND a.STL_RUN = '" & items.SettlementRun & "'"
            End If
            SQL &= " ORDER BY a.BILLING_PERIOD, a.POSTED ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillGPPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillGPPosted(ByVal billperiod As Integer, ByVal isPosted As Integer) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT a.*, b.am_jv_date FROM AM_WESM_BILL_GP_POSTED a, am_jv b " & _
                                "WHERE A.AM_JV_NO = B.AM_JV_NO and billing_period = " & billperiod & " "


            Select Case isPosted
                Case 0
                    SQL &= " "
                Case 1
                    SQL &= "AND POSTED = 1 "
                Case 2
                    SQL &= "AND POSTED = 0 "
            End Select
            SQL &= "ORDER BY BILLING_PERIOD, POSTED ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillGPPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillGPPosted(ByVal isPosted As Integer) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport

        Try
            

            Dim SQL = "SELECT a.*, b.am_jv_date FROM AM_WESM_BILL_GP_POSTED a, AM_JV b "

            Select Case isPosted
                Case 0
                    SQL &= " "
                Case 1
                    SQL &= "WHERE A.AM_JV_NO = B.AM_JV_NO and a.POSTED = 1 "
                Case 2
                    SQL &= "WHERE A.AM_JV_NO = B.AM_JV_NO and a.POSTED = 0 "
            End Select
            SQL &= "ORDER BY a.BILLING_PERIOD, a.POSTED ASC"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillGPPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillGPPosted() As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT a.*, b.am_jv_date FROM AM_WESM_BILL_GP_POSTED a, AM_JV b " & _
                                "WHERE A.AM_JV_NO = B.AM_JV_NO " & _
                                "ORDER BY a.BILLING_PERIOD, a.POSTED ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillGPPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillGPPosted(ByVal BatchCode As String) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT a.*, b.am_jv_date FROM AM_WESM_BILL_GP_POSTED a, AM_JV b " & _
                                "WHERE A.AM_JV_NO = B.AM_JV_NO and a.BATCH_CODE = '" & BatchCode & "' " & _
                                "ORDER BY a.BILLING_PERIOD, a.POSTED ASC"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillGPPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillGPPosted(ByVal FromDate As Date, ByVal ToDate As Date, ByVal Status As Integer) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT A.*, B.AM_JV_DATE FROM AM_WESM_BILL_GP_POSTED A, AM_JV B " & _
                                "WHERE A.AM_JV_NO = B.AM_JV_NO AND B.AM_JV_DATE BETWEEN TO_DATE('" & FormatDateTime(FromDate, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                                "AND TO_DATE('" & FormatDateTime(ToDate, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM') " '& _
            '"AND DOCUMENT_AMOUNT <> 0"

            If Status = 1 Then
                SQL &= " AND A.POSTED = 1"
            ElseIf Status = 0 Then
                SQL &= " AND A.POSTED = 0"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillGPPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillGPPosted(ByVal dr As IDataReader) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillGPPosted

                    If Not .Item("BILLING_PERIOD") Is DBNull.Value Then
                        item.BillingPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    Else
                        item.BillingPeriod = 0
                    End If

                    item.SettlementRun = CStr(.Item("STL_RUN").ToString())

                    If (.Item("CHARGE_TYPE")) Is DBNull.Value Then
                        item.Charge = Nothing
                    Else
                        item.Charge = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    End If

                    item.Posted = CInt(.Item("POSTED"))
                    If Not IsDate(.Item("DUE_DATE")) Then
                        item.DueDate = Nothing
                    Else
                        item.DueDate = CDate(.Item("DUE_DATE"))
                    End If

                    item.DocumentAmount = CDec(.Item("DOCUMENT_AMOUNT"))
                    item.BatchCode = .Item("BATCH_CODE").ToString()
                    item.Remarks = .Item("REMARKS").ToString()
                    item.GPRefNo = CStr(.Item("GP_REFNO").ToString())
                    item.PostType = CStr(.Item("POSTED_TYPE").ToString())
                    item.TransactionDate = CDate(.Item("AM_JV_DATE").ToString()) 'Error on 08/19/2014
                    item.JVNumber = CLng(.Item("AM_JV_NO").ToString)
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumPostedType), CStr(.Item("POSTED_TYPE"))), EnumPostedType)

                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

#End Region

#Region "Get If WESM Bill is Posted"
    Public Function IsWESMBillPosted(ByVal BillingPeriod As Integer, ByVal settlementrun As String, ByVal chargetype As EnumChargeType) As Boolean
        Dim result As Boolean
        Dim report As New DataReport
        Dim params(2) As IDataParameter

        Try
            
            Dim SQL As String = "SELECT COUNT(*) as cnt FROM AM_WESM_BILL_GP_POSTED " & _
                                "WHERE billing_period = '" & BillingPeriod & "' AND stl_run ='" & settlementrun & _
                                "' AND POSTED = 1 AND CHARGE_TYPE = '" & chargetype.ToString & "' AND posted_type = '" & EnumPostedType.U.ToString() & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.IsWESMBillPosted(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function IsWESMBillPosted(ByVal reader As IDataReader) As Boolean
        Dim result As Boolean
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    cnt = CInt(.Item("CNT"))
                End With
            End While

            If cnt <> 0 Then
                result = True
            End If
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get If WESM Bill is Existing"
    Public Function GetWESMGPCount(ByVal billingPeriod As Integer, ByVal settlementrun As String) As Boolean
        Dim result As Boolean
        Dim report As New DataReport
        Dim params(2) As IDataParameter

        Try
            
            Dim SQL As String = "SELECT COUNT(*) as cnt FROM AM_WESM_BILL_GP_POSTED " & _
                                "WHERE billing_period = '" & billingPeriod & "' AND stl_run ='" & settlementrun & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMGPCount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMGPCount(ByVal reader As IDataReader) As Boolean
        Dim result As Boolean
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    cnt = CInt(.Item("CNT"))
                End With
            End While

            If cnt <> 0 Then
                result = True
            End If
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Billing Period in GP"

    Public Function GetBillPdGP() As List(Of Integer)
        Dim result As New List(Of Integer)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT DISTINCT BILLING_PERIOD FROM AM_WESM_BILL_GP_POSTED " & _
                                "WHERE BILLING_PERIOD IS NOT NULL " & _
                                "ORDER BY BILLING_PERIOD DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetBillPdGP(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetBillPdGP(ByVal reader As IDataReader) As List(Of Integer)
        Dim result As New List(Of Integer)

        Try
            While reader.Read()
                With reader
                    result.Add(CInt(.Item("BILLING_PERIOD").ToString))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Post to GP"
    Public Sub PostToGP(ByVal WESMBillGPList As List(Of WESMBillGPPosted), ByVal Post As Boolean)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        Dim listSQL As New List(Of String)
        Dim revision As Integer = 0

        

        Try
            For Each item In WESMBillGPList
                If Post = True Then
                    If item.SettlementRun = "" Then
                        SQL = "UPDATE AM_WESM_BILL_GP_POSTED SET POSTED = 1 WHERE   BATCH_CODE = '" & item.BatchCode & "'"
                    Else
                        SQL = "UPDATE AM_WESM_BILL_GP_POSTED SET POSTED = 1 WHERE   BATCH_CODE = '" & item.BatchCode & "'"
                    End If
                Else
                    If item.SettlementRun = "" Then
                        SQL = "UPDATE AM_WESM_BILL_GP_POSTED SET GP_REFNO = '" & item.GPRefNo & "' WHERE   BATCH_CODE = '" & item.BatchCode & "'"
                    Else
                        SQL = "UPDATE AM_WESM_BILL_GP_POSTED SET GP_REFNO = '" & item.GPRefNo & "' WHERE   BATCH_CODE = '" & item.BatchCode & "'"
                    End If
                End If

                listSQL.Add(SQL)
            Next
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub PostToGP(ByVal JVNumber As List(Of Long))
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        Dim listSQL As New List(Of String)
        Dim revision As Integer = 0

        

        Try
            For Each item In JVNumber
                SQL = "UPDATE AM_WESM_BILL_GP_POSTED SET POSTED = 1 WHERE AM_JV_NO = '" & item & "'"
                listSQL.Add(SQL)
            Next
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub UpdateGPReference(ByVal JVNumber As Long, ByVal GPReference As String)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim SQL As String
        Dim listSQL As New List(Of String)
        Dim revision As Integer = 0

        

        Try
            SQL = "UPDATE AM_WESM_BILL_GP_POSTED SET POSTED = 1, GP_REFNO = '" & GPReference & "' WHERE AM_JV_NO = '" & JVNumber & "'"
            listSQL.Add(SQL)
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get AM_WESM_BILL_SUMMARY"   
    Public Function GetWESMBillSummaryPerParticipant(ByVal IDNumber As String) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try

            SQL = "SELECT a.id_number, a.group_no, a.ID_TYPE, b.participant_id, a.billing_period, a.charge_type, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine &
                         "b.participant_address, b.city, b.province, b.zip_code, b.ZERO_RATED_MARKET_FEES, b.ZERO_RATED_ENERGY, " & vbNewLine &
                         "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine &
                         "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, a.ADJUSTMENT, a.WESMBILL_BATCH_NO, a.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & vbNewLine &
                  "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine &
                  "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine &
                  "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine &
                  "WHERE A.ID_NUMBER = '" & IDNumber & "' "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummary(ByVal SummaryType As EnumSummaryType, ByVal InvDMCMNo As String, ByVal ChargeType As EnumChargeType) _
                                                    As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try

            


            SQL = "SELECT A.ID_NUMBER,A.GROUP_NO,A.ID_TYPE, B.PARTICIPANT_ID, a.billing_period, a.charge_type, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                       "b.participant_address, b.city, b.province, b.zip_code, " & vbNewLine & _
                        "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                        "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, c.remarks " & vbNewLine & _
                  "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                  "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                  "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                  "WHERE A.SUMMARY_TYPE = '" & SummaryType.ToString & "' AND INV_DM_CM = '" & InvDMCMNo & "' AND CHARGE_TYPE = '" & ChargeType.ToString & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryPerParticipant(ByVal IDNumber As Long, ByVal ChargeType As EnumChargeType) _
                                                     As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try

            


            SQL = "SELECT A.ID_NUMBER,A.GROUP_NO,A.ID_TYPE, B.PARTICIPANT_ID, a.billing_period, a.charge_type, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                        "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                        "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                        "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                  "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                  "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                  "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                  "WHERE A.ID_NUMBER = " & IDNumber & " AND A.CHARGE_TYPE = '" & ChargeType.ToString & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryWithBalancePerParticipant(ByVal ParticipantID As String, ByVal ChargeType As EnumChargeType) _
                                                     As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try

            


            SQL = "SELECT A.ID_NUMBER,A.GROUP_NO,A.ID_TYPE, B.PARTICIPANT_ID, a.billing_period, a.charge_type, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                            "b.participant_address, b.city, b.province, b.zip_code, " & vbNewLine & _
                            "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                            "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, c.remarks " & vbNewLine & _
                  "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                  "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                  "JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                  "WHERE (A.ENDING_BALANCE <> 0 AND B.PARTICIPANT_ID = '" & ParticipantID & "' AND A.CHARGE_TYPE = '" & ChargeType.ToString & "') " & vbNewLine & _
                    "OR (A.DUE_DATE = (SELECT MAX(DUE_DATE) FROM AM_WESM_BILL_SUMMARY) AND B.PARTICIPANT_ID = '" & ParticipantID & "' AND A.CHARGE_TYPE = '" & ChargeType.ToString & "')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Public Function GetWESMBillSummaryPerParticipant(ByVal IDNumber As Long, ByVal ChargeType As EnumChargeType, _
                                                     ByVal Flag As Boolean) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try

            

            If Flag Then
                SQL = "SELECT A.ID_NUMBER,A.GROUP_NO,A.ID_TYPE, B.PARTICIPANT_ID, a.billing_period, a.charge_type, A.ENERGY_WITHHOLD, " & vbNewLine & _
                            "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                            "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                            "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.TRANSACTION_DATE, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, c.remarks " & vbNewLine & _
                      "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                      "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                      "WHERE A.ID_NUMBER = '" & IDNumber & "' AND a.charge_type ='" & ChargeType.ToString() & "' " & vbNewLine & _
                      "AND a.ending_balance > 0 " & vbNewLine & _
                      "ORDER BY a.billing_period"
            Else
                SQL = "SELECT A.ID_NUMBER,A.GROUP_NO,A.ID_TYPE, B.PARTICIPANT_ID, a.billing_period, a.charge_type, A.ENERGY_WITHHOLD, " & vbNewLine & _
                            "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                            "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                            "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.TRANSACTION_DATE, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                      "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                      "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                      "WHERE A.ID_NUMBER = '" & IDNumber & "' AND a.charge_type ='" & ChargeType.ToString() & "' " & vbNewLine & _
                      "AND a.ending_balance < 0 " & vbNewLine & _
                      "ORDER BY a.billing_period"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummary() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                                        "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                                        "A.charge_type, A.due_date, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                                        "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT,  C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                                "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                                "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                                "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                                "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Public Function GetWESMBillSummaryExcludeWTax() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID,  A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                                "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                                "A.charge_type, A.due_date, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                                "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                                "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                                "JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                                "WHERE (a.energy_withhold-a.ending_balance)>0 and a.ending_balance < 0 and a.charge_type = 'E' and a.no_offset = 0 and not a.inv_dm_cm like 'DMCM%INV%' and not a.inv_dm_cm like 'SPA%'" & vbNewLine & _
                                "ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummary(ByVal WESMBillNo As List(Of Long), ByVal isWESMBILLNo As Boolean) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String
            
            Dim inpColumn As String = ""
            If isWESMBILLNo = False Then
                SQL = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID, A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                                "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                                "A.charge_type, A.due_date, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                     "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                     "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                     "JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                     "WHERE A.WESMBILL_SUMMARY_NO IN ("
                inpColumn = "A.WESMBILL_SUMMARY_NO"
            Else
                SQL = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID, A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                                "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                                "A.charge_type, A.due_date, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                                "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT,  C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                     "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                     "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                     "JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                     "WHERE A.INV_DM_CM IN ("
                inpColumn = "A.INV_DM_CM"
            End If


            Dim recCtr As Long = 0
            For Each itmBillNo In WESMBillNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmBillNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR " & inpColumn & " IN ("
                    End If
                    SQL &= itmBillNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") ORDER BY B.PARTICIPANT_ID ASC, BILLING_PERIOD ASC, DUE_DATE ASC, A.CHARGE_TYPE ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummary(ByVal BillPeriod As Integer, ByVal chargeType As EnumChargeType) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try
            SQL = "SELECT A.ID_NUMBER,A.GROUP_NO,A.ID_TYPE, B.PARTICIPANT_ID, a.billing_period, a.charge_type,A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                       "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                        "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                        "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT,  C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                  "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                  "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                  "JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                  "WHERE A.BILLING_PERIOD = '" & BillPeriod & "' AND A.CHARGE_TYPE = '" & chargeType.ToString & "' AND A.SUMMARY_TYPE = 'INV' ORDER BY B.PARTICIPANT_ID"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummaryPerChargeType(ByVal chargeType As EnumChargeType) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try

            


            SQL = "SELECT A.ID_NUMBER,A.GROUP_NO,A.ID_TYPE, B.PARTICIPANT_ID, a.billing_period, a.charge_type, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                            "b.participant_address, b.city, b.province, b.zip_code, B.ZERO_RATED_MARKET_FEES, B.ZERO_RATED_ENERGY, " & vbNewLine & _
                            "a.due_date, a.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                            "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT,  C.REMARKS, A.BALANCE_TYPE " & vbNewLine & _
                  "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                  "JOIN AM_PARTICIPANTS B on a.id_number = b.id_number" & vbNewLine & _
                  "JOIN AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type "


            SQL &= " WHERE"
            SQL &= " CHARGE_TYPE = '" & chargeType.ToString & "'"
            SQL &= " ORDER BY B.PARTICIPANT_ID"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummary(ByVal amcode As String) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport
        Dim SQL As String
        Try

            

            SQL = "SELECT a.*, c.participant_id, c.participant_address, c.city, c.province, c.zip_code, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT " & _
                  "FROM AM_WESM_BILL_SUMMARY a, " & _
                  "    (SELECT DISTINCT group_no FROM AM_OFFSET_P2PC2C_DETAILS  " & _
                  "     WHERE am_code = '" & amcode & "') b, " & _
                  "     AM_PARTICIPANTS c " & _
                  "WHERE a.group_no = b.group_no AND a.id_number = c.id_number"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummary2(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillSummary(ByVal WESMBillNo As List(Of Long)) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String
            
            For Each item In WESMBillNo
                SQL = "SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, B.PARTICIPANT_ID, A.billing_period, A.TRANSACTION_DATE, A.ENERGY_WITHHOLD, " & vbNewLine & _
                                  "b.participant_address, b.city, b.province, b.zip_code, " & vbNewLine & _
                                  "A.charge_type, A.due_date, A.ENDING_BALANCE, a.BEGINNING_BALANCE, a.NEW_DUEDATE, a.IS_MFWTAX_DEDUCTED, " & vbNewLine & _
                                  "A.INV_DM_CM, A.SUMMARY_TYPE, a.WESMBILL_SUMMARY_NO, A.ADJUSTMENT, A.WESMBILL_BATCH_NO, A.ENERGY_WITHHOLD_STATUS, a.NO_OFFSET, A.NO_SOA, A.NO_DEFINT, c.remarks " & vbNewLine & _
                      "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine & _
                      "JOIN  AM_PARTICIPANTS B on a.id_number = b.id_number " & vbNewLine & _
                      "JOIN  AM_WESM_BILL C on c.invoice_no = a.inv_dm_cm and c.charge_type = a.charge_type " & vbNewLine & _
                      "WHERE A.WESMBILL_SUMMARY_NO = " & item

                report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
                If report.ErrorMessage.Length <> 0 Then
                    Throw New ApplicationException(report.ErrorMessage)
                End If

                result.Add(Me.GetWESMBillSummaryPerItem(report.ReturnedIDatareader))
            Next


        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryPerItem(ByVal dr As IDataReader) As WESMBillSummary
        Dim result As New WESMBillSummary
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    'item.GroupNo = CInt(.Item("GROUP_NO").ToString)
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("PARTICIPANT_ADDRESS").ToString()), CStr(.Item("CITY").ToString()), CStr(.Item("PROVINCE").ToString()), _
                                                       CStr(.Item("ZIP_CODE").ToString()))
                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE").ToString())), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    item.BeginningBalance = Math.Round(CDec(.Item("BEGINNING_BALANCE").ToString()), 2)
                    item.EndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.OrigEndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.IDType = CStr(.Item("ID_TYPE").ToString())
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.OrigNewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.IsMFWTaxDeducted = CInt(.Item("IS_MFWTAX_DEDUCTED").ToString())
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM").ToString())
                    If .Item("SUMMARY_TYPE") IsNot DBNull.Value Then
                        item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE").ToString())), EnumSummaryType)
                    End If
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.Adjustment = CInt(.Item("ADJUSTMENT").ToString())
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.EnergyWithhold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    If .Item("ENERGY_WITHHOLD_STATUS") IsNot DBNull.Value Then
                        item.EnergyWithholdStatus = CType(CInt(.Item("ENERGY_WITHHOLD_STATUS")), EnumEnergyWithholdStatus)
                    Else
                        item.EnergyWithholdStatus = EnumEnergyWithholdStatus.NotApplicable
                    End If
                    item.NoOffset = CBool(IIf(CInt(.Item("NO_OFFSET")) = 1, True, False))
                    item.NoSOA = CBool(IIf(CInt(.Item("NO_SOA")) = 1, True, False))
                    item.NoDefInt = CBool(IIf(CInt(.Item("NO_DEFINT")) = 1, True, False))
                    item.BillingRemarks = CStr(.Item("REMARKS").ToString)
                    result = item
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
    Private Function GetWESMBillSummary2(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("PARTICIPANT_ADDRESS").ToString()), CStr(.Item("CITY").ToString()), CStr(.Item("PROVINCE").ToString()), _
                                                       CStr(.Item("ZIP_CODE").ToString()))

                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE").ToString())), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    item.BeginningBalance = Math.Round(CDec(.Item("BEGINNING_BALANCE").ToString()), 2)
                    item.EndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.OrigEndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.IDType = CStr(.Item("ID_TYPE").ToString())
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.OrigNewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.IsMFWTaxDeducted = CInt(.Item("IS_MFWTAX_DEDUCTED").ToString())
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM").ToString())
                    If .Item("SUMMARY_TYPE") IsNot DBNull.Value Then
                        item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE").ToString())), EnumSummaryType)
                    End If
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.Adjustment = CInt(.Item("ADJUSTMENT").ToString())
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.EnergyWithhold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    If .Item("ENERGY_WITHHOLD_STATUS") IsNot DBNull.Value Then
                        item.EnergyWithholdStatus = CType(CInt(.Item("ENERGY_WITHHOLD_STATUS")), EnumEnergyWithholdStatus)
                    Else
                        item.EnergyWithholdStatus = EnumEnergyWithholdStatus.NotApplicable
                    End If
                    item.NoOffset = CBool(IIf(CInt(.Item("NO_OFFSET")) = 1, True, False))
                    item.NoSOA = CBool(IIf(CInt(.Item("NO_SOA")) = 1, True, False))
                    item.NoDefInt = CBool(IIf(CInt(.Item("NO_DEFINT")) = 1, True, False))
                    item.BillingRemarks = CStr(.Item("REMARKS").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummary3(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()),
                                                       CStr(.Item("PARTICIPANT_ADDRESS").ToString()), CStr(.Item("CITY").ToString()), CStr(.Item("PROVINCE").ToString()),
                                                       CStr(.Item("ZIP_CODE").ToString()))

                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE").ToString())), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    item.BeginningBalance = Math.Round(CDec(.Item("BEGINNING_BALANCE").ToString()), 2)
                    item.EndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.OrigEndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.IDType = CStr(.Item("ID_TYPE").ToString())
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.OrigNewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.IsMFWTaxDeducted = CInt(.Item("IS_MFWTAX_DEDUCTED").ToString())
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM").ToString())
                    If .Item("SUMMARY_TYPE") IsNot DBNull.Value Then
                        item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE").ToString())), EnumSummaryType)
                    End If
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.Adjustment = CInt(.Item("ADJUSTMENT").ToString())
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.EnergyWithhold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    If .Item("ENERGY_WITHHOLD_STATUS") IsNot DBNull.Value Then
                        item.EnergyWithholdStatus = CType(CInt(.Item("ENERGY_WITHHOLD_STATUS")), EnumEnergyWithholdStatus)
                    Else
                        item.EnergyWithholdStatus = EnumEnergyWithholdStatus.NotApplicable
                    End If
                    item.NoOffset = CBool(IIf(CInt(.Item("NO_OFFSET")) = 1, True, False))
                    item.NoSOA = CBool(IIf(CInt(.Item("NO_SOA")) = 1, True, False))
                    item.NoDefInt = CBool(IIf(CInt(.Item("NO_DEFINT")) = 1, True, False))
                    item.BillingRemarks = CStr(.Item("REMARKS").ToString)
                    item.BalanceType = CType(System.Enum.Parse(GetType(EnumBalanceType), CStr(.Item("BALANCE_TYPE").ToString())), EnumBalanceType)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
    Private Function GetWESMBillSummary(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("PARTICIPANT_ADDRESS").ToString()), CStr(.Item("CITY").ToString()), CStr(.Item("PROVINCE").ToString()), _
                                                       CStr(.Item("ZIP_CODE").ToString()), CBool(IIf(CInt(.Item("ZERO_RATED_MARKET_FEES")) = 1, True, False)), _
                                                       CBool(IIf(CInt(.Item("ZERO_RATED_ENERGY")) = 1, True, False)))

                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE").ToString())), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    item.BeginningBalance = Math.Round(CDec(.Item("BEGINNING_BALANCE").ToString()), 2)
                    item.BalanceType = CType(System.Enum.Parse(GetType(EnumBalanceType), CStr(.Item("BALANCE_TYPE").ToString)), EnumBalanceType)                    
                    item.EndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.OrigEndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.IDType = CStr(.Item("ID_TYPE").ToString())
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.OrigNewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.IsMFWTaxDeducted = CInt(.Item("IS_MFWTAX_DEDUCTED").ToString())
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM").ToString())
                    If .Item("SUMMARY_TYPE") IsNot DBNull.Value Then
                        item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE").ToString())), EnumSummaryType)
                    End If
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    item.Adjustment = CInt(.Item("ADJUSTMENT").ToString())
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.EnergyWithhold = CDec(.Item("ENERGY_WITHHOLD"))
                    item.WESMBillBatchNo = CLng(.Item("WESMBILL_BATCH_NO"))
                    If .Item("ENERGY_WITHHOLD_STATUS") IsNot DBNull.Value Then
                        item.EnergyWithholdStatus = CType(CInt(.Item("ENERGY_WITHHOLD_STATUS")), EnumEnergyWithholdStatus)
                    Else
                        item.EnergyWithholdStatus = EnumEnergyWithholdStatus.NotApplicable
                    End If

                    item.NoOffset = CBool(IIf(CInt(.Item("NO_OFFSET")) = 1, True, False))
                    item.NoSOA = CBool(IIf(CInt(.Item("NO_SOA")) = 1, True, False))
                    item.NoDefInt = CBool(IIf(CInt(.Item("NO_DEFINT")) = 1, True, False))
                    item.BillingRemarks = CStr(.Item("REMARKS").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Private Function GetWESMBillSummaryPerParticipant(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO").ToString())
                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("FULL_NAME").ToString()))
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE").ToString())), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.BeginningBalance = Math.Round(CDec(.Item("BEGINNING_BALANCE").ToString()), 2)
                    item.EndingBalance = Math.Round(CDec(.Item("ENDING_BALANCE").ToString()), 2)
                    item.EnergyWithhold = CDec(.Item("ENERGY_WITHHOLD"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryForAging(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    ' item.GroupNo = CInt(.Item("GROUP_NO").ToString)
                    item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("PARTICIOPANT_ADDRESS").ToString()), CStr(.Item("CITY").ToString()), CStr(.Item("PROVINCE").ToString()), _
                                                       CStr(.Item("ZIP_CODE").ToString()))
                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.ChargeType = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE").ToString())), EnumChargeType)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    item.BeginningBalance = CDec(.Item("BEGINNING_BALANCE").ToString())
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE").ToString())
                    item.IDType = CStr(.Item("ID_TYPE").ToString())
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE").ToString())
                    item.IsMFWTaxDeducted = CInt(.Item("IS_MFWTAX_DEDUCTED").ToString())
                    item.INVDMCMNo = CStr(.Item("INV_DM_CM").ToString())
                    If .Item("SUMMARY_TYPE") IsNot DBNull.Value Then
                        item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE").ToString())), EnumSummaryType)
                    End If
                    item.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO").ToString())
                    item.Adjustment = CInt(.Item("ADJUSTMENT").ToString())
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))

                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetWESMBillBillingPeriodAndDueDate(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    item.BillPeriod = CInt(.Item("BILLING_PERIOD").ToString())
                    item.DueDate = CDate(.Item("DUE_DATE").ToString())
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Journal Voucher Support Details"
    Public Function GetJVSupportDetails(ByVal OffsetNo As String) As List(Of JournalVoucherSupport)
        Dim result As New List(Of JournalVoucherSupport)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT DISTINCT B.* FROM AM_OFFSET_P2PC2C_DETAILS A " & _
                                "LEFT JOIN AM_DMCM_DETAILS B " & _
                                "ON A.AM_DMCM_NO = B.AM_DMCM_NO " & _
                                " WHERE(A.AM_DMCM_NO <> 0) " & _
                                "AND A.OFFSET_NO = '" & OffsetNo & "' " & _
                                "ORDER BY B.AM_DMCM_NO ASC"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJVSupportDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetJVSupportDetails(ByVal DR As IDataReader) As List(Of JournalVoucherSupport)
        Dim result As New List(Of JournalVoucherSupport)

        Try
            While DR.Read()
                With DR
                    Dim item As New JournalVoucherSupport
                    item.InvDMCMNo = CStr(.Item("INV_DM_CM"))
                    item.APAmount = CDec(.Item("CREDIT"))
                    item.ARAmount = CDec(.Item("DEBIT"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    If item.InvDMCMNo = "" Then
                        item.InvoiceDate = CDate(CDate(.Item("UPDATED_DATE")).ToString("MM/dd/yyyy"))
                    End If
                    item.DMCMNo = CLng(.Item("AM_DMCM_NO"))
                    result.Add(item)
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not DR.IsClosed Then
                DR.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get AM_CODES from AM_OFFSET_P2PC2C_DETAILS"
    Public Function GetAMCodes() As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT DISTINCT AM_CODE, AM_DMCM_NO FROM AM_OFFSET_P2PC2C_DETAILS"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMCodes(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetAMCodes(ByVal DR As IDataReader) As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)

        Try
            While DR.Read()
                With DR
                    Dim item As New OffsetP2PC2CDetails
                    item.AMCode = CStr(.Item("AM_CODE").ToString)
                    item.DMCMNumber = CInt(.Item("AM_DMCM_NO").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not DR.IsClosed Then
                DR.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get COLLECTION NOTICE"
    Public Function GetCollectionNotice() As List(Of CollectionNotice)
        Dim result As New List(Of CollectionNotice)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE WHERE GENERATE_FLAG = 1 ORDER BY REF_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionNotice(ByVal lstCNNumber As List(Of Long)) As List(Of CollectionNotice)
        Dim result As New List(Of CollectionNotice)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE WHERE GENERATE_FLAG = 2 AND REF_NO IN ("

            Dim recCtr As Long = 0
            For Each itmRefNo In lstCNNumber
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmRefNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR REF_NO IN ("
                    End If
                    SQL &= itmRefNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") ORDER BY REF_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionNotice(ByVal DueDate As Date) As List(Of CollectionNotice)
        Dim result As New List(Of CollectionNotice)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE WHERE GENERATE_FLAG = 1 AND DUE_DATE = TO_DATE('" & DueDate & "', 'MM/DD/YYYY') ORDER BY REF_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionNotice(ByVal CNoticeNumber As Long) As List(Of CollectionNotice)
        Dim result As New List(Of CollectionNotice)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE WHERE GENERATE_FLAG = 1 AND REF_NO = '" & CNoticeNumber & "' ORDER BY REF_NO "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollectionNotice(ByVal dr As IDataReader) As List(Of CollectionNotice)
        Dim result As New List(Of CollectionNotice)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New CollectionNotice
                    item.CNDate = CDate(.Item("CN_DATE"))
                    item.ReferenceNo = CLng(.Item("REF_NO"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY").ToString)
                    item.ApprovedBy = CStr(.Item("APPROVED_BY").ToString)
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.CNNumber = CLng(.Item("CN_NO"))
                    item.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.Remarks = CStr(.Item("REMARKS").ToString)
                    item.DueDate = CDate(.Item("DUE_DATE").ToString)
                    item.GenerateFlag = CType(System.Enum.Parse(GetType(EnumCNFlag), CStr(.Item("GENERATE_FLAG"))), EnumCNFlag)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get COLLECTION NOTICE Details"
    Public Function GetCollectionNoticeDetails() As List(Of CollectionNoticeDetails)
        Dim result As New List(Of CollectionNoticeDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE_DETAILS"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNoticeDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionNoticeDetails(ByVal lstRefNo As List(Of String)) As List(Of CollectionNoticeDetails)
        Dim result As New List(Of CollectionNoticeDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE_DETAILS WHERE REF_NO IN ("
            Dim ctr As Long = 1

            Dim recCtr As Long = 0
            For Each itmRefNo In lstRefNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmRefNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR REF_NO IN ("
                    End If
                    SQL &= itmRefNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNoticeDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionNoticeDetails(ByVal lstRefNo As List(Of Long)) As List(Of CollectionNoticeDetails)
        Dim result As New List(Of CollectionNoticeDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE_DETAILS WHERE REF_NO IN ("
            Dim ctr As Long = 1

            Dim recCtr As Long = 0
            For Each itmRefNo In lstRefNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmRefNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR REF_NO IN ("
                    End If
                    SQL &= itmRefNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNoticeDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetCollectionNoticeDetails(ByVal RefNo As Long) As List(Of CollectionNoticeDetails)
        Dim result As New List(Of CollectionNoticeDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_COLLECTION_NOTICE_DETAILS WHERE REF_NO = '" & RefNo & "'"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNoticeDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollectionNoticeDetails(ByVal dr As IDataReader) As List(Of CollectionNoticeDetails)
        Dim result As New List(Of CollectionNoticeDetails)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New CollectionNoticeDetails
                    item.ReferenceNo = CLng(.Item("REF_NO"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.INVDMCM = CStr(.Item("INVDMCM"))
                    item.InvoiceDate = CDate(.Item("INVOICE_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.Energy = CDec(.Item("ENERGY"))
                    item.VATEnergy = CDec(.Item("VAT_ENERGY"))
                    item.MF = CDec(.Item("MF"))
                    item.VATMF = CDec(.Item("VAT_MF"))
                    item.Total = CDec(.Item("TOTAL"))
                    item.TransactionType = CStr(.Item("TRANSACTION_TYPE"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.ParentId = CStr(.Item("PARENT_ID"))
                    item.DefaultInterest = CDec(.Item("DEFAULT_INTEREST"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Reference Number"
    Public Function GetRefNo(ByVal SQL As String) As Integer
        Dim report As New DataReport()
        Dim result As Integer = 0

        Try
            

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            With report.ReturnedIDatareader
                While .Read
                    If IsDBNull(.Item("REF_NO")) Then
                        result = 1
                    Else
                        result = CInt(.Item("REF_NO")) + 1
                    End If
                End While
            End With
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
#End Region

#Region "Save to Dataset"
    Public Function SaveCollectionDataSet(ByVal BillingParticipants As List(Of AMParticipants), ByVal CollectionNotice As List(Of CollectionNotice), _
                                          ByVal CurrentCollectionNotice As List(Of CollectionNoticeDetails), ByVal PreviousCollectionNotice As List(Of CollectionNoticeDetails) _
                                          ) As DataSet
        Dim ds As New DataSet
        'ByVal BPCalendar As List(Of CalendarBillingPeriod

        Try
            'Get CalendarBP
            Dim BillPeriodCalendar As New DataTable
            BillPeriodCalendar.TableName = "AM_CALENDAR_BP"
            With BillPeriodCalendar.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("START_DATE", GetType(Date))
                .Add("END_DATE", GetType(Date))
                .Add("BILLING_DATE", GetType(Date))
            End With
            BillPeriodCalendar.AcceptChanges()

            Dim CalendarBP = Me.GetCalendarBP()
            For Each item In CalendarBP
                Dim row = BillPeriodCalendar.NewRow()
                row("BILLING_PERIOD") = item.BillingPeriod
                row("START_DATE") = item.StartDate
                row("END_DATE") = item.EndDate
                row("BILLING_DATE") = item.BillingDate
                BillPeriodCalendar.Rows.Add(row)
            Next
            BillPeriodCalendar.AcceptChanges()

            ds.Tables.Add(BillPeriodCalendar)

            '

            'Get Participants
            Dim ParticipantsTable As New DataTable
            ParticipantsTable.TableName = "BillingParticipants"
            With ParticipantsTable.Columns
                .Add("ID_NUMBER", GetType(String))
                .Add("PARTICIPANT_ID", GetType(String))
                .Add("PARTICIPANTADDRESS", GetType(String))
                .Add("PARTICIPANT_NAME", GetType(String))
            End With

            For Each item In BillingParticipants
                Dim row As DataRow
                row = ParticipantsTable.NewRow
                row("ID_NUMBER") = item.IDNumber
                row("PARTICIPANT_ID") = item.ParticipantID
                row("PARTICIPANTADDRESS") = item.ParticipantAddress
                row("PARTICIPANT_NAME") = item.FullName
                ParticipantsTable.Rows.Add(row)
            Next
            ds.Tables.Add(ParticipantsTable)

            'Get Collection Notice
            Dim CNTable As New DataTable
            'Dim Reference = CInt((From X In CollectionNotice Order By X.ReferenceNo Descending Select X.ReferenceNo).FirstOrDefault)
            CNTable.TableName = "CollectionNotice"
            With CNTable.Columns
                .Add("CN_DATE", GetType(Date))
                .Add("REF_NO", GetType(Integer))
                .Add("ID_NUMBER", GetType(String))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("PREPARED_POSITION", GetType(String))
                .Add("CHECKED_POSITION", GetType(String))
                .Add("APPROVED_POSITION", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("CN_NO", GetType(Double))
                .Add("REMARKS", GetType(String))
            End With

            Dim docSig As New DocSignatories
            docSig = Me.GetSignatories("CN").FirstOrDefault

            For Each item In CollectionNotice
                Dim row As DataRow
                row = CNTable.NewRow
                With item
                    row("CN_DATE") = .CNDate
                    row("ID_NUMBER") = .IDNumber
                    row("REF_NO") = .ReferenceNo
                    row("PREPARED_BY") = AMModule.FullName
                    row("PREPARED_POSITION") = AMModule.Position
                    row("CHECKED_BY") = docSig.Signatory_2
                    row("CHECKED_POSITION") = docSig.Position_2
                    row("APPROVED_BY") = docSig.Signatory_3
                    row("APPROVED_POSITION") = docSig.Position_3
                    row("UPDATED_BY") = .UpdatedBy
                    row("UPDATED_DATE") = .UpdatedDate
                    row("CN_NO") = .CNNumber
                    row("REMARKS") = .Remarks
                    CNTable.Rows.Add(row)
                End With
            Next
            ds.Tables.Add(CNTable)

            'Get CurrentCollection Notice Details
            Dim CurrentCNTableDetails As New DataTable
            CurrentCNTableDetails.TableName = "CurrentCollectionNotice"
            With CurrentCNTableDetails.Columns
                .Add("REF_NO", GetType(Integer))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("INVDMCM", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("DUE_DATE", GetType(Date))
                .Add("ENERGY", GetType(Decimal))
                .Add("VAT_ENERGY", GetType(Decimal))
                .Add("MF", GetType(Decimal))
                .Add("VAT_MF", GetType(Decimal))
                .Add("TOTAL", GetType(Decimal))
                .Add("TRANSACTION_TYPE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("PARENT_ID", GetType(String))
                .Add("PARTICIPANT_ID", GetType(String))
                .Add("DEFAULT_INTEREST", GetType(Decimal))
            End With

            For Each item In CurrentCollectionNotice
                Dim CurrParticipantRefno As Long = CLng(item.ReferenceNo)
                Dim CurrParticipant = (From x In CollectionNotice Where x.ReferenceNo = CurrParticipantRefno Select x.IDNumber).FirstOrDefault.ToString
                Dim row As DataRow
                row = CurrentCNTableDetails.NewRow
                With item
                    row("REF_NO") = .ReferenceNo
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("INVDMCM") = .INVDMCM
                    row("INVOICE_DATE") = .InvoiceDate
                    row("DUE_DATE") = .DueDate
                    row("ENERGY") = .Energy
                    row("VAT_ENERGY") = .VATEnergy
                    row("MF") = .MF
                    row("VAT_MF") = .VATMF
                    row("TOTAL") = .Total
                    row("TRANSACTION_TYPE") = .TransactionType
                    row("UPDATED_BY") = .UpdatedBy
                    row("UPDATED_DATE") = .UpdatedDate
                    row("ID_NUMBER") = item.ParticipantID 'CInt(CurrParticipant)
                    row("PARENT_ID") = item.ParentId
                    row("PARTICIPANT_ID") = item.ParticipantID
                    row("DEFAULT_INTEREST") = item.DefaultInterest
                    CurrentCNTableDetails.Rows.Add(row)
                End With
            Next
            ds.Tables.Add(CurrentCNTableDetails)

            'Get Previous Collection Notice Details
            Dim PreviousCNTableDetails As New DataTable
            PreviousCNTableDetails.TableName = "PreviousCollectionNotice"
            With PreviousCNTableDetails.Columns
                .Add("REF_NO", GetType(Integer))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("INVDMCM", GetType(String))
                .Add("INVOICE_DATE", GetType(Date))
                .Add("DUE_DATE", GetType(Date))
                .Add("ENERGY", GetType(Decimal))
                .Add("VAT_ENERGY", GetType(Decimal))
                .Add("MF", GetType(Decimal))
                .Add("VAT_MF", GetType(Decimal))
                .Add("TOTAL", GetType(Decimal))
                .Add("TRANSACTION_TYPE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(String))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("PARENT_ID", GetType(String))
                .Add("PARTICIPANT_ID", GetType(String))
                .Add("DEFAULT_INTEREST", GetType(Decimal))
            End With

            For Each item In PreviousCollectionNotice
                Dim prevParticipantRefno As Long = item.ReferenceNo
                Dim PrevParticipant = (From x In CollectionNotice Where x.ReferenceNo = prevParticipantRefno Select x.IDNumber).FirstOrDefault.ToString
                Dim row As DataRow
                row = PreviousCNTableDetails.NewRow
                With item
                    row("REF_NO") = .ReferenceNo
                    row("BILLING_PERIOD") = .BillingPeriod
                    row("INVDMCM") = .INVDMCM
                    row("INVOICE_DATE") = .InvoiceDate
                    row("DUE_DATE") = .DueDate
                    row("ENERGY") = .Energy
                    row("VAT_ENERGY") = .VATEnergy
                    row("MF") = .MF
                    row("VAT_MF") = .VATMF
                    row("TOTAL") = .Total
                    row("TRANSACTION_TYPE") = .TransactionType
                    row("UPDATED_BY") = .UpdatedBy
                    row("UPDATED_DATE") = .UpdatedDate
                    row("ID_NUMBER") = .ParticipantID 'CInt(PrevParticipant)
                    row("SUMMARY_TYPE") = .SummaryType.ToString
                    row("PARENT_ID") = .ParentId
                    row("PARTICIPANT_ID") = .ParticipantID
                    row("DEFAULT_INTEREST") = item.DefaultInterest
                    PreviousCNTableDetails.Rows.Add(row)
                End With
            Next
            ds.Tables.Add(PreviousCNTableDetails)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ds
    End Function



    'Public Function SaveCollectionDataSet(ByVal CollectionNotice As List(Of CollectionNotice), _
    '                                      ByVal CurrentCollectionNotice As List(Of CollectionNoticeDetails), ByVal PreviousCollectionNotice As List(Of CollectionNoticeDetails), _
    '                                      ByVal BillingPeriod As Integer) As DataSet
    '    Dim ds As New DataSet


    '    Try
    '        'Get Participants

    '        'Get Collection Notice
    '        Dim CNTable As New DataTable
    '        'Dim Reference = CInt((From X In CollectionNotice Order By X.ReferenceNo Descending Select X.ReferenceNo).FirstOrDefault)
    '        Dim CollectionNoticetable = (From x In CollectionNotice Order By x.CNDate).ToList
    '        CNTable.TableName = "CollectionNotice"
    '        With CNTable.Columns
    '            .Add("CN_DATE", GetType(Date))
    '            .Add("REF_NO", GetType(Integer))
    '            .Add("ID_NUMBER", GetType(Integer))
    '            .Add("PREPARED_BY", GetType(String))
    '            .Add("APPROVED_BY", GetType(String))
    '            .Add("UPDATED_BY", GetType(String))
    '            .Add("UPDATED_DATE", GetType(Date))
    '            .Add("CN_NO", GetType(Double))
    '        End With

    '        For Each item In CollectionNoticetable
    '            Dim row As DataRow
    '            row = CNTable.NewRow
    '            With item
    '                row("CN_DATE") = .CNDate
    '                row("ID_NUMBER") = .IDNumber
    '                row("REF_NO") = .ReferenceNo
    '                row("PREPARED_BY") = .PreparedBy
    '                row("APPROVED_BY") = .ApprovedBy
    '                row("UPDATED_BY") = .UpdatedBy
    '                row("UPDATED_DATE") = .UpdatedDate
    '                row("CN_NO") = .CNNumber
    '                CNTable.Rows.Add(row)
    '            End With
    '        Next
    '        ds.Tables.Add(CNTable)

    '        'Get CurrentCollection Notice Details
    '        Dim CurrentCNTableDetails As New DataTable
    '        CurrentCNTableDetails.TableName = "CurrentCollectionNotice"
    '        With CurrentCNTableDetails.Columns
    '            .Add("REF_NO", GetType(Integer))
    '            .Add("BILLING_PERIOD", GetType(Integer))
    '            .Add("INVOICE_NO", GetType(Integer))
    '            .Add("INVOICE_DATE", GetType(Date))
    '            .Add("DUE_DATE", GetType(Date))
    '            .Add("ENERGY", GetType(Decimal))
    '            .Add("VAT_ENERGY", GetType(Decimal))
    '            .Add("MF", GetType(Decimal))
    '            .Add("VAT_MF", GetType(Decimal))
    '            .Add("TOTAL", GetType(Decimal))
    '            .Add("TRANSACTION_TYPE", GetType(String))
    '            .Add("UPDATED_BY", GetType(String))
    '            .Add("UPDATED_DATE", GetType(Date))
    '            .Add("ID_NUMBER", GetType(Integer))
    '        End With

    '        For Each item In CurrentCollectionNotice
    '            Dim row As DataRow
    '            row = CurrentCNTableDetails.NewRow
    '            With item
    '                row("REF_NO") = .ReferenceNo
    '                row("BILLING_PERIOD") = .BillingPeriod
    '                row("INVOICE_NO") = .InvoiceNumber
    '                row("INVOICE_DATE") = .InvoiceDate
    '                row("DUE_DATE") = .DueDate
    '                row("ENERGY") = .Energy
    '                row("VAT_ENERGY") = .VATEnergy
    '                row("MF") = .MF
    '                row("VAT_MF") = .VATMF
    '                row("TOTAL") = .Total
    '                row("TRANSACTION_TYPE") = .TransactionType
    '                row("UPDATED_BY") = .UpdatedBy
    '                row("UPDATED_DATE") = .UpdatedDate
    '                row("ID_NUMBER") = .ParticipantID
    '                CurrentCNTableDetails.Rows.Add(row)
    '            End With
    '        Next
    '        ds.Tables.Add(CurrentCNTableDetails)

    '        'Get Previous Collection Notice Details
    '        Dim PreviousCNTableDetails As New DataTable
    '        PreviousCNTableDetails.TableName = "PreviousCollectionNotice"
    '        With PreviousCNTableDetails.Columns
    '            .Add("REF_NO", GetType(Integer))
    '            .Add("BILLING_PERIOD", GetType(Integer))
    '            .Add("INVOICE_NO", GetType(Integer))
    '            .Add("INVOICE_DATE", GetType(Date))
    '            .Add("DUE_DATE", GetType(Date))
    '            .Add("ENERGY", GetType(Decimal))
    '            .Add("VAT_ENERGY", GetType(Decimal))
    '            .Add("MF", GetType(Decimal))
    '            .Add("VAT_MF", GetType(Decimal))
    '            .Add("TOTAL", GetType(Decimal))
    '            .Add("TRANSACTION_TYPE", GetType(String))
    '            .Add("UPDATED_BY", GetType(String))
    '            .Add("UPDATED_DATE", GetType(Date))
    '            .Add("ID_NUMBER", GetType(Integer))
    '        End With

    '        For Each item In PreviousCollectionNotice
    '            Dim row As DataRow
    '            row = PreviousCNTableDetails.NewRow
    '            With item
    '                row("REF_NO") = .ReferenceNo
    '                row("BILLING_PERIOD") = .BillingPeriod
    '                row("INVOICE_NO") = .InvoiceNumber
    '                row("INVOICE_DATE") = .InvoiceDate
    '                row("DUE_DATE") = .DueDate
    '                row("ENERGY") = .Energy
    '                row("VAT_ENERGY") = .VATEnergy
    '                row("MF") = .MF
    '                row("VAT_MF") = .VATMF
    '                row("TOTAL") = .Total
    '                row("TRANSACTION_TYPE") = .TransactionType
    '                row("UPDATED_BY") = .UpdatedBy
    '                row("UPDATED_DATE") = .UpdatedDate
    '                row("ID_NUMBER") = .ParticipantID
    '                PreviousCNTableDetails.Rows.Add(row)
    '            End With
    '        Next
    '        ds.Tables.Add(PreviousCNTableDetails)
    '    Catch ex As Exception
    '        Throw New ApplicationException(ex.Message)
    '    End Try

    '    Return ds
    'End Function
#End Region

#Region "Get Journal Voucher"
    Public Function GetJournalVoucher() As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_JV ORDER BY AM_JV_NO DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucher(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetJournalVoucher(ByVal FromDate As Date, ByVal ToDate As Date) As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_JV WHERE " & _
                                "AM_JV_DATE BETWEEN TO_DATE('" & FormatDateTime(FromDate, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') AND TO_DATE('" & FormatDateTime(ToDate, DateFormat.ShortDate) & " 11:59:59PM','MM/DD/YYYY hh:mi:ss PM')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucher(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetJournalVoucher(ByVal BatchCode As String) As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_JV " & _
                                "WHERE BATCH_CODE = '" & BatchCode & "' " & _
                                "ORDER BY AM_JV_NO DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucher(report.ReturnedIDatareader)

            For Each item In result
                item.JVDetails = Me.GetJournalVoucherDetails(item.JVNumber)
            Next
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetJournalVoucherItem(ByVal BatchCode As String) As JournalVoucher
        Dim result As New JournalVoucher
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_JV " & _
                                "WHERE BATCH_CODE = '" & BatchCode & "' " & _
                                "ORDER BY AM_JV_NO DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucherItem(report.ReturnedIDatareader)
            result.JVDetails = Me.GetJournalVoucherDetails(result.JVNumber)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetJournalVoucher(ByVal JVNo As Long) As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_JV " & _
                                "WHERE AM_JV_NO  =  " & JVNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucher(report.ReturnedIDatareader)

            For Each item In result
                item.JVDetails = Me.GetJournalVoucherDetails(item.JVNumber)
            Next
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetJournalVoucher(ByVal StartDate As Date, ByVal EndDate As Date, ByVal PostedType As EnumPostedType) As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT DISTINCT a.am_jv_no, b.batch_code, b.allocation_date as am_jv_date, a.prepared_by, " & _
                                "a.status, a.checked_by, a.posted_type, a.approved_by, " & _
                                "a.updated_date as updated_date, a.updated_by " & _
                                "FROM AM_JV a, AM_COLLECTION b " & _
                                "WHERE a.batch_code = b.batch_code AND a.status = 1 " & _
                                "AND b.allocation_date BETWEEN TO_DATE('" & StartDate & "','MM/DD/YYYY') " & _
                                "AND TO_DATE('" & EndDate & "','MM/DD/YYYY HH:MI:SS PM') AND posted_type = '" & PostedType.ToString() & "' " & _
                                "ORDER BY b.allocation_date ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucher(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function
    Private Function GetJournalVoucherItem(ByVal dr As IDataReader) As JournalVoucher
        Dim result As New JournalVoucher
        Dim index As Long = 0
        Try
            While dr.Read()                
                With dr
                    Dim item As New JournalVoucher
                    item.JVDate = CDate(.Item("AM_JV_DATE"))
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    index = CLng(.Item("AM_JV_NO"))
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString)
                    item.Status = CInt(.Item("STATUS"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.CheckedBy = CStr(.Item("CHECKED_BY"))
                    item.PostedType = CStr(.Item("POSTED_TYPE"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))

                    item.UpdatedDate = CDate(FormatDateTime(item.UpdatedDate, DateFormat.ShortDate))

                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    result = item
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in JV no " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetJournalVoucher(ByVal dr As IDataReader) As List(Of JournalVoucher)
        Dim result As New List(Of JournalVoucher)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1

                With dr
                    Dim item As New JournalVoucher
                    item.JVDate = CDate(.Item("AM_JV_DATE"))
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString)
                    item.Status = CInt(.Item("STATUS"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))                    
                    If Not IsDBNull(.Item("APPROVED_BY")) Then
                        item.ApprovedBy = CStr(.Item("APPROVED_BY")).Trim
                    Else
                        item.ApprovedBy = ""
                    End If                    
                    item.CheckedBy = CStr(.Item("CHECKED_BY"))
                    item.PostedType = CStr(.Item("POSTED_TYPE"))                    
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))

                    item.UpdatedDate = CDate(FormatDateTime(item.UpdatedDate, DateFormat.ShortDate))

                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Journal Voucher Details"
    Public Function GetJournalVoucherDetails() As List(Of JournalVoucherDetails)
        Dim result As New List(Of JournalVoucherDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_JV_DETAILS ORDER BY AM_JV_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucherDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetJournalVoucherDetails(ByVal JVNo As Long) As List(Of JournalVoucherDetails)
        Dim result As New List(Of JournalVoucherDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_JV_DETAILS WHERE AM_JV_NO = " & JVNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetJournalVoucherDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetJournalVoucherDetails(ByVal dr As IDataReader) As List(Of JournalVoucherDetails)
        Dim result As New List(Of JournalVoucherDetails)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New JournalVoucherDetails
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    item.AccountCode = CStr(.Item("ACCT_CODE"))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Export Data to CSV"
    Public Sub subExportDGVToCSV(ByVal strExportFileName As String, ByVal DataGrid As Windows.Forms.DataGridView, Optional ByVal blnWriteColumnHeaderNames As Boolean = False, Optional ByVal strDelimiterType As String = ",")

        Dim sr As StreamWriter = File.CreateText(strExportFileName)
        Dim strDelimiter As String = strDelimiterType
        Dim intColumnCount As Integer = DataGrid.Columns.Count - 1
        Dim strRowData As String = ""

        If blnWriteColumnHeaderNames Then
            For intX As Integer = 0 To intColumnCount
                strRowData += Replace(DataGrid.Columns(intX).HeaderText, strDelimiter, "")
                If intX < intColumnCount Then
                    strRowData += strDelimiter
                Else
                    strRowData += ""
                End If
            Next intX
            sr.WriteLine(strRowData)
        End If

        For intX As Integer = 0 To DataGrid.Rows.Count - 1
            strRowData = ""
            For intRowData As Integer = 0 To intColumnCount
                strRowData += Replace(CStr(DataGrid.Rows(intX).Cells(intRowData).Value.ToString), strDelimiter, "")
                If intRowData < intColumnCount Then
                    strRowData += strDelimiter
                Else
                    strRowData += ""
                End If

            Next intRowData
            sr.WriteLine(strRowData)
        Next intX
        sr.Close()

    End Sub

    Public Sub DataTable2Excel(ByVal table As DataTable, ByVal filename As String)
        Dim xlApp As Excel.Application
        Dim xlWorkBook As Excel.Workbook
        Dim xlWorkSheet As Excel.Worksheet
        Dim misValue As Object = System.Reflection.Missing.Value
        Dim colIndex As Integer = 0
        Dim rowIndex As Integer = 0

        xlApp = New Excel.Application
        xlWorkBook = xlApp.Workbooks.Add(misValue)
        xlWorkSheet = CType(xlWorkBook.Sheets("sheet1"), Excel.Worksheet)

        For Each col As DataColumn In table.Columns 'export column header
            colIndex = colIndex + 1
            xlWorkSheet.Cells(1, colIndex) = col.ColumnName
        Next

        For Each row As DataRow In table.Rows
            rowIndex = rowIndex + 1
            colIndex = 0
            For Each col As DataColumn In table.Columns
                colIndex = colIndex + 1
                xlWorkSheet.Cells(rowIndex + 1, colIndex) = row(col.ColumnName)
            Next
        Next

        xlWorkSheet.SaveAs(filename)
        xlWorkBook.Close()
        xlApp.Quit()

        releaseObject(xlApp)
        releaseObject(xlWorkBook)
        releaseObject(xlWorkSheet)

    End Sub

    Private Sub releaseObject(ByVal obj As Object)
        Try
            System.Runtime.InteropServices.Marshal.ReleaseComObject(obj)
            obj = Nothing
        Catch ex As Exception
            obj = Nothing
        Finally
            GC.Collect()
            GC.WaitForPendingFinalizers()
        End Try
    End Sub

    Public Sub DataTable2CSV(ByVal table As DataTable, ByVal filename As String)
        Me.DataTable2CSV(table, filename, ",")
        Me.BFactory.PlaceCommaForDisplay(table)
    End Sub

    Private Sub DataTable2CSV(ByVal table As DataTable, ByVal filename As String, _
        ByVal sepChar As String)
        Dim writer As System.IO.StreamWriter
        Try
            writer = New System.IO.StreamWriter(filename)

            ' first write a line with the columns name
            Dim sep As String = ""
            Dim builder As New System.Text.StringBuilder
            For Each col As DataColumn In table.Columns
                Dim ColName As String = ""
                ColName = Replace(col.ColumnName, vbCrLf, " ")
                builder.Append(sep).Append(ColName)
                sep = sepChar
            Next
            writer.WriteLine(builder.ToString())

            ' then write all the rows
            For Each row As DataRow In table.Rows
                sep = ""
                builder = New System.Text.StringBuilder

                For Each col As DataColumn In table.Columns
                    builder.Append(sep).Append(row(col.ColumnName))
                    sep = sepChar
                Next
                writer.WriteLine(builder.ToString())
            Next

            writer.Close()
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub CreateCSVSummaryOfAccountingBooks(ByVal ListOfAccoutingBooks As List(Of SummaryAccountingBooks), ByVal filename As String, _
        ByVal sepChar As String)
        Dim writer As System.IO.StreamWriter
        Try
            writer = New System.IO.StreamWriter(filename)
            Dim builder As System.Text.StringBuilder

            Dim header As String
            header = "PHILIPPINE ELECTRICITY MARKET CORPORATION " & vbCrLf & _
                     "TIN: 228-224-444-000 " & vbCrLf & _
                     "9TH FLOOR ROBINSONS EQUITABLE TOWER, ORTIGAS CENTER, PASIG CITY " & vbCrLf & _
                     "CALENDAR YEAR 2018 " & vbCrLf & _
                     "CAS PERMIT NO. 0406-043-000146 " & vbCrLf & _
                     "SOFTWARE SYSTEM: ACCOUNTS MANAGEMENT SYSTEM " & vbCrLf & _
                     "VERSION NO. 10.0 " & vbCrLf & _
                     "General Journal" & vbCrLf

            builder = New System.Text.StringBuilder
            builder.Append(header)
            writer.WriteLine(builder.ToString())

            builder = New System.Text.StringBuilder
            builder.Append("JV No.").Append(sepChar)
            builder.Append("Date").Append(sepChar)
            builder.Append("Document No.").Append(sepChar)
            builder.Append("Transaction Type").Append(sepChar)
            builder.Append("Participant ID").Append(sepChar)
            builder.Append("Account Code").Append(sepChar)
            builder.Append("Account Title").Append(sepChar)
            builder.Append("Debit").Append(sepChar)
            builder.Append("Credit").Append(sepChar)
            writer.WriteLine(builder.ToString())


            For Each item In ListOfAccoutingBooks
                builder = New System.Text.StringBuilder
                With item
                    builder.Append(.JVNo).Append(sepChar)
                    builder.Append(Format(.JVDate, "MM/dd/yyyy")).Append(sepChar)
                    builder.Append(.DocumentNo).Append(sepChar)
                    builder.Append(.TransactionType).Append(sepChar)
                    builder.Append(Replace(.ItemParticipant.ParticipantID, ",", " ")).Append(sepChar)
                    builder.Append(.ItemAccountCode.AccountCode).Append(sepChar)
                    builder.Append(.ItemAccountCode.Description).Append(sepChar)
                    builder.Append(Math.Abs(.Debit)).Append(sepChar)
                    builder.Append(Math.Abs(.Credit)).Append(sepChar)

                End With

                writer.WriteLine(builder.ToString())
            Next

            writer.Close()
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub CreateExcelSummaryOfAccountingBooks(ByVal ListOfAccoutingBooks As List(Of SummaryAccountingBooks), ByVal filename As String, header() As String)
        Dim xlApp As Excel.Application
        Dim xlWorkBook As Excel.Workbook
        Dim xlWorkSheet As Excel.Worksheet
        Dim misValue As Object = System.Reflection.Missing.Value
        Dim xlRowRange1 As Excel.Range
        Dim xlRowRange2 As Excel.Range
        Dim xlContentHeader As Excel.Range
        Dim xlContentBody As Excel.Range
        Dim xlContentFooter As Excel.Range
        Dim rowIndex As Integer = 0
        Dim sumDebit As Decimal = 0
        Dim sumCredit As Decimal = 0
        Dim ContentBody As Object(,) = New Object(,) {}
        Dim ContentHeader As Object(,) = New Object(,) {}
        Dim ContentFooter As Object(,) = New Object(,) {}


        xlContentFooter = Nothing
        xlContentBody = Nothing
        xlContentHeader = Nothing
        xlRowRange2 = Nothing
        xlRowRange1 = Nothing

        rowIndex = 0

        xlApp = New Excel.Application
        xlWorkBook = xlApp.Workbooks.Add(misValue)
        xlWorkSheet = CType(xlWorkBook.Sheets("sheet1"), Excel.Worksheet)
        
        With xlWorkSheet
            '********************************************* Supply Content Header      
            ReDim ContentHeader(8, 0)
            For Each item In header
                ContentHeader(rowIndex, 0) = item.Replace(vbLf, "")
                rowIndex += 1
            Next
            xlRowRange1 = DirectCast(xlWorkSheet.Cells(1, 1), Excel.Range)            
            xlRowRange2 = DirectCast(xlWorkSheet.Cells(rowIndex, 1), Excel.Range)
            xlContentHeader = xlWorkSheet.Range(xlRowRange1, xlRowRange2)
            xlContentHeader.Value = ContentHeader

            rowIndex += 3
            ReDim ContentBody(ListOfAccoutingBooks.Count + 1, 8)
            ContentBody(0, 0) = "JV No."
            ContentBody(0, 1) = "Date"
            ContentBody(0, 2) = "Reference"
            ContentBody(0, 3) = "Description"
            ContentBody(0, 4) = "Participant ID"
            ContentBody(0, 5) = "Account Code"
            ContentBody(0, 6) = "Account Title"
            ContentBody(0, 7) = "Debit"
            ContentBody(0, 8) = "Credit"
            Dim cnt As Integer = 1
            For Each item In ListOfAccoutingBooks
                ContentBody(cnt, 0) = item.JVNo
                ContentBody(cnt, 1) = Format(item.JVDate, "MM/dd/yyyy")
                ContentBody(cnt, 2) = item.DocumentNo
                ContentBody(cnt, 3) = item.TransactionType
                ContentBody(cnt, 4) = item.ItemParticipant.ParticipantID
                ContentBody(cnt, 5) = item.ItemAccountCode.AccountCode
                ContentBody(cnt, 6) = item.ItemAccountCode.Description
                ContentBody(cnt, 7) = Math.Abs(item.Debit)
                ContentBody(cnt, 8) = Math.Abs(item.Credit)
                cnt += 1
                sumDebit += Math.Abs(item.Debit)
                sumCredit += Math.Abs(item.Credit)
            Next

            '********************************************* Supply Content Body           
            xlRowRange1 = DirectCast(xlWorkSheet.Cells(rowIndex, 1), Excel.Range)
            rowIndex += ContentBody.GetUpperBound(0)
            xlRowRange2 = DirectCast(xlWorkSheet.Cells(rowIndex, ContentBody.GetUpperBound(1) + 1), Excel.Range)
            xlContentBody = xlWorkSheet.Range(xlRowRange1, xlRowRange2)
            xlContentBody.Value = ContentBody

            '********************************************* Supply Content Footer
            rowIndex += 1
            ReDim ContentFooter(0, 2)
            ContentFooter(0, 0) = "GRAND TOTAL:"
            ContentFooter(0, 1) = sumDebit
            ContentFooter(0, 2) = sumCredit
            xlRowRange1 = DirectCast(xlWorkSheet.Cells(rowIndex, 7), Excel.Range)            
            xlRowRange2 = DirectCast(xlWorkSheet.Cells(rowIndex, 9), Excel.Range)
            xlContentFooter = xlWorkSheet.Range(xlRowRange1, xlRowRange2)
            xlContentFooter.Value = ContentFooter

        End With

        xlWorkSheet.SaveAs(filename)
        xlWorkBook.Close()
        xlApp.Quit()

        releaseObject(xlApp)
        releaseObject(xlWorkBook)
        releaseObject(xlWorkSheet)
        releaseObject(xlContentHeader)
        releaseObject(xlContentBody)

        ContentBody = Nothing
        header = Nothing

    End Sub

#End Region

#Region "Get Summary for CN Report"
    Public Function GetWESMBillSummaryForCNReport() As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = Nothing

            SQL = "SELECT A.INV_DM_CM, A.SUMMARY_TYPE, B.ID_NUMBER, B.PARTICIPANT_ID, A.BILLING_PERIOD, A.DUE_DATE, A.ID_TYPE, " & _
                  "DECODE(CHARGE_TYPE,'E', A.ENDING_BALANCE,0) AS ENERGY, " & _
                  "DECODE(CHARGE_TYPE,'EV', A.ENDING_BALANCE,0) AS VAT, " & _
                  "DECODE(CHARGE_TYPE,'MF', A.ENDING_BALANCE,0) AS MF, " & _
                  "DECODE(CHARGE_TYPE,'MFV', A.ENDING_BALANCE,0) AS MFVAT, " & _
                  "A.UPDATED_BY, A.UPDATED_DATE FROM AM_WESM_BILL_SUMMARY A, AM_PARTICIPANTS B " & _
                  "                WHERE(A.ID_NUMBER = B.ID_NUMBER)" & _
                  "AND ENDING_BALANCE <> 0 " & _
                  "GROUP BY A.INV_DM_CM, A.SUMMARY_TYPE, B.ID_NUMBER, B.PARTICIPANT_ID, A.BILLING_PERIOD, A.DUE_DATE, A.ID_TYPE, A.UPDATED_BY, A.UPDATED_DATE,  DECODE(CHARGE_TYPE,'E', A.ENDING_BALANCE,0), DECODE(CHARGE_TYPE,'EV', A.ENDING_BALANCE,0), DECODE(CHARGE_TYPE,'MF', A.ENDING_BALANCE,0),DECODE(CHARGE_TYPE,'MFV', A.ENDING_BALANCE,0) " & _
                  "ORDER BY B.ID_NUMBER ASC"
            '"AND A.BILLING_PERIOD < '" & CurrentBillingPeriod & "' " & _
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryForCNReport(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetWESMBillSummaryForCNReport(ByVal dr As IDataReader) As List(Of WESMBillSummary)
        Dim result As New List(Of WESMBillSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillSummary
                    With dr
                        item.IDNumber = New AMParticipants(CStr(.Item("ID_NUMBER")), CStr(.Item("PARTICIPANT_ID")))
                        item.BillPeriod = CInt(.Item("BILLING_PERIOD"))
                        item.DueDate = CDate(.Item("DUE_DATE"))
                        item.Energy = CDec(.Item("ENERGY"))
                        item.VATEnergy = CDec(.Item("VAT"))
                        item.MarketFees = CDec(.Item("MF"))
                        item.VATMarketFees = CDec(.Item("MFVAT"))
                        item.IDType = CStr(.Item("ID_TYPE"))
                        If .Item("SUMMARY_TYPE") IsNot DBNull.Value Then
                            item.SummaryType = CType(System.Enum.Parse(GetType(EnumSummaryType), CStr(.Item("SUMMARY_TYPE"))), EnumSummaryType)
                        End If
                        item.INVDMCMNo = CStr(.Item("INV_DM_CM"))
                        result.Add(item)
                    End With
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get AM_PAYMENT"
    Public Function GetPayment() As List(Of Payment)
        Dim result As New List(Of Payment)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPayment(ByVal PaymentBatchCode As String) As List(Of Payment)
        Dim result As New List(Of Payment)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT " & _
                                "WHERE " & _
                                "PAYMENT_BATCH_CODE ='" & PaymentBatchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPayment(ByVal lstPerBPBatchCode As List(Of String)) As List(Of Payment)
        Dim result As New List(Of Payment)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT " & _
                                "WHERE " & _
                                "PAYMENT_PERBP_NO IN ('"

            Dim recCtr As Long = 0
            For Each itmBatchCode In lstPerBPBatchCode
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmBatchCode & "', '"
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & "') OR PAYMENT_PERBP_NO IN ('"
                    End If
                    SQL &= itmBatchCode & "', '"
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 4)) & "')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPayment(ByVal AllocationDate As Date) As List(Of Payment)
        Dim result As New List(Of Payment)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT " & _
                                "WHERE " & _
                                "COLLECTION_ALLOCATION_DATE = TO_DATE('" & AllocationDate & "', 'MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPayment(ByVal TransactionBegin As Date, ByVal TransactionEnd As Date) As List(Of Payment)
        Dim result As New List(Of Payment)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT " & _
                                "WHERE " & _
                                "COLLECTION_ALLOCATION_DATE BETWEEN TO_DATE('" & FormatDateTime(TransactionBegin, DateFormat.ShortDate) & " 12:00:00 AM', 'MM/DD/YYYY hh:mi:ss AM') AND TO_DATE('" & FormatDateTime(TransactionEnd, DateFormat.ShortDate) & " 11:59:59 PM', 'MM/DD/YYYY hh:mi:ss PM')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPayment(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPayment(ByVal dr As IDataReader) As List(Of Payment)
        Dim result As New List(Of Payment)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New Payment
                    item.CollectionAllocationDate = CDate(.Item("COLLECTION_ALLOCATION_DATE"))
                    item.PaymentBatchCode = CStr(.Item("PAYMENT_BATCH_CODE"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.Total_EnergyCollection = CDec(.Item("TOTAL_ENERGY_COLLECTION"))
                    item.Total_DICollection = CDec(.Item("TOTAL_DI_COLLECTION_ENERGY"))
                    item.Total_VATCollection = CDec(.Item("TOTAL_VAT"))
                    item.Total_NSSRA = CDec(.Item("TOTAL_NSSRA"))
                    item.NSSBalance = CDec(.Item("NSS_BALANCE"))
                    item.EnergyPayment = CDec(.Item("TOTAL_ENERGY_PAYMENT"))
                    item.TotalAPEnergy = CDec(.Item("TOTAL_AP_ENERGY_PER_BP"))
                    item.TotalAPVAT = CDec(.Item("TOTAL_AP_VAT_PER_BP"))
                    item.Status = CType(System.Enum.Parse(GetType(EnumCollectionStatus), CStr(.Item("STATUS"))), EnumCollectionStatus)
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.PaymentPerBPNo = CStr(.Item("PAYMENT_PERBP_NO"))
                    item.PaymentDate = CDate(.Item("PAYMENT_DATE"))
                    item.PaymentAllocationDate = CDate(.Item("PAYMENT_DATE"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get AM_PAYMENT_DETAILS_PARTICIPANT"
    Public Function GetPaymentAllocationParticipant() As List(Of PaymentAllocationParticipant)
        Dim result As New List(Of PaymentAllocationParticipant)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_PARTICIPANT"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationParticipant(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPaymentAllocationParticipant(ByVal lstCodePerBP As List(Of String)) As List(Of PaymentAllocationParticipant)
        Dim result As New List(Of PaymentAllocationParticipant)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_PARTICIPANT " & _
                                "WHERE PAYMENT_PERBP_NO IN ("

            Dim recCtr As Long = 0
            For Each itmPerBP In lstCodePerBP
                If recCtr Mod 1000 <> 0 Then
                    SQL &= "'" & itmPerBP & "', "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR PAYMENT_PERBP_NO IN ("
                    End If
                    SQL &= "'" & itmPerBP & "', "
                End If
                recCtr += 1
            Next
            'remove extra space and comma
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationParticipant(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPaymentAllocationParticipant(ByVal lstCodePerBP As List(Of String), ByVal IDNumber As String) As List(Of PaymentAllocationParticipant)
        Dim result As New List(Of PaymentAllocationParticipant)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_PARTICIPANT " & _
                                "WHERE ID_NUMBER = '" & IDNumber & "' AND PAYMENT_PERBP_NO IN ("

            Dim recCtr As Long = 0
            For Each itmCodePerBP In lstCodePerBP
                If recCtr Mod 1000 <> 0 Then
                    SQL &= "'" & itmCodePerBP & "', "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR PAYMENT_PERBP_NO IN ("
                    End If
                    SQL &= "'" & itmCodePerBP & "', "
                End If
                recCtr += 1
            Next
            'remove extra space and comma
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationParticipant(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPaymentAllocationParticipant(ByVal dr As IDataReader) As List(Of PaymentAllocationParticipant)
        Dim result As New List(Of PaymentAllocationParticipant)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New PaymentAllocationParticipant
                    item.PaymentBatchCode = CStr(.Item("PAYMENT_PERBP_NO"))
                    item.PaymentGroupCode = CLng(.Item("PAYMENT_GROUP_CODE"))
                    item.BillPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.Participant.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.AllocDetails.Energy = CDec(.Item("ALLOC_ENERGY_PAYMENT"))
                    item.AllocDetails.VAT = CDec(.Item("ALLOC_VAT_PAYMENT"))
                    item.AllocDetails.DefaultInterest = CDec(.Item("ALLOC_DI_PAYMENT"))
                    item.AllocDetails.Energy = Math.Abs(item.AllocDetails.Energy - item.AllocDetails.DefaultInterest)
                    item.AllocDetails.OffsetAMTEnergy = CDec(.Item("OFFSET_AMOUNT_ENERGY"))
                    item.AllocDetails.OffsetAMTVAT = CDec(.Item("OFFSET_AMOUNT_VAT"))
                    item.AllocDetails.DeferredEnergy = CDec(.Item("DEFERRED_ENERGY"))
                    item.AllocDetails.DeferredVAT = CDec(.Item("DEFERRED_VAT"))
                    item.AllocDetails.InterestEarnedPR = CDec(.Item("INTEREST_PR"))
                    item.AllocDetails.InterestEarnedNSS = CDec(.Item("INTEREST_NSS"))
                    item.AllocDetails.InterestEarnedSTL = CDec(.Item("INTEREST_STL"))
                    item.AllocDetails.OffsetAllocatedEnergy = CDec(.Item("OFFSET_ALLOCATED_ENERGY"))
                    item.AllocDetails.OffsetAllocatedVAT = CDec(.Item("OFFSET_ALLOCATED_VAT"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "AM_PAYMENT_ALLOCATION_ACCOUNT"
    Public Function GetPaymentAllocationAccount() As List(Of PaymentAllocationAccount)
        Dim result As New List(Of PaymentAllocationAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_ACCOUNT"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationAccount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPaymentAllocationAccount(ByVal lstGroupCode As List(Of Long)) As List(Of PaymentAllocationAccount)
        Dim result As New List(Of PaymentAllocationAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_ACCOUNT " & _
                                "WHERE PAYMENT_GROUP_CODE IN ("

            Dim recCtr As Long = 0
            For Each itmGroup In lstGroupCode
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmGroup & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR PAYMENT_GROUP_CODE IN ("
                    End If
                    SQL &= itmGroup & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationAccount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPaymentAllocationAccountAging(ByVal lstWESMBillNo As List(Of Long)) As List(Of PaymentAllocationAccount)
        Dim result As New List(Of PaymentAllocationAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_ACCOUNT " & _
                                "WHERE WESMBILL_NO IN ("

            Dim recCtr As Long = 0
            For Each itmWESMNo In lstWESMBillNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmWESMNo & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR WESMBILL_NO IN ("
                    End If
                    SQL &= itmWESMNo & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationAccount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPaymentAllocationAccount(ByVal FromDate As Date, ByVal ToDate As Date) As List(Of PaymentAllocationAccount)
        Dim result As New List(Of PaymentAllocationAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_ACCOUNT " & _
                                "WHERE UPDATED_DATE BETWEEN TO_DATE('" & FromDate & " 12:00:00 AM', 'MM/DD/YYYY hh:mi:ss AM') " & _
                                "AND TO_DATE('" & ToDate & " 11:59:59 PM', 'MM/DD/YYYY hh:mi:ss PM')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationAccount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPaymentAllocationAccountPerWESMNo(ByVal WESMBillNo As Long) As List(Of PaymentAllocationAccount)
        Dim result As New List(Of PaymentAllocationAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DETAILS_ACCOUNT " & _
                                "WHERE WESMBILL_NO = " & WESMBillNo & ""

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocationAccount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPaymentAllocationAccount(ByVal dr As IDataReader) As List(Of PaymentAllocationAccount)
        Dim result As New List(Of PaymentAllocationAccount)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New PaymentAllocationAccount
                    item.PaymentBatchCode = CStr(.Item("PAYMENT_PERBP_NO"))
                    item.PaymentGroupCode = CLng(.Item("PAYMENT_GROUP_CODE"))
                    item.PaymentType = CType(.Item("PAYMENT_TYPE"), EnumPaymentType)
                    item.PaymentAmount = CDec(.Item("PAYMENT_AMOUNT"))
                    item.OffsetNo = CStr(.Item("OFFSET_NO"))
                    item.DMCMNo = CLng(.Item("AM_DMCM_NO"))
                    item.OffsetNo = CStr(.Item("OFFSET_NO"))
                    item.BeginningBalance = CDec(.Item("BEGINNING_BALANCE"))
                    item.EndingBalance = CDec(.Item("ENDING_BALANCE"))
                    item.WESMBillSummary.WESMBillSummaryNo = CLng(.Item("WESMBILL_NO"))
                    item.UpdatedDate = CDate(FormatDateTime(CDate(.Item("UPDATED_DATE")), DateFormat.ShortDate))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.NewDueDate = CDate(.Item("NEW_DUEDATE"))
                    item.ORNumber = CInt(.Item("OR_NO"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Save Collection Adjustment"
    Public Sub SaveCollectionAdjustment(ByVal WESMBills As List(Of WESMBillSummary), ByVal DMCMList As List(Of DebitCreditMemo), _
                                        ByVal GPPosting As List(Of WESMBillGPPosted), ByVal JVHeader As List(Of JournalVoucher))
        Dim ds As New DataSet
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        'For DMCM Saving to Dataset
        Dim dicDMCMNo As New Dictionary(Of Integer, Long)
        Dim dicJVNumber As New Dictionary(Of Integer, Long)
        Dim dicGPBatchCode As New Dictionary(Of Integer, String)
        Dim DMCMCount As Integer = DMCMList.Count
        Dim cntPosting As Integer = GPPosting.Count
        Dim JVctr As Integer = JVHeader.Count
        Try
            dicDMCMNo.Add(0, 0)
            For x As Integer = 1 To DMCMCount
                dicDMCMNo.Add(x, Me.GetSequenceID("SEQ_AM_DMCM_NO"))
            Next

            dicGPBatchCode.Add(0, "0")
            For x As Integer = 1 To cntPosting
                dicGPBatchCode.Add(x, "A-" & Me.GetSequenceID("SEQ_AM_GP_ADJ"))
            Next

            dicJVNumber.Add(0, 0)
            For x As Integer = 1 To JVctr
                dicJVNumber.Add(x, Me.GetSequenceID("SEQ_AM_JV_NO"))
            Next

            'Save WESMBill Summary to Dataset
            ds.Merge(Me.SaveWESMSummaryDataset(WESMBills, dicDMCMNo))
            'Save Journal Voucher to Dataset
            ds.Merge(Me.SaveJournalVoucher(JVHeader, dicGPBatchCode, dicJVNumber))
            'Save For Posting to GP to Dataset
            ds.Merge(Me.SaveForPostingGPDataset(GPPosting, dicGPBatchCode))
            'Save DMCM Dataset to Saving Dataset
            ds.Merge(Me.SaveDMCMDataset(DMCMList, dicDMCMNo, dicJVNumber))
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

    'Save WESM Bill Summary to Dataset
#Region "Save WESM Bill Summary To Dataset"
    Public Function SaveWESMSummaryDataset(ByVal WESMBillList As List(Of WESMBillSummary), Optional ByVal dicDMCMNo As Dictionary(Of Integer, Long) = Nothing) As DataSet
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        
        Try
            Dim Header As New DataTable
            Header.TableName = "AM_WESM_BILL_SUMMARY"
            With Header.Columns
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("ID_NUMBER", GetType(Integer))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("DUE_DATE", GetType(Date))
                .Add("BEGINNING_BALANCE", GetType(Decimal))
                .Add("ENDING_BALANCE", GetType(Decimal))
                .Add("GROUP_NO", GetType(Long))
                .Add("ID_TYPE", GetType(String))
                .Add("NEW_DUEDATE", GetType(Date))
                .Add("IS_MFWTAX_DEDUCTED", GetType(Integer))
                .Add("INV_DM_CM", GetType(Integer))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("ADJUSTMENT", GetType(Integer))
                .Add("WESMBILL_SUMMARY_NO", GetType(Long))
            End With

            For Each item In WESMBillList
                Dim hRow As DataRow
                hRow = Header.NewRow
                hRow("BILLING_PERIOD") = item.BillPeriod
                hRow("ID_NUMBER") = item.IDNumber.IDNumber
                hRow("CHARGE_TYPE") = item.ChargeType.ToString
                hRow("DUE_DATE") = item.DueDate
                hRow("BEGINNING_BALANCE") = item.BeginningBalance
                hRow("ENDING_BALANCE") = CDec(item.EndingBalance.ToString("#,##0.00"))
                hRow("GROUP_NO") = item.GroupNo
                hRow("ID_TYPE") = item.IDType
                hRow("NEW_DUEDATE") = item.NewDueDate
                hRow("IS_MFWTAX_DEDUCTED") = item.IsMFWTaxDeducted
                hRow("UPDATED_BY") = Me.UserName
                hRow("UPDATED_DATE") = DateTime.Now
                hRow("SUMMARY_TYPE") = item.SummaryType
                hRow("INV_DM_CM") = dicDMCMNo(CInt(item.INVDMCMNo))
                hRow("ADJUSTMENT") = item.Adjustment
                hRow("WESMBILL_SUMMARY_NO") = Me.GetSequenceID("SEQ_AM_WESMBILL_SUMMARY_NO")
                Header.Rows.Add(hRow)
                Header.AcceptChanges()
            Next
            ds.Tables.Add(Header)

            Return ds
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Function
#End Region
    'Save DMCM
#Region "Save DMCM To Dataset"
    Public Function SaveDMCMDataset(ByVal DMCMHeader As List(Of DebitCreditMemo), ByVal dicDMCMNo As Dictionary(Of Integer, Long), _
                                    ByVal dicJVNo As Dictionary(Of Integer, Long)) As DataSet
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        
        Dim DocSignatories = Me.GetSignatories("DMCM").First

        Try
            Dim Header As New DataTable
            Header.TableName = "AM_DMCM"
            With Header.Columns
                .Add("AM_DMCM_NO", GetType(Double))
                .Add("PARTICULARS", GetType(String))
                .Add("PREPARED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("ID_NUMBER", GetType(Integer))
                .Add("BILLING_PERIOD", GetType(Integer))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("DUE_DATE", GetType(Date))
                .Add("CHARGE_TYPE", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("AM_JV_NO", GetType(Double))
            End With

            Dim Details As New DataTable
            Details.TableName = "AM_DMCM_DETAILS"
            With Details.Columns
                .Add("AM_DMCM_NO", GetType(Integer))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("INV_DM_CM", GetType(Long))
                .Add("SUMMARY_TYPE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With

            For Each item In DMCMHeader
                'DMCM Header
                Dim hRow As DataRow
                hRow = Header.NewRow
                With item
                    hRow("AM_DMCM_NO") = dicDMCMNo(CInt(.DMCMNumber))
                    hRow("PARTICULARS") = .Particulars
                    hRow("PREPARED_BY") = Me.UserName
                    hRow("APPROVED_BY") = DocSignatories.Signatory_2
                    hRow("UPDATED_BY") = Me.UserName
                    hRow("UPDATED_DATE") = SystemDate
                    hRow("ID_NUMBER") = .IDNumber
                    hRow("BILLING_PERIOD") = .BillingPeriod
                    hRow("DUE_DATE") = .DueDate
                    hRow("CHARGE_TYPE") = .ChargeType.ToString
                    hRow("AM_JV_NO") = dicJVNo(CInt(.JVNumber))
                    hRow("UPDATED_DATE") = DateTime.Now
                    hRow("CHECKED_BY") = DocSignatories.Signatory_1
                    For Each rec In item.DMCMDetails
                        Dim dRow As DataRow
                        dRow = Details.NewRow
                        dRow("AM_DMCM_NO") = dicDMCMNo(CInt(rec.DMCMNumber))
                        dRow("ACCT_CODE") = rec.AccountCode
                        dRow("DEBIT") = rec.Debit
                        dRow("CREDIT") = rec.Credit
                        dRow("INV_DM_CM") = rec.InvDMCMNo
                        dRow("SUMMARY_TYPE") = rec.SummaryType.ToString
                        dRow("UPDATED_BY") = Me.UserName
                        dRow("UPDATED_DATE") = DateTime.Now
                        Details.Rows.Add(dRow)
                        Details.AcceptChanges()
                    Next
                    Header.Rows.Add(hRow)
                    Header.AcceptChanges()
                End With
            Next
            ds.Tables.Add(Header)
            ds.Tables.Add(Details)
            Return ds
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Function
#End Region
    'Save to GP Posted
#Region "Save WESM Bill GP Posted to dataset"
    Public Function SaveForPostingGPDataset(ByVal ForPosting As List(Of WESMBillGPPosted), ByVal dicGPBatchCode As Dictionary(Of Integer, String)) As DataSet
        Dim ds As New DataSet

        Dim GPTable As New DataTable
        GPTable.TableName = "AM_WESM_BILL_GP_POSTED"
        With GPTable.Columns
            .Add("BILLING_PERIOD", GetType(Integer))
            .Add("STL_RUN", GetType(String))
            .Add("CHARGE_TYPE", GetType(String))
            .Add("DUE_DATE", GetType(Date))
            .Add("REMARKS", GetType(String))
            .Add("POSTED", GetType(Integer))
            .Add("BATCH_CODE", GetType(String))
            .Add("POSTED_TYPE", GetType(String))
            .Add("UPDATED_DATE", GetType(Date))
            .Add("UPDATED_BY", GetType(String))
        End With

        For Each item In ForPosting
            Dim GPRow As DataRow
            GPRow = GPTable.NewRow
            With item
                GPRow("BILLING_PERIOD") = .BillingPeriod
                GPRow("STL_RUN") = .SettlementRun
                GPRow("CHARGE_TYPE") = .Charge.ToString
                GPRow("DUE_DATE") = .DueDate
                GPRow("REMARKS") = .Remarks
                GPRow("POSTED") = .Posted
                GPRow("BATCH_CODE") = dicGPBatchCode(CInt(.BatchCode))
                GPRow("POSTED_TYPE") = .PostType
                GPRow("UPDATED_DATE") = DateTime.Now
                GPRow("UPDATED_BY") = Me.UserName
            End With
            GPTable.Rows.Add(GPRow)
            GPTable.AcceptChanges()
        Next
        ds.Tables.Add(GPTable)
        Return ds
    End Function
#End Region

    'Save Journal Voucher
#Region "Save Journal Voucher to dataset"
    Public Function SaveJournalVoucher(ByVal JournalVoucherHeader As List(Of JournalVoucher), ByVal dicGPBatchCode As Dictionary(Of Integer, String) _
                                       , ByVal dicJVnumber As Dictionary(Of Integer, Long)) As DataSet
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        
        Dim DocSignatories = Me.GetSignatories("JV").First
        Try

            Dim Header As New DataTable
            Header.TableName = "AM_JV"
            With Header.Columns
                .Add("AM_JV_NO", GetType(Long))
                .Add("AM_JV_DATE", GetType(Date))
                .Add("BATCH_CODE", GetType(String))
                .Add("POSTED_TYPE", GetType(String))
                '.Add("OFFSET_NO", GetType(String))
                .Add("STATUS", GetType(Integer))
                .Add("PREPARED_BY", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With

            Dim Details As New DataTable
            Details.TableName = "AM_JV_DETAILS"
            With Details.Columns
                .Add("AM_JV_NO", GetType(Integer))
                .Add("ACCT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With

            For Each item In JournalVoucherHeader
                'JV Header
                Dim hRow As DataRow
                hRow = Header.NewRow
                With item
                    hRow("AM_JV_NO") = dicJVnumber(CInt(.JVNumber))
                    hRow("AM_JV_DATE") = .JVDate
                    hRow("BATCH_CODE") = dicGPBatchCode(CInt(.BatchCode))
                    ' hRow("OFFSET_NO") = .OffsetNumber
                    hRow("STATUS") = .Status
                    hRow("PREPARED_BY") = Me.UserName
                    hRow("CHECKED_BY") = DocSignatories.Signatory_1
                    hRow("APPROVED_BY") = DocSignatories.Signatory_2
                    hRow("POSTED_TYPE") = .PostedType
                    hRow("UPDATED_BY") = Me.UserName
                    hRow("UPDATED_DATE") = DateTime.Now
                    Header.Rows.Add(hRow)
                    Header.AcceptChanges()

                    'JV Details
                    For Each rec In .JVDetails
                        Dim dRow As DataRow
                        dRow = Details.NewRow
                        dRow("AM_JV_NO") = dicJVnumber(CInt(.JVNumber))
                        dRow("ACCT_CODE") = rec.AccountCode
                        dRow("DEBIT") = rec.Debit
                        dRow("CREDIT") = rec.Credit
                        dRow("UPDATED_BY") = Me.UserName
                        dRow("UPDATED_DATE") = DateTime.Now
                        Details.Rows.Add(dRow)
                        Details.AcceptChanges()
                    Next

                End With
            Next

            ds.Tables.Add(Header)
            ds.Tables.Add(Details)
            Return ds
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Function
#End Region

#Region "Get WESMBill Summary Details"
    Public Function GetWESMBillOffsetDetails() As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT * FROM AM_OFFSET_P2PC2C_DETAILS" & _
                                " ORDER BY OFFSET_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillOffsetDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillOffsetDetails(ByVal BatchCode As String) As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT * FROM AM_OFFSET_P2PC2C_DETAILS WHERE" & _
                                " OFFSET_NO = '" & BatchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillOffsetDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillOffsetDetails(ByVal GroupNumber As String, ByVal WithDMCM As Boolean) As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT * FROM AM_OFFSET_P2PC2C_DETAILS WHERE" & _
                                " GROUP_NO = '" & GroupNumber & "'"
            If WithDMCM = True Then
                SQL &= " AND AM_DMCM_NO <> 0 ORDER BY OFFSET_NO"
            Else
                SQL &= " AND AM_DMCM_NO = 0 ORDER BY OFFSET_NO"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillOffsetDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Public Function GetWESMBillOffsetDetailsPerItem(ByVal GroupNumber As String) As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT * FROM AM_OFFSET_P2PC2C_DETAILS WHERE" & _
                                " GROUP_NO = '" & GroupNumber & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillOffsetDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetWESMBillOffsetDetails(ByVal lstGroupNo As List(Of Long)) As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)
        Dim report As New DataReport

        Try
            

            Dim SQL As String = "SELECT * FROM AM_OFFSET_P2PC2C_DETAILS WHERE GROUP_NO IN ('"

            Dim recCtr As Long = 0
            For Each itmGroupNo In lstGroupNo
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmGroupNo & "', '"
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR GROUP_NO IN ("
                    End If
                    SQL &= itmGroupNo & "', '"
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 3)) & ") ORDER BY OFFSET_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillOffsetDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillOffsetDetails(ByVal DR As IDataReader) As List(Of OffsetP2PC2CDetails)
        Dim result As New List(Of OffsetP2PC2CDetails)

        Try
            While DR.Read()
                With DR
                    Dim item As New OffsetP2PC2CDetails
                    item.OffsetNumber = CStr(.Item("OFFSET_NO"))
                    item.TransDate = CDate(.Item("TRANS_DATE"))
                    item.AMCode = CStr(.Item("AM_CODE"))
                    item.InvoiceNumber = CStr(.Item("INVOICE_NO"))
                    ' item.Debit = CDec(.Item("DEBIT"))
                    ' item.Credit = CDec(.Item("CREDIT"))
                    item.UpdatedBy = CStr(Me.UserName)
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.WESMBillSummaryNo = CInt(.Item("GROUP_NO"))
                    item.DMCMNumber = CInt(.Item("AM_DMCM_NO"))
                    result.Add(item)
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not DR.IsClosed Then
                DR.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "AM_PEMC_PAYMENT Get/Save (EFT)"
    'Get AM_PEMC_PAYMENT
    Public Function GetAMPaymentForEFT() As List(Of EFT)
        Dim result As New List(Of EFT)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT C.REMITTANCE_DATE, " & vbNewLine &
                                "A.*, B.* " & vbNewLine &
                                "FROM AM_PAYMENT_NEW_EFT A " & vbNewLine &
                                "JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER " & vbNewLine &
                                "JOIN AM_PAYMENT_NEW C ON A.PAYMENT_NO = C.PAYMENT_NO "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMPaymentForEFT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetAMPaymentForEFT(ByVal CollectionAllocationDate As Date) As List(Of EFT)
        Dim result As New List(Of EFT)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT C.REMITTANCE_DATE, A.*, " &
                                "B.* FROM AM_PAYMENT_NEW_EFT A " &
                                "JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER " &
                                "JOIN AM_PAYMENT_NEW C ON A.PAYMENT_NO = C.PAYMENT_NO " &
                                "WHERE C.REMITTANCE_DATE = TO_DATE('" & CollectionAllocationDate & "','MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMPaymentForEFT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetAMPaymentForEFT(ByVal TransactionBegin As Date, ByVal TransactionEnd As Date) As List(Of EFT)
        Dim result As New List(Of EFT)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT C.REMITTANCE_DATE, A.*, B.* " &
                                "FROM AM_PAYMENT_NEW_EFT A " &
                                "JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER " &
                                "JOIN AM_PAYMENT_NEW C ON A.PAYMENT_NO = C.PAYMENT_NO " &
                                "WHERE C.REMITTANCE_DATE BETWEEN TO_DATE('" & FormatDateTime(TransactionBegin, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY hh:mi:ss AM') AND TO_DATE('" & FormatDateTime(TransactionEnd, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY hh:mi:ss PM')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMPaymentForEFT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetAMPaymentForEFT(ByVal TransactionBegin As Date, ByVal TransactionEnd As Date, ByVal IDNumber As String) As List(Of EFT)
        Dim result As New List(Of EFT)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT C.REMITTANCE_DATE, A.PAYMENT_TYPE, A.CHECK_NO, A.EXCESS_COLLECTION, A.ENERGY, A.VAT, " &
                                "A.MF, A.RETURN_AMOUNT, A.UPDATED_BY, A.UPDATED_DATE, A.TRANSFER_TO_PRUDENTIAL, " &
                                "A.INTEREST_NSS, A.INTEREST_STL, B.* " &
                                "FROM AM_PAYMENT_NEW_EFT A " &
                                "JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER " &
                                "JOIN AM_PAYMENT_NEW C ON A.PAYMENT_NO = C.PAYMENT_NO " &
                                "WHERE C.REMITTANCE_DATE BETWEEN TO_DATE('" & TransactionBegin & "','MM/DD/YYYY') AND TO_DATE('" & TransactionEnd & "','MM/DD/YYYY') " &
                                "AND a.ID_NUMBER = '" & IDNumber & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMPaymentForEFT(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Private Function GetAMPaymentForEFT(ByVal dr As IDataReader) As List(Of EFT)
        Dim result As New List(Of EFT)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New EFT
                    item.AllocationDate = CDate(.Item("REMITTANCE_DATE").ToString)
                    item.PaymentType = CType(System.Enum.Parse(GetType(EnumParticipantPaymentType), CStr(.Item("PAYMENT_TYPE").ToString)), EnumParticipantPaymentType)
                    item.CheckNumber = CLng(.Item("CHECK_NO").ToString)
                    item.Participant = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()),
                                                       CStr(.Item("PARTICIPANT_ADDRESS").ToString()), CStr(.Item("CITY").ToString()), CStr(.Item("PROVINCE").ToString()),
                                                       CStr(.Item("ZIP_CODE").ToString()))
                    item.ExcessCollection = CDec(.Item("EXCESS_COLLECTION").ToString)
                    item.DeferredEnergy = CDec(.Item("DEFERRED_ENERGY").ToString)
                    item.DeferredVAT = CDec(.Item("DEFERRED_VAT").ToString)
                    item.OffsetOnDeferredEnergy = CDec(.Item("OFFSET_DEFERRED_ENERGY").ToString)
                    item.OffsetOnDeferredVAT = CDec(.Item("OFFSET_DEFERRED_VAT").ToString)
                    item.Energy = CDec(.Item("ENERGY").ToString)
                    item.VAT = CDec(.Item("VAT").ToString)
                    item.MarketFees = CDec(.Item("MF").ToString)
                    item.ReturnAmount = CDec(.Item("RETURN_AMOUNT").ToString)
                    item.TransferPrudential = CDec(.Item("TRANSFER_TO_PRUDENTIAL").ToString)
                    item.TransferFinPen = CDec(.Item("TRANSFER_TO_FINPEN").ToString)
                    item.NSSInterest = CDec(.Item("INTEREST_NSS"))
                    item.STLInterest = CDec(.Item("INTEREST_STL"))
                    item.TotalPayment = item.ExcessCollection +
                                        item.DeferredEnergy +
                                        item.DeferredVAT +
                                        item.OffsetOnDeferredEnergy +
                                        item.OffsetOnDeferredVAT +
                                        item.Energy +
                                        item.VAT +
                                        item.MarketFees +
                                        item.ReturnAmount - (item.TransferPrudential + item.TransferFinPen)

                    item.UpdatedBy = CStr(.Item("UPDATED_BY").ToString)
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    'Save AM_PEMC_PAYMENT
    Public Sub SavePEMCPayment(ByVal EFTList As List(Of EFT))
        Dim ds As New DataSet
        Dim report As New DataReport
        Dim listSQL As New List(Of String)

        Try
            Dim dtEFT As New DataTable
            dtEFT.TableName = "AM_PEMC_PAYMENT"
            With dtEFT.Columns
                .Add("ALLOCATION_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(Integer))
                .Add("PAYMENT_TYPE", GetType(EnumParticipantPaymentType))
                .Add("CHECK_NO", GetType(Long))
                .Add("EXCESS_COLLECTION", GetType(Decimal))
                .Add("ENERGY", GetType(Decimal))
                .Add("VAT", GetType(Decimal))
                .Add("MF", GetType(Decimal))
                .Add("DEFAULT_INTEREST", GetType(Decimal))
                .Add("RETURN_AMOUNT", GetType(Decimal))
                .Add("TRANSFER_PRUDENTIAL", GetType(Decimal))
                .Add("TOTAL_PAYMENT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With


            For Each item In EFTList
                Dim dr As DataRow
                dr = dtEFT.NewRow
                With item
                    dr("ALLOCATION_DATE") = .AllocationDate
                    dr("ID_NUMBER") = .Participant.IDNumber
                    dr("PAYMENT_TYPE") = .PaymentType
                    dr("CHECK_NO") = .CheckNumber
                    dr("EXCESS_COLLECTION") = .ExcessCollection
                    dr("ENERGY") = .Energy
                    dr("VAT") = .VAT
                    dr("MF") = .MarketFees
                    dr("RETURN_AMOUNT") = .ReturnAmount
                    dr("TRANSFER_PRUDENTIAL") = .TransferPrudential
                    dr("TOTAL_PAYMENT") = .TotalPayment
                    dr("UPDATED_BY") = .UpdatedBy
                    dr("UPDATED_DATE") = .UpdatedDate
                End With
                dtEFT.Rows.Add(dr)
            Next
            ds.Tables.Add(dtEFT)
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get AM_PEMC_PAYMENT_ALLOCATION"
    Public Function GetAMPEMCPaymentForSummary(ByVal AllocationDate As Date) As List(Of PaymentAllocation)
        Dim result As New List(Of PaymentAllocation)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PEMC_PAYMENT_ALLOCATION " & _
                                "WHERE ALLOCATION_DATE = TO_DATE('" & FormatDateTime(AllocationDate, DateFormat.ShortDate) & "', 'MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMPEMCPaymentForSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetAMPEMCPaymentForSummary(ByVal AllocationDate As Date, ByVal AllocationType As EnumPaymentAllocationType) As List(Of PaymentAllocation)
        Dim result As New List(Of PaymentAllocation)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PEMC_PAYMENT_ALLOCATION " & _
                                "WHERE ALLOCATION_DATE = TO_DATE('" & FormatDateTime(AllocationDate, DateFormat.ShortDate) & "', 'MM/DD/YYYY') " & _
                                "AND ALLOCATION_TYPE = '" & AllocationType & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAMPEMCPaymentForSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetAMPEMCPaymentForSummary(ByVal dr As IDataReader) As List(Of PaymentAllocation)
        Dim result As New List(Of PaymentAllocation)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New PaymentAllocation
                    item.AllocationDate = CDate(.Item("ALOCATION_DATE"))
                    item.BillPeriod = CInt(.Item("BILL_PERIOD"))
                    item.DueDate = CDate(FormatDateTime(CDate(.Item("DUE_DATE")), DateFormat.ShortDate))
                    item.Participant.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.Amount = CDec(FormatNumber(CDec(.Item("AMOUNT")), 2, Microsoft.VisualBasic.TriState.True, Microsoft.VisualBasic.TriState.True))
                    item.AllocationType = CType(System.Enum.Parse(GetType(EnumPaymentAllocationType), CStr(.Item("ALLOCATION_TYPE"))), EnumPaymentAllocationType)
                    item.WESMSummary.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get Payment: DMCM Summary"
    Public Function GetPaymentDMCMSummary(ByVal PaymentBatchCode As String) As List(Of DebitCreditMemoSummary)
        Dim result As New List(Of DebitCreditMemoSummary)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DMCM_SUMMARY WHERE PAYMENT_BATCH_CODE = '" & PaymentBatchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentDMCMSummary(report.ReturnedIDatareader)

            'Get DMCM Details
            For Each itmResult In result
                Dim lstDMCMMain = Me.GetDebitCreditMemoMain(itmResult.DMCMNo)
                Dim lstDMCMDetails = Me.GetDebitCreditMemoDetails(itmResult.DMCMNo)

                itmResult.DMCMDetails = lstDMCMMain.FirstOrDefault
                itmResult.DMCMDetails.DMCMDetails = lstDMCMDetails

                itmResult.DMCMDate = CDate(FormatDateTime(lstDMCMMain.FirstOrDefault.UpdatedDate, DateFormat.ShortDate))
                itmResult.IDNumber = lstDMCMMain.FirstOrDefault.IDNumber
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetPaymentDMCMSummary(ByVal PaymentBatchCode As List(Of String)) As List(Of DebitCreditMemoSummary)
        Dim result As New List(Of DebitCreditMemoSummary)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_DMCM_SUMMARY WHERE PAYMENT_BATCH_CODE IN ("

            Dim recCtr As Long = 0
            For Each itmBatchCode In PaymentBatchCode
                If recCtr Mod 1000 <> 0 Then
                    SQL &= "'" & itmBatchCode & "', "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR PAYMENT_BATCH_CODE IN ("
                    End If
                    SQL &= "'" & itmBatchCode & "', "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentDMCMSummary(report.ReturnedIDatareader)

            'Get List of DMCM Number
            Dim _DMCMNo = (From x In result _
                           Select x.DMCMNo Distinct).ToList

            If result.Count <> 0 Then
                Dim lstDMCMMain = Me.GetDebitCreditMemoMain((From x In result _
                                                                       Select x.DMCMNo Distinct).ToList, True)

                For Each itmResult In result
                    Dim _itmResult = itmResult
                    Dim _cDMCM = (From x In lstDMCMMain _
                                  Where x.DMCMNumber = _itmResult.DMCMNo _
                                  Select x).FirstOrDefault
                    itmResult.DMCMDetails = _cDMCM


                    itmResult.DMCMDate = CDate(FormatDateTime(lstDMCMMain.FirstOrDefault.UpdatedDate, DateFormat.ShortDate))
                    itmResult.IDNumber = lstDMCMMain.FirstOrDefault.IDNumber
                Next

            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPaymentDMCMSummary(ByVal dr As IDataReader) As List(Of DebitCreditMemoSummary)
        Dim result As New List(Of DebitCreditMemoSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New DebitCreditMemoSummary
                    item.DMCMNo = CLng(.Item("AM_DMCM_NO").ToString)
                    item.INVDMCMNo = CStr(.Item("INV_DMCM_NO").ToString)
                    item.PaymentBatchCode = CStr(.Item("PAYMENT_BATCH_CODE").ToString)
                    item.DMCMSummaryType = CType(System.Enum.Parse(GetType(EnumDMCMSummaryType), CStr(.Item("SUMMARY_TYPE").ToString)), EnumDMCMSummaryType)
                    item.IDNumber = CStr(.Item("ID_NUMBER").ToString)
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

#End Region

#Region "Request for Payment - Get/Save (RFP)"
    Public Function GetRequestForPayment(ByVal CollectionAllocationDate As Date) As List(Of RequestForPayment)
        Dim result As New List(Of RequestForPayment)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_RFP WHERE ALLOCATION_DATE = TO_DATE('" & CollectionAllocationDate & "', 'MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim RFPDetails = Me.GetRequestForPaymentDetails(CollectionAllocationDate)

            result = Me.GetRequestForPayment(report.ReturnedIDatareader, RFPDetails)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetRequestForPayment() As List(Of RequestForPayment)
        Dim result As New List(Of RequestForPayment)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_RFP"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim RFPDetails = Me.GetRequestForPaymentDetails()

            result = Me.GetRequestForPayment(report.ReturnedIDatareader, RFPDetails)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Private Function GetRequestForPayment(ByVal dr As IDataReader, ByVal RFPDetails As List(Of RequestForPaymentDetails)) As List(Of RequestForPayment)
        Dim result As New List(Of RequestForPayment)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New RequestForPayment

                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY").ToString())
                    item.FromRFP = CStr(.Item("RFP_FROM").ToString())
                    item.PaymentDate = CDate(.Item("PAYMENT_DATE").ToString())
                    item.PreparedBy = CStr(.Item("PREPARED_BY").ToString())
                    item.PurposeOfPayment = CStr(.Item("RFP_PURPOSE").ToString())
                    item.ReferenceNo = CLng(.Item("REFERENCE_NO").ToString())
                    item.ReviewedBy = CStr(.Item("REVIEWED_BY").ToString())
                    item.toRFP = CStr(.Item("RFP_TO").ToString())
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY").ToString())
                    Dim curdetails = (From x In RFPDetails _
                                      Where x.ReferenceNo = item.ReferenceNo _
                                      Select x).ToList
                    item.RFPDetails = curdetails

                    item.NSSAmount = CDec(.Item("NSS_APPLIED"))
                    item.PRReplenishment = CDec(.Item("PR_REPLENISHMENT"))
                    item.MarketFees = CDec(.Item("MF_APPLIED"))
                    item.HeldCollection = CDec(.Item("HELD_COLLECTION"))
                    item.TransferToPEMC = CDec(.Item("TRANSFER_PEMC"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function


    Public Function GetRequestForPaymentDetails(ByVal CollectionAllocationDate As Date) As List(Of RequestForPaymentDetails)
        Dim result As New List(Of RequestForPaymentDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_RFP_DETAILS WHERE ALLOCATION_DATE = TO_DATE('" & CollectionAllocationDate & "', 'MM/DD/YYYY')"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipant = Me.GetAMParticipants()

            result = Me.GetRequestForPaymentDetails(report.ReturnedIDatareader, lstParticipant)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetRequestForPaymentDetails() As List(Of RequestForPaymentDetails)
        Dim result As New List(Of RequestForPaymentDetails)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_RFP_DETAILS"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipant = Me.GetAMParticipants()

            result = Me.GetRequestForPaymentDetails(report.ReturnedIDatareader, lstParticipant)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetRequestForPaymentDetails(ByVal dr As IDataReader, ByVal ParticipantList As List(Of AMParticipants)) As List(Of RequestForPaymentDetails)
        Dim result As New List(Of RequestForPaymentDetails)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New RequestForPaymentDetails
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    item.ReferenceNo = CLng(.Item("REFERENCE_NO").ToString())
                    item.Amount = CDec(.Item("AMOUNT").ToString())

                    If .Item("DATE_OF_DEPOSIT") Is DBNull.Value Then

                    End If

                    item.DateOfDeposit = CStr(.Item("DATE_OF_DEPOSIT").ToString)
                    item.Particulars = CStr(.Item("PARTICULARS").ToString())

                    If Not IsNumeric(.Item("ID_NUMBER").ToString) Then
                        item.Participant = CStr(.Item("ID_NUMBER"))
                    Else
                        Dim curParticipant = (From x In ParticipantList _
                                          Where x.IDNumber = CStr(.Item("ID_NUMBER").ToString()) _
                                          Select x).FirstOrDefault
                        item.Participant = curParticipant.IDNumber.ToString
                    End If

                    item.PaymentType = CType(System.Enum.Parse(GetType(EnumParticipantPaymentType), CStr(.Item("RFP_PAYMENT_TYPE"))), EnumParticipantPaymentType)
                    item.RFPDetailsType = CType(System.Enum.Parse(GetType(EnumRFPDetailsType), CStr(.Item("RFP_DETAILS_TYPE"))), EnumRFPDetailsType)

                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Payment Allocation Summary"
    Public Function GetAllocationSummary(ByVal AllocationDate As Date) As List(Of PaymentAllocation)
        Dim result As New List(Of PaymentAllocation)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_ALLOCATION " & _
                                "WHERE ALLOCATION_DATE = TO_DATE('" & CDate(AllocationDate) & "', 'MM/DD/YYYY')"



            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAllocationSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetAllocationSummary(ByVal TransactionBegin As Date, ByVal TransactionEnd As Date) As List(Of PaymentAllocation)
        Dim result As New List(Of PaymentAllocation)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_PAYMENT_ALLOCATION " & _
                                "WHERE ALLOCATION_DATE BETWEEN TO_DATE('" & CDate(TransactionBegin) & "', 'MM/DD/YYYY') TO_DATE('" & CDate(TransactionEnd) & "', 'MM/DD/YYYY')"



            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetAllocationSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function


    Private Function GetAllocationSummary(ByVal dr As IDataReader) As List(Of PaymentAllocation)
        Dim result As New List(Of PaymentAllocation)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New PaymentAllocation
                    item.AllocationDate = CDate(.Item("ALLOCATION_DATE"))
                    item.BillPeriod = CInt(.Item("BILL_PERIOD"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.Participant.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.AllocationType = CType(System.Enum.Parse(GetType(EnumPaymentAllocationType), CStr(.Item("ALLOCATION_TYPE"))), EnumPaymentAllocationType)
                    item.WESMSummary.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Default Notice Get/Save"
    'Get Default Notice ALL
    Public Function GetDefaultNoticeDetails() As List(Of DefaultNoticeDetails)
        Dim result As New List(Of DefaultNoticeDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* " & _
                                "FROM AM_DEFAULT_NOTICE_DETAILS A "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDefaultNoticeDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDefaultNotice() As List(Of DefaultNotice)
        Dim result As New List(Of DefaultNotice)
        Dim report As New DataReport

        Try

            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID, B.FULL_NAME,  B.REP_FNAME, B.REP_MNAME, B.REP_LNAME, B.REP_POSITION, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE " & _
                                "FROM AM_DEFAULT_NOTICE A " & _
                                "INNER JOIN AM_PARTICIPANTS B ON A.ID_NUMBER = B.ID_NUMBER"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDefaultNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDefaultNotice(ByVal IDNumber As String) As List(Of DefaultNotice)
        Dim result As New List(Of DefaultNotice)
        Dim report As New DataReport

        Try            
            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID, B.FULL_NAME,  B.REP_FNAME, B.REP_MNAME, B.REP_LNAME, B.REP_POSITION, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE " & _
                                "FROM AM_DEFAULT_NOTICE A, AM_PARTICIPANTS B " & _
                                "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                                "AND A.ID_NUMBER = '" & IDNumber & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDefaultNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDefaultNotice(ByVal CurrentDate As Date) As List(Of DefaultNotice)
        Dim result As New List(Of DefaultNotice)
        Dim report As New DataReport

        Try            
            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID, B.FULL_NAME,  B.REP_FNAME, B.REP_MNAME, B.REP_LNAME, B.REP_POSITION, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE " & _
                                "FROM AM_DEFAULT_NOTICE A, AM_PARTICIPANTS B " & _
                                "WHERE A.ID_NUMBER = B.ID_NUMBER " & _
                                "AND A.TRANSACTION_DATE = TO_DATE('" & FormatDateTime(CurrentDate, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDefaultNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetDefaultNotice(ByVal IDNumber As String, ByVal CurrentDate As Date) As List(Of DefaultNotice)
        Dim result As New List(Of DefaultNotice)
        Dim report As New DataReport

        Try            
            Dim SQL As String = "SELECT A.*, B.PARTICIPANT_ID, B.FULL_NAME,  B.REP_FNAME, B.REP_MNAME, B.REP_LNAME, B.REP_POSITION, " & _
                                "B.PARTICIPANT_ADDRESS, B.CITY, B.PROVINCE, B.ZIP_CODE " & _
                                "FROM AM_DEFAULT_NOTICE A, AM_PARTICIPANTS B " & _
                                "WHERE A.ID_NUMBER = B.ID_NUMBER AND A.ID_NUMBER = '" & IDNumber & "' " & _
                                "AND A.TRANSACTION_DATE = TO_DATE('" & FormatDateTime(CurrentDate, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetDefaultNotice(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetDefaultNotice(ByVal dr As IDataReader) As List(Of DefaultNotice)
        Dim result As New List(Of DefaultNotice)
        Dim index As Integer = 0
        Dim ListofDefaultNoticeDetails As List(Of DefaultNoticeDetails) = Me.GetDefaultNoticeDetails()
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim participantRep As New ParticipantRepresentative(CStr(.Item("REP_FNAME").ToString()), CStr(.Item("REP_MNAME").ToString()),
                                                                        CStr(.Item("REP_LNAME").ToString()), CStr(.Item("REP_POSITION").ToString()))
                    Dim item As New DefaultNotice                    

                    item.Participant.IDNumber = CStr(.Item("ID_NUMBER"))
                    item.Participant.ParticipantID = CStr(.Item("PARTICIPANT_ID"))
                    item.Participant.ParticipantAddress = CStr(.Item("PARTICIPANT_ADDRESS").ToString())
                    item.Participant.City = CStr(.Item("CITY").ToString())
                    item.Participant.Province = CStr(.Item("PROVINCE").ToString())
                    item.Participant.ZipCode = CStr(.Item("ZIP_CODE").ToString())
                    item.Participant.FullName = CStr(.Item("FULL_NAME").ToString())
                    item.Participant.Representative = participantRep                    
                    item.DNNumber = CLng(.Item("DN_NUMBER"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    Dim getDetails As List(Of DefaultNoticeDetails) = (From x In ListofDefaultNoticeDetails Where x.DNNumber = item.DNNumber Select x).ToList
                    For Each oitem In getDetails
                        item.ListofDefaulNoticeDetails.Add(oitem)
                    Next
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetDefaultNoticeDetails(ByVal dr As IDataReader) As List(Of DefaultNoticeDetails)
        Dim result As New List(Of DefaultNoticeDetails)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New DefaultNoticeDetails
                    item.BillingPeriod = CStr(.Item("BILLING_PERIOD"))
                    item.Particulars = CStr(.Item("PARTICULARS"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.DNNumber = CDec(.Item("DN_NUMBER"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function

    'Save Default Notice
    Public Sub SaveDefaultNotice(ByVal ListSQL As List(Of String), ByVal isOverwrite As Boolean, ByVal listofDNNumber As List(Of Long), transactiondate As Date)

        Dim report As New DataReport
        Dim ds As New DataSet
        Dim ListQSLDel As New List(Of String)

        Try
            'CollectionNotice Number            
            If isOverwrite = True Then
                Dim SQL As String = ""
                For Each item In listofDNNumber
                    SQL = "DELETE FROM AM_DEFAULT_NOTICE_DETAILS WHERE DN_NUMBER = " & item
                    ListQSLDel.Add(SQL)
                Next
                SQL = "DELETE FROM AM_DEFAULT_NOTICE WHERE TRANSACTION_DATE = TO_DATE('" & FormatDateTime(transactiondate, DateFormat.ShortDate) & "','MM/DD/YYYY')"
                ListQSLDel.Add(SQL)
            End If

            report = Me.DataAccess.ExecuteSaveQuery(ListQSLDel, ds)
            report = Me.DataAccess.ExecuteSaveQuery(ListSQL, ds)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "Generate Payment Details"
    Public Function GetPaymentDetailsDates() As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT REMITTANCE_DATE FROM AM_PAYMENT_NEW ORDER BY REMITTANCE_DATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = (From x In Me.GetPaymentDetailsDates(report.ReturnedIDatareader) Select x).Distinct.ToList()

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPaymentDetailsDates(ByVal dr As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New Date
                    item = CDate(FormatDateTime(CDate(.Item("REMITTANCE_DATE")), DateFormat.ShortDate))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    'Get Participants 
    Public Function GetPDAMParticipants(ByVal TransactionDate As Date) As List(Of String)
        Dim ret As New List(Of String)
        Dim Report As New DataReport
        Try
            
            Dim SQL As String = "SELECT DISTINCT A.PARTICIPANT_ID " & _
                               "FROM (SELECT T1.* FROM AM_STL_NOTICE_NEW_REMITT_VIEW T1 " & _
                                     "UNION ALL " & _
                                     "SELECT T2.* FROM AM_STL_NOTICE_NEW_TRANSFER_TO T2 ) A " & _
                               "WHERE A.REMITTANCE_DATE = TO_DATE('" & FormatDateTime(TransactionDate, DateFormat.ShortDate) & "','MM/DD/YYYY') " & _
                               "ORDER BY A.PARTICIPANT_ID"

            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If

            ret = (From x In Me.GetPDAMParticipants(Report.ReturnedIDatareader) Select x).Distinct.ToList()
        Catch ex As Exception

        End Try

        Return ret
    End Function

    Public Function GetPDAMParticipants(ByVal dr As IDataReader) As List(Of String)
        Dim ret As New List(Of String)
        Try
            While dr.Read()
                With dr
                    Dim item As String = CStr(.Item("PARTICIPANT_ID"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

#End Region

#Region "Generate Settlement Notice"    
    Public Function GetSTLDates() As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT DISTINCT STL_NOTICE_DATE FROM AM_STL_NOTICE_NEW ORDER BY STL_NOTICE_DATE DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetSTLDates(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetSTLDates(ByVal dr As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New Date
                    item = CDate(FormatDateTime(CDate(.Item("STL_NOTICE_DATE")), DateFormat.ShortDate))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function    
    
    'Get Participants 
    Public Function GetSTLAMParticipants(ByVal TransactionDate As Date) As List(Of String)
        Dim ret As New List(Of String)
        Dim Report As New DataReport
        Try
            Dim previousDate As Date = TransactionDate.AddMonths(-2)
            Dim getpreviousDate As Date = New Date(previousDate.Year, previousDate.Month, 1).AddDays(-1)


            Dim SQL As String = "SELECT DISTINCT A.PARTICIPANT_ID " &
                               "FROM AM_PARTICIPANTS A WHERE STATUS = 1 AND MEMBERSHIP_TYPE = 'DIRECT' ORDER BY A.PARTICIPANT_ID"

            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If

            ret = (From x In Me.GetSTLAMParticpants(Report.ReturnedIDatareader) Select x).Distinct.ToList()
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Public Function GetSTLAMParticpants(ByVal dr As IDataReader) As List(Of String)
        Dim ret As New List(Of String)
        Try
            While dr.Read()
                With dr
                    Dim item As String
                    If Not IsDBNull(.Item("PARTICIPANT_ID")) Then
                        item = CStr(.Item("PARTICIPANT_ID"))
                        ret.Add(item)
                    End If
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function


    'Get Settlement Notice Beginning Balance
    Public Function GetSTLNoticeOrigBB(ByVal TransactionDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim report As New DataReport

        Try

            Dim oSql As String = "SELECT ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'E' THEN ENDING_BALANCE ELSE 0 END) ENERGY, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'EV' THEN ENDING_BALANCE ELSE 0 END) VAT, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MF' THEN ENDING_BALANCE ELSE 0 END) MF, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MFV' THEN ENDING_BALANCE ELSE 0 END) MFVAT " & vbNewLine _
                              & "FROM ( " & vbNewLine _
                                    & "SELECT B.ID_NUMBER, D.PARTICIPANT_ID, D.FULL_NAME, B.DUE_DATE, B.BILLING_PERIOD||' - '||TO_CHAR(B.DUE_DATE,'MON. DD YYYY') AS BILLING_PERIOD, " & vbNewLine _
                                           & "CASE WHEN C.REMARKS IS NULL THEN E.REMARKS ELSE C.REMARKS END AS REMARKS, B.INV_DM_CM, '' AS PARTICULARS_CHARGETYPE, B.CHARGE_TYPE, A.ENDING_BALANCE " & vbNewLine _
                                    & "FROM AM_STL_NOTICE_BEGINNING_BAL A " & vbNewLine _
                                    & "INNER JOIN (SELECT * FROM AM_WESM_BILL_SUMMARY WHERE ID_NUMBER = '" & IDNumber & "') B ON B.WESMBILL_SUMMARY_NO = A.WESMBILL_SUMMARY_NO " & vbNewLine _
                                    & "LEFT JOIN (SELECT INVOICE_NO, BILLING_PERIOD, REMARKS, CHARGE_TYPE FROM AM_WESM_BILL WHERE CHARGE_TYPE = 'E' AND ID_NUMBER = '" & IDNumber & "') C ON C.INVOICE_NO = B.INV_DM_CM AND C.BILLING_PERIOD = B.BILLING_PERIOD " & vbNewLine _
                                    & "LEFT JOIN (SELECT * FROM AM_PARTICIPANTS WHERE ID_NUMBER = '" & IDNumber & "') D ON D.ID_NUMBER = B.ID_NUMBER " & vbNewLine _
                                    & "LEFT JOIN (SELECT INVOICE_NO, BILLING_PERIOD, REMARKS, CHARGE_TYPE FROM AM_WESM_BILL WHERE ID_NUMBER = '" & IDNumber & "') E ON E.INVOICE_NO = B.INV_DM_CM AND E.BILLING_PERIOD = B.BILLING_PERIOD AND E.CHARGE_TYPE = B.CHARGE_TYPE " & vbNewLine _
                              & "WHERE B.ID_NUMBER = '" & IDNumber & "' AND B.BEGINNING_BALANCE <> 0 AND A.STL_NOTICE_DATE = LAST_DAY(TO_DATE('" & TransactionDate.ToShortDateString & "','MM/DD/YYYY')) ORDER BY B.INV_DM_CM, B.CHARGE_TYPE) " & vbNewLine _
                              & "GROUP BY ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(oSql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSTLNoticeBBDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetSTLNoticeBB(ByVal STLNoticeDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim report As New DataReport

        Try
            'Updated by Lance removing the comparison of billing period ing Table E
            Dim Sql As String = "SELECT ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'E' THEN ENDING_BALANCE ELSE 0 END) ENERGY, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'EV' THEN ENDING_BALANCE ELSE 0 END) VAT, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MF' THEN ENDING_BALANCE ELSE 0 END) MF, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MFV' THEN ENDING_BALANCE ELSE 0 END) MFVAT " & vbNewLine _
                              & "FROM ( " & vbNewLine _
                                    & "SELECT B.ID_NUMBER, D.PARTICIPANT_ID, D.FULL_NAME, B.DUE_DATE, B.BILLING_PERIOD||' - '||TO_CHAR(B.DUE_DATE,'MON. DD YYYY') AS BILLING_PERIOD, " & vbNewLine _
                                           & "CASE WHEN C.REMARKS IS NULL THEN E.REMARKS ELSE C.REMARKS END AS REMARKS , B.INV_DM_CM, '' AS PARTICULARS_CHARGETYPE, B.CHARGE_TYPE, A.ENDING_BALANCE " & vbNewLine _
                                    & "FROM AM_STL_NOTICE_NEW A " & vbNewLine _
                                    & "INNER JOIN (SELECT * FROM AM_WESM_BILL_SUMMARY WHERE ID_NUMBER = '" & IDNumber & "') B ON B.WESMBILL_SUMMARY_NO = A.WESMBILL_SUMMARY_NO " & vbNewLine _
                                    & "LEFT JOIN (SELECT INVOICE_NO, BILLING_PERIOD, REMARKS, CHARGE_TYPE FROM AM_WESM_BILL WHERE CHARGE_TYPE = 'E' AND ID_NUMBER = '" & IDNumber & "') C ON C.INVOICE_NO = B.INV_DM_CM AND C.BILLING_PERIOD = B.BILLING_PERIOD " & vbNewLine _
                                    & "LEFT JOIN (SELECT * FROM AM_PARTICIPANTS WHERE ID_NUMBER = '" & IDNumber & "') D ON D.ID_NUMBER = B.ID_NUMBER " & vbNewLine _
                                    & "LEFT JOIN (SELECT INVOICE_NO, BILLING_PERIOD, REMARKS, CHARGE_TYPE FROM AM_WESM_BILL WHERE ID_NUMBER = '" & IDNumber & "') E ON E.INVOICE_NO = B.INV_DM_CM AND E.CHARGE_TYPE = B.CHARGE_TYPE " & vbNewLine _
                                    & "WHERE B.ID_NUMBER = '" & IDNumber & "' AND A.STL_NOTICE_DATE = LAST_DAY(TO_DATE('" & STLNoticeDate.ToShortDateString & "','MM/DD/YYYY')) AND LAST_DAY(B.DUE_DATE) <= LAST_DAY(TO_DATE('" & STLNoticeDate.ToShortDateString & "','MM/DD/YYYY')) ORDER BY B.INV_DM_CM, B.CHARGE_TYPE) " & vbNewLine _
                              & "GROUP BY ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE ORDER BY DUE_DATE, BILLING_PERIOD, INV_DM_CM"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSTLNoticeBBDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetSTLNoticePrevEB(ByVal STLNoticeDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim report As New DataReport

        Try
            'Updated by Lance removing the comparison of billing period ing Table E
            Dim Sql As String = "SELECT ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'E' THEN ENDING_BALANCE ELSE 0 END) ENERGY, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'EV' THEN ENDING_BALANCE ELSE 0 END) VAT, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MF' THEN ENDING_BALANCE ELSE 0 END) MF, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MFV' THEN ENDING_BALANCE ELSE 0 END) MFVAT " & vbNewLine _
                              & "FROM ( " & vbNewLine _
                                    & "SELECT B.ID_NUMBER, D.PARTICIPANT_ID, D.FULL_NAME, B.DUE_DATE, B.BILLING_PERIOD||' - '||TO_CHAR(B.DUE_DATE,'MON. DD YYYY') AS BILLING_PERIOD, " & vbNewLine _
                                           & "CASE WHEN C.REMARKS IS NULL THEN E.REMARKS ELSE C.REMARKS END AS REMARKS , B.INV_DM_CM, '' AS PARTICULARS_CHARGETYPE, B.CHARGE_TYPE, A.ENDING_BALANCE " & vbNewLine _
                                    & "FROM AM_STL_NOTICE_NEW A " & vbNewLine _
                                    & "INNER JOIN (SELECT * FROM AM_WESM_BILL_SUMMARY WHERE ID_NUMBER = '" & IDNumber & "') B ON B.WESMBILL_SUMMARY_NO = A.WESMBILL_SUMMARY_NO " & vbNewLine _
                                    & "LEFT JOIN (SELECT INVOICE_NO, BILLING_PERIOD, REMARKS, CHARGE_TYPE FROM AM_WESM_BILL WHERE CHARGE_TYPE = 'E' AND ID_NUMBER = '" & IDNumber & "') C ON C.INVOICE_NO = B.INV_DM_CM AND C.BILLING_PERIOD = B.BILLING_PERIOD " & vbNewLine _
                                    & "LEFT JOIN (SELECT * FROM AM_PARTICIPANTS WHERE ID_NUMBER = '" & IDNumber & "') D ON D.ID_NUMBER = B.ID_NUMBER " & vbNewLine _
                                    & "LEFT JOIN (SELECT INVOICE_NO, BILLING_PERIOD, REMARKS, CHARGE_TYPE FROM AM_WESM_BILL WHERE ID_NUMBER = '" & IDNumber & "') E ON E.INVOICE_NO = B.INV_DM_CM AND E.CHARGE_TYPE = B.CHARGE_TYPE " & vbNewLine _
                                    & "WHERE B.ID_NUMBER = '" & IDNumber & "' AND A.STL_NOTICE_DATE = LAST_DAY(TO_DATE('" & STLNoticeDate.ToShortDateString & "','MM/DD/YYYY')) ORDER BY B.INV_DM_CM, B.CHARGE_TYPE) " & vbNewLine _
                              & "GROUP BY ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE ORDER BY DUE_DATE, BILLING_PERIOD, INV_DM_CM"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSTLNoticeBBDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetSTLNoticeBBDetails(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim ret As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Dim InvDic As New Dictionary(Of String, String)

        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New STLNoticeNew
                    Dim ItemKey As String = .Item("INV_DM_CM").ToString()
                    If Not InvDic.ContainsKey(ItemKey) Then
                        InvDic.Add(ItemKey, ItemKey)
                        item.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), CStr(.Item("FULL_NAME").ToString()))
                        item.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                        item.ParticularsChargeType = If(String.IsNullOrEmpty(.Item("PARTICULARS_CHARGETYPE").ToString()), "", .Item("PARTICULARS_CHARGETYPE").ToString())                        
                        item.ParticularsBillType = .Item("REMARKS").ToString()
                        item.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                        item.WESMBillInv = .Item("INV_DM_CM").ToString()
                        item.Energy = If(String.IsNullOrEmpty(.Item("ENERGY").ToString()), 0, CDec(.Item("ENERGY").ToString()))
                        item.VAT = If(String.IsNullOrEmpty(.Item("VAT").ToString()), 0, CDec(.Item("VAT").ToString()))
                        item.MFAndVAT = If(String.IsNullOrEmpty(.Item("MF").ToString()), 0, CDec(.Item("MF").ToString())) + If(String.IsNullOrEmpty(.Item("MFVAT").ToString()), 0, CDec(.Item("MFVAT").ToString()))
                        ret.Add(item)
                    Else
                        Dim EditRet As STLNoticeNew = (From x In ret Where x.WESMBillInv = ItemKey Select x).FirstOrDefault

                        EditRet.Energy += If(String.IsNullOrEmpty(.Item("ENERGY").ToString()), 0, CDec(.Item("ENERGY").ToString()))
                        EditRet.VAT += If(String.IsNullOrEmpty(.Item("VAT").ToString()), 0, CDec(.Item("VAT").ToString()))
                        EditRet.MFAndVAT += If(String.IsNullOrEmpty(.Item("MF").ToString()), 0, CDec(.Item("MF").ToString())) + If(String.IsNullOrEmpty(.Item("MFVAT").ToString()), 0, CDec(.Item("MFVAT").ToString()))

                    End If
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return ret
    End Function

    Public Function GetSTLNoticeCB(ByVal TransactionDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim report As New DataReport

        Try

            Dim Sql As String = "SELECT ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INVOICE_NO, PARTICULARS_CHARGETYPE, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'E' THEN AMOUNT ELSE 0 END) ENERGY, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'EV' THEN AMOUNT ELSE 0 END) VAT, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MF' THEN AMOUNT ELSE 0 END) MF, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MFV' THEN AMOUNT ELSE 0 END) MFVAT " & vbNewLine _
                              & "FROM ( " & vbNewLine _
                                    & "SELECT A.ID_NUMBER, C.PARTICIPANT_ID, C.FULL_NAME, A.DUE_DATE, A.BILLING_PERIOD||' - '||TO_CHAR(A.DUE_DATE,'MON. DD YYYY') AS BILLING_PERIOD, " & vbNewLine _
                                            & "A.REMARKS, A.INVOICE_NO, '' PARTICULARS_CHARGETYPE, A.CHARGE_TYPE, A.AMOUNT " & vbNewLine _
                                    & "FROM (SELECT * FROM AM_WESM_BILL WHERE (NOT INVOICE_NO LIKE 'DMCM-%' AND NOT INVOICE_NO LIKE 'SPA-%') AND ID_NUMBER = '" & IDNumber & "') A " & vbNewLine _
                            & "LEFT JOIN (SELECT * FROM AM_PARTICIPANTS WHERE ID_NUMBER = '" & IDNumber & "') C ON C.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                            & "WHERE TO_CHAR(A.DUE_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & TransactionDate.ToShortDateString & "', 'MM-DD-YYYY'), 'MM-YYYY') " & vbNewLine _
                            & "ORDER BY A.INVOICE_NO, A.CHARGE_TYPE) " & vbNewLine _
                            & "GROUP BY ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INVOICE_NO, PARTICULARS_CHARGETYPE"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSTLNoticeCBDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetSTLNoticeCBDetails(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Dim InvDic As New Dictionary(Of String, String)
        Try
            While dr.Read()
                index += 1
                With dr

                    Dim item As New STLNoticeNew
                    Dim ItemKey As String = .Item("INVOICE_NO").ToString()

                    If Not InvDic.ContainsKey(ItemKey) Then
                        InvDic.Add(ItemKey, ItemKey)
                        item.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("FULL_NAME").ToString()))
                        item.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                        item.ParticularsChargeType = .Item("PARTICULARS_CHARGETYPE").ToString()
                        item.ParticularsBillType = .Item("REMARKS").ToString()
                        item.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                        item.WESMBillInv = .Item("INVOICE_NO").ToString()
                        item.Energy = If(String.IsNullOrEmpty(.Item("ENERGY").ToString()), 0, CDec(.Item("ENERGY").ToString()))
                        item.VAT = If(String.IsNullOrEmpty(.Item("VAT").ToString()), 0, CDec(.Item("VAT").ToString()))
                        item.MFAndVAT = If(String.IsNullOrEmpty(.Item("MF").ToString()), 0, CDec(.Item("MF").ToString())) + If(String.IsNullOrEmpty(.Item("MFVAT").ToString()), 0, CDec(.Item("MFVAT").ToString()))
                        result.Add(item)
                    Else
                        Dim EditRet As STLNoticeNew = (From x In result Where x.WESMBillInv = ItemKey Select x).FirstOrDefault

                        EditRet.Energy += If(String.IsNullOrEmpty(.Item("ENERGY").ToString()), 0, CDec(.Item("ENERGY").ToString()))
                        EditRet.VAT += If(String.IsNullOrEmpty(.Item("VAT").ToString()), 0, CDec(.Item("VAT").ToString()))
                        EditRet.MFAndVAT += If(String.IsNullOrEmpty(.Item("MF").ToString()), 0, CDec(.Item("MF").ToString())) + If(String.IsNullOrEmpty(.Item("MFVAT").ToString()), 0, CDec(.Item("MFVAT").ToString()))
                    End If
                    
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSTLNoticeClosingWESMbySPABill(ByVal CollectionAllocationDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim Ret As New List(Of STLNoticeNew)
        Dim Report As New DataReport

        Try

            Dim Sql As String = "SELECT A.ID_NUMBER, A.PARTICIPANT_ID, A.FULL_NAME, A.BILLING_PERIOD, A.REMARKS, A.PAY_COLL_TYPE, " & vbNewLine _
                                    & "A.DUE_DATE, A.INVOICE_NO AS AM_REF_NO, SUM(A.AMOUNT) AS AMOUNT, A.ALLOCATION_DATE, 4 AS TRANS_TYPE, A.SORTCOLUMN " & vbNewLine _
                              & "FROM AM_STL_NOTICE_NEW_SPA_VIEW A " & vbNewLine _
                              & "WHERE TO_CHAR(A.ALLOCATION_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY'), 'MM-YYYY') AND A.ID_NUMBER = '" & IDNumber & "' " & vbNewLine _
                              & "GROUP BY A.ID_NUMBER, A.PARTICIPANT_ID, A.FULL_NAME, A.BILLING_PERIOD, A.REMARKS, A.PAY_COLL_TYPE, A.DUE_DATE, A.INVOICE_NO, A.ALLOCATION_DATE, A.SORTCOLUMN"

            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If
            Ret = Me.GetSTLNoticeCollectRemittDetails(Report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not Report.ReturnedIDatareader.IsClosed Then
                Report.ReturnedIDatareader.Close()
            End If
        End Try

        Return Ret
    End Function

    Public Function GetSTLNoticeSPABill(ByVal TransactionDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim report As New DataReport

        Try
            Dim Sql As String = "SELECT ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INVOICE_NO, PARTICULARS_CHARGETYPE, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'E' THEN AMOUNT ELSE 0 END) ENERGY, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'EV' THEN AMOUNT ELSE 0 END) VAT, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MF' THEN AMOUNT ELSE 0 END) MF, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MFV' THEN AMOUNT ELSE 0 END) MFVAT " & vbNewLine _
                              & "FROM ( " & vbNewLine _
                              & "SELECT C.ID_NUMBER,  E.PARTICIPANT_ID, E.FULL_NAME, C.DUE_DATE, C.BILLING_PERIOD||' - '||TO_CHAR(C.DUE_DATE,'MON. DD YYYY') AS BILLING_PERIOD, " & vbNewLine _
                                & "D.REMARKS, C.INV_DM_CM AS INVOICE_NO, '' PARTICULARS_CHARGETYPE, C.CHARGE_TYPE, C.BEGINNING_BALANCE AS AMOUNT " & vbNewLine _
                              & "FROM AM_SPA_MAIN A " & vbNewLine _
                              & "INNER JOIN AM_SPA_MONITORING B ON B.SPA_NO = A.SPA_NO " & vbNewLine _
                              & "INNER JOIN (SELECT * FROM AM_WESM_BILL_SUMMARY WHERE ID_NUMBER ='" & IDNumber & "') C ON C.WESMBILL_SUMMARY_NO = B.SPA_WESMBILL_SUMMARY_NO " & vbNewLine _
                              & "INNER JOIN (SELECT * FROM AM_WESM_BILL WHERE ID_NUMBER ='" & IDNumber & "') D ON D.INVOICE_NO = C.INV_DM_CM AND D.CHARGE_TYPE = C.CHARGE_TYPE " & vbNewLine _
                              & "INNER JOIN (SELECT * FROM AM_PARTICIPANTS WHERE ID_NUMBER = '" & IDNumber & "') E ON E.ID_NUMBER = C.ID_NUMBER " & vbNewLine _
                              & "WHERE TO_CHAR(A.TRANSACTION_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & TransactionDate.ToShortDateString & "', 'MM-DD-YYYY'), 'MM-YYYY') " & vbNewLine _
                              & "AND C.ID_NUMBER = '" & IDNumber & "') " & vbNewLine _
                              & "GROUP BY ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INVOICE_NO, PARTICULARS_CHARGETYPE ORDER BY DUE_DATE"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSTLNoticeCBDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try
        Return result
    End Function

    Public Function GetSTLNoticeP2PC2C(ByVal TransactionDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim report As New DataReport

        Try
            Dim Sql As String = "SELECT ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'E' THEN AMOUNT ELSE 0 END) ENERGY, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'EV' THEN AMOUNT ELSE 0 END) VAT, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MF' THEN AMOUNT ELSE 0 END) MF, " & vbNewLine _
                                    & "SUM(CASE WHEN CHARGE_TYPE = 'MFV' THEN AMOUNT ELSE 0 END) MFVAT " & vbNewLine _
                                    & "FROM ( " & vbNewLine _
                                            & "SELECT A.ID_NUMBER, C.PARTICIPANT_ID, C.FULL_NAME, A.DUE_DATE, A.BILLING_PERIOD||' - '||TO_CHAR(A.DUE_DATE,'MON. DD YYYY') AS BILLING_PERIOD, " & vbNewLine _
                                                     & "D.REMARKS, B.INV_DM_CM, '' PARTICULARS_CHARGETYPE, A.CHARGE_TYPE, CASE B.DEBIT WHEN 0 THEN B.CREDIT * -1 ELSE B.DEBIT END AS AMOUNT " & vbNewLine _
                                & "FROM (SELECT * FROM AM_DMCM WHERE ID_NUMBER = '" & IDNumber & "') A " & vbNewLine _
                                & "LEFT JOIN AM_DMCM_DETAILS B ON B.AM_DMCM_NO = A.AM_DMCM_NO " & vbNewLine _
                                & "LEFT JOIN AM_PARTICIPANTS C ON C.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                                & "LEFT JOIN (SELECT * FROM AM_WESM_BILL WHERE ID_NUMBER = '" & IDNumber & "') D ON D.INVOICE_NO = B.INV_DM_CM  AND D.CHARGE_TYPE = A.CHARGE_TYPE " & vbNewLine _
                                & "LEFT JOIN (SELECT * FROM AM_WESM_BILL_SUMMARY WHERE ID_NUMBER = '" & IDNumber & "') E ON E.INV_DM_CM = B.INV_DM_CM AND E.CHARGE_TYPE = A.CHARGE_TYPE " & vbNewLine _
                                & "WHERE A.TRANS_TYPE IN (1,2) AND TO_CHAR(A.DUE_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & TransactionDate.ToShortDateString & "', 'MM-DD-YYYY'), 'MM-YYYY') AND A.ID_NUMBER = '" & IDNumber & "'" & vbNewLine _
                                & "ORDER BY A.ID_NUMBER, B.INV_DM_CM, A.CHARGE_TYPE) " & vbNewLine _
                                & "GROUP BY ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSTLNoticeP2PC2CDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetSTLNoticeP2PC2CDetails(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr

                    Dim item As New STLNoticeNew
                    item.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("FULL_NAME").ToString()))
                    item.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                    item.ParticularsBillType = .Item("REMARKS").ToString()
                    item.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                    item.WESMBillInv = .Item("inv_dm_cm").ToString()
                    item.Energy = If(String.IsNullOrEmpty(.Item("ENERGY").ToString()), 0, CDec(.Item("ENERGY").ToString()))
                    item.VAT = If(String.IsNullOrEmpty(.Item("VAT").ToString()), 0, CDec(.Item("VAT").ToString()))
                    item.MFAndVAT = If(String.IsNullOrEmpty(.Item("MF").ToString()), 0, CDec(.Item("MF").ToString())) + If(String.IsNullOrEmpty(.Item("MFVAT").ToString()), 0, CDec(.Item("MFVAT").ToString()))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSTLNoticeCollectionsRemittances(ByVal CollectionAllocationDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim Ret As New List(Of STLNoticeNew)
        Dim Report As New DataReport

        Try

            Dim SQL As String = "SELECT A.ID_NUMBER, A.PARTICIPANT_ID, A.FULL_NAME, A.BILLING_PERIOD, A.REMARKS, A.PAY_COLL_TYPE, " & vbNewLine _
                                    & "A.DUE_DATE, A.AM_REF_NO, SUM(A.AMOUNT) AS AMOUNT, A.ALLOCATION_DATE, 1 AS TRANS_TYPE, A.SORTCOLUMN " & vbNewLine _
                              & "FROM AM_STL_NOTICE_NEW_COLLECT_VIEW A " & vbNewLine _
                              & "WHERE TO_CHAR(A.ALLOCATION_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY'), 'MM-YYYY') AND A.ID_NUMBER = '" & IDNumber & "' " & vbNewLine _
                              & "GROUP BY A.ID_NUMBER, A.PARTICIPANT_ID, A.FULL_NAME, A.BILLING_PERIOD, A.REMARKS, A.PAY_COLL_TYPE, A.DUE_DATE, A.AM_REF_NO, A.ALLOCATION_DATE, A.SORTCOLUMN  " & vbNewLine _
                              & "UNION ALL " & vbNewLine _
                              & "SELECT A.ID_NUMBER, A.PARTICIPANT_ID, A.FULL_NAME, A.BILLING_PERIOD, A.REMARKS, A.PAY_COLL_TYPE, " & vbNewLine _
                                    & "A.DUE_DATE, A.AM_REF_NO, SUM(A.AMOUNT) AS AMOUNT, A.ALLOCATION_DATE, 3 AS TRANS_TYPE, A.SORTCOLUMN " & vbNewLine _
                              & "FROM AM_STL_NOTICE_NEW_DDOWN_VIEW A " & vbNewLine _
                              & "WHERE TO_CHAR(A.ALLOCATION_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY'), 'MM-YYYY') AND A.ID_NUMBER = '" & IDNumber & "' " & vbNewLine _
                              & "GROUP BY A.ID_NUMBER, A.PARTICIPANT_ID, A.FULL_NAME, A.BILLING_PERIOD, A.REMARKS, A.PAY_COLL_TYPE, A.DUE_DATE, A.AM_REF_NO, A.ALLOCATION_DATE, A.SORTCOLUMN " & vbNewLine _
                              & "UNION ALL " & vbNewLine _
                              & "SELECT B.ID_NUMBER, B.PARTICIPANT_ID, B.FULL_NAME, B.BILLING_PERIOD, B.REMARKS, B.PAY_COLL_TYPE, " & vbNewLine _
                                    & "B.DUE_DATE, B.INV_DM_CM, SUM(B.PAYMENT_AMOUNT) AS AMOUNT, B.REMITTANCE_DATE, 2 AS TRANS_TYPE, B.SORTCOLUMN " & vbNewLine _
                              & "FROM AM_STL_NOTICE_NEW_REMITT_VIEW B " & vbNewLine _
                              & "WHERE TO_CHAR(B.REMITTANCE_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY'), 'MM-YYYY') AND B.ID_NUMBER = '" & IDNumber & "' " & vbNewLine _
                              & "GROUP BY B.ID_NUMBER, B.PARTICIPANT_ID, B.FULL_NAME, B.BILLING_PERIOD, B.REMARKS, B.PAY_COLL_TYPE, B.DUE_DATE, B.INV_DM_CM, B.REMITTANCE_DATE, B.SORTCOLUMN "
            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If
            Ret = Me.GetSTLNoticeCollectRemittDetails(Report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not Report.ReturnedIDatareader.IsClosed Then
                Report.ReturnedIDatareader.Close()
            End If
        End Try

        Return Ret
    End Function

    Public Function GetPaymentSummaryDetailsTransfer(ByVal CollectionAllocationDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim Ret As New List(Of STLNoticeNew)
        Dim Report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, 2 AS TRANS_TYPE FROM AM_STL_NOTICE_NEW_TRANSFER_TO A " & _
                                "WHERE A.REMITTANCE_DATE = TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY') " & vbNewLine _
                              & "And A.ID_NUMBER = '" & IDNumber & "'"

            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If
            Ret = Me.GetSTLNoticeTransfer(Report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not Report.ReturnedIDatareader.IsClosed Then
                Report.ReturnedIDatareader.Close()
            End If
        End Try

        Return Ret
    End Function

    Public Function GetPaymentSummaryDetails(ByVal CollectionAllocationDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim Ret As New List(Of STLNoticeNew)
        Dim Report As New DataReport

        Try

            Dim SQL As String = "SELECT B.ID_NUMBER, B.PARTICIPANT_ID, B.FULL_NAME, B.BILLING_PERIOD, B.REMARKS, B.PAY_COLL_TYPE, " & vbNewLine _
                                    & "B.DUE_DATE, B.INV_DM_CM AS AM_REF_NO, SUM(B.PAYMENT_AMOUNT) AS AMOUNT, B.REMITTANCE_DATE, 2 AS TRANS_TYPE, B.SORTCOLUMN " & vbNewLine _
                              & "FROM AM_STL_NOTICE_NEW_REMITT_VIEW B " & vbNewLine _
                              & "WHERE B.REMITTANCE_DATE = TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY') AND B.ID_NUMBER = '" & IDNumber & "' " & vbNewLine _
                              & "GROUP BY B.ID_NUMBER, B.PARTICIPANT_ID, B.FULL_NAME, B.BILLING_PERIOD, B.REMARKS, B.PAY_COLL_TYPE, B.DUE_DATE, B.INV_DM_CM, B.REMITTANCE_DATE, B.SORTCOLUMN"


            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If
            Ret = Me.GetPaymentSummaryDetails(Report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not Report.ReturnedIDatareader.IsClosed Then
                Report.ReturnedIDatareader.Close()
            End If
        End Try

        Return Ret
    End Function

    Private Function GetPaymentSummaryDetails(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim STLNoticeList As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Using STLNotice As New STLNoticeNew
                        STLNotice.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                  CStr(.Item("FULL_NAME").ToString()))
                        STLNotice.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                        STLNotice.ParticularsBillType = .Item("REMARKS").ToString()
                        STLNotice.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                        STLNotice.WESMBillInv = .Item("AM_REF_NO").ToString()
                        STLNotice.CollPayAllocDate = CDate(.Item("REMITTANCE_DATE").ToString())
                        STLNotice.TransType = CInt(.Item("TRANS_TYPE").ToString())
                        STLNotice.IndexSorting = CInt(.Item("SORTCOLUMN").ToString)
                        Select Case CStr(.Item("PAY_COLL_TYPE").ToString())
                            Case EnumCollectionType.Energy.ToString,
                                EnumCollectionType.WithholdingTaxonEnergy.ToString,
                                EnumPaymentNewType.Energy.ToString,
                                EnumPaymentNewType.WithholdingTaxOnEnergy.ToString

                                STLNotice.ParticularsChargeType = "Energy"
                                STLNotice.Energy += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.VatOnEnergy.ToString,
                                EnumPaymentNewType.VatOnEnergy.ToString

                                STLNotice.ParticularsChargeType = "VAT"
                                STLNotice.VAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.DefaultInterestOnEnergy.ToString(),
                                EnumPaymentNewType.DefaultInterestOnEnergy.ToString()

                                STLNotice.ParticularsChargeType = "Def. Int."
                                STLNotice.DefaultOnEnergy += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.MarketFees.ToString,
                                EnumCollectionType.VatOnMarketFees.ToString,
                                EnumPaymentNewType.MarketFees.ToString,
                                EnumPaymentNewType.VatOnMarketFees.ToString

                                STLNotice.ParticularsChargeType = "MF"
                                STLNotice.MFAndVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.WithholdingTaxOnMF.ToString,
                                 EnumPaymentNewType.WithholdingTaxOnMF.ToString

                                STLNotice.ParticularsChargeType = "MF-Wtax"
                                STLNotice.MFAndVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.WithholdingVatOnMF.ToString,
                                 EnumPaymentNewType.WithholdingVatOnMF.ToString

                                STLNotice.ParticularsChargeType = "MF-Wvat"
                                STLNotice.MFAndVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.DefaultInterestOnMF.ToString,
                                EnumCollectionType.DefaultInterestOnVatOnMF.ToString,
                                EnumCollectionType.WithholdingTaxOnDefaultInterest.ToString,
                                EnumCollectionType.WithholdingVatOnDefaultInterest.ToString,
                                EnumPaymentNewType.DefaultInterestOnMF.ToString,
                                EnumPaymentNewType.DefaultInterestOnVatOnMF.ToString,
                                EnumPaymentNewType.WithholdingTaxOnDefaultInterest.ToString,
                                EnumPaymentNewType.WithholdingVatOnDefaultInterest.ToString

                                STLNotice.ParticularsChargeType = "Def. Int."
                                STLNotice.DefaultOnMFwithVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.TransferToExcessCollection.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Excess Collection"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.AppliedHeldCollection.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Applied Held Collection"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToHeldCollection.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Transfer to held collection"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToReplenishment.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Replenishment of prudential"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToPRDrawDown.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Draw down of prudential"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToPEMCAccount.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Transfer to PEMC account"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumPaymentNewType.FitEnergy.ToString, EnumPaymentNewType.FitMF.ToString
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString())
                        End Select
                        STLNoticeList.Add(STLNotice)
                    End Using
                End With
            End While
            result = STLNoticeList
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function


    Private Function GetSTLNoticeCollectRemittDetails(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim STLNoticeList As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Using STLNotice As New STLNoticeNew
                        STLNotice.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                  CStr(.Item("FULL_NAME").ToString()))                        
                        STLNotice.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                        STLNotice.ParticularsBillType = .Item("REMARKS").ToString()                        
                        STLNotice.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                        STLNotice.WESMBillInv = .Item("AM_REF_NO").ToString()
                        STLNotice.CollPayAllocDate = CDate(.Item("ALLOCATION_DATE").ToString())
                        STLNotice.TransType = CInt(.Item("TRANS_TYPE").ToString())
                        STLNotice.IndexSorting = CInt(.Item("SORTCOLUMN").ToString)
                        Select Case CStr(.Item("PAY_COLL_TYPE").ToString())
                            Case EnumCollectionType.Energy.ToString,
                                EnumCollectionType.WithholdingTaxonEnergy.ToString,
                                EnumPaymentNewType.Energy.ToString,
                                EnumPaymentNewType.WithholdingTaxOnEnergy.ToString

                                STLNotice.ParticularsChargeType = "Energy"
                                STLNotice.Energy += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.VatOnEnergy.ToString,
                                EnumPaymentNewType.VatOnEnergy.ToString

                                STLNotice.ParticularsChargeType = "VAT"
                                STLNotice.VAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.DefaultInterestOnEnergy.ToString(),
                                EnumPaymentNewType.DefaultInterestOnEnergy.ToString()

                                STLNotice.ParticularsChargeType = "Def. Int."
                                STLNotice.DefaultOnEnergy += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.MarketFees.ToString,
                                EnumCollectionType.VatOnMarketFees.ToString,
                                EnumPaymentNewType.MarketFees.ToString,
                                EnumPaymentNewType.VatOnMarketFees.ToString

                                STLNotice.ParticularsChargeType = "MF"
                                STLNotice.MFAndVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.WithholdingTaxOnMF.ToString,
                                 EnumPaymentNewType.WithholdingTaxOnMF.ToString

                                STLNotice.ParticularsChargeType = "MF-Wtax"
                                STLNotice.MFAndVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.WithholdingVatOnMF.ToString,
                                 EnumPaymentNewType.WithholdingVatOnMF.ToString

                                STLNotice.ParticularsChargeType = "MF-Wvat"
                                STLNotice.MFAndVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.DefaultInterestOnMF.ToString,
                                EnumCollectionType.DefaultInterestOnVatOnMF.ToString,
                                EnumCollectionType.WithholdingTaxOnDefaultInterest.ToString,
                                EnumCollectionType.WithholdingVatOnDefaultInterest.ToString,
                                EnumPaymentNewType.DefaultInterestOnMF.ToString,
                                EnumPaymentNewType.DefaultInterestOnVatOnMF.ToString,
                                EnumPaymentNewType.WithholdingTaxOnDefaultInterest.ToString,
                                EnumPaymentNewType.WithholdingVatOnDefaultInterest.ToString

                                STLNotice.ParticularsChargeType = "Def. Int."
                                STLNotice.DefaultOnMFwithVAT += CDec(.Item("AMOUNT").ToString())
                            Case EnumCollectionType.TransferToExcessCollection.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Excess Collection"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.AppliedHeldCollection.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Applied Held Collection"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToHeldCollection.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Transfer to held collection"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToReplenishment.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Replenishment of prudential"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToPRDrawDown.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Draw down of prudential"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumCollectionType.TransferToPEMCAccount.ToString
                                STLNotice.ParticularsChargeType = ""
                                STLNotice.BillingPeriod = "Transfer to PEMC account"
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString()) * -1
                            Case EnumPaymentNewType.FitEnergy.ToString, EnumPaymentNewType.FitMF.ToString
                                STLNotice.Others += CDec(.Item("AMOUNT").ToString())
                        End Select                        
                        STLNoticeList.Add(STLNotice)
                    End Using
                End With
            End While
            result = STLNoticeList
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSTLNoticeTransfer(ByVal CollectionAllocationDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim Ret As New List(Of STLNoticeNew)
        Dim Report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, 2 AS TRANS_TYPE FROM AM_STL_NOTICE_NEW_TRANSFER_TO A " & _
                                "WHERE TO_CHAR(A.REMITTANCE_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY'), 'MM-YYYY') " & vbNewLine _
                              & "And A.ID_NUMBER = '" & IDNumber & "'"

            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If
            Ret = Me.GetSTLNoticeTransfer(Report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not Report.ReturnedIDatareader.IsClosed Then
                Report.ReturnedIDatareader.Close()
            End If
        End Try

        Return Ret
    End Function

    Private Function GetSTLNoticeTransfer(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim STLNoticeList As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Using STLNotice As New STLNoticeNew
                        STLNotice.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                  CStr(.Item("FULL_NAME").ToString()))
                        STLNotice.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                        STLNotice.ParticularsBillType = .Item("REMARKS").ToString()
                        STLNotice.ParticularsChargeType = .Item("PAY_COLL_TYPE").ToString()
                        STLNotice.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                        STLNotice.WESMBillInv = .Item("INV_DM_CM").ToString()
                        STLNotice.CollPayAllocDate = CDate(.Item("REMITTANCE_DATE").ToString())
                        STLNotice.TransType = CInt(.Item("TRANS_TYPE").ToString())
                        STLNotice.Others = CDec(.Item("PAYMENT_AMOUNT").ToString())
                        STLNoticeList.Add(STLNotice)
                    End Using
                End With
            End While
            result = STLNoticeList
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSTLNoticePRRefund(ByVal CollectionAllocationDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim Ret As New List(Of STLNoticeNew)
        Dim Report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, 2 AS TRANS_TYPE FROM AM_STL_NOTICE_NEW_PR_REF_VIEW A " & _
                                "WHERE TO_CHAR(A.REMITTANCE_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY'), 'MM-YYYY') " & vbNewLine _
                              & "And A.ID_NUMBER = '" & IDNumber & "'"

            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If
            Ret = Me.GetSTLNoticePRRefund(Report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not Report.ReturnedIDatareader.IsClosed Then
                Report.ReturnedIDatareader.Close()
            End If
        End Try

        Return Ret
    End Function

    Private Function GetSTLNoticePRRefund(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim STLNoticeList As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Using STLNotice As New STLNoticeNew
                        STLNotice.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()),
                                                  CStr(.Item("FULL_NAME").ToString()))
                        STLNotice.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                        STLNotice.ParticularsBillType = .Item("REMARKS").ToString()
                        STLNotice.ParticularsChargeType = .Item("PAY_COLL_TYPE").ToString()
                        STLNotice.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                        STLNotice.WESMBillInv = .Item("INV_DM_CM").ToString()
                        STLNotice.CollPayAllocDate = CDate(.Item("REMITTANCE_DATE").ToString())
                        STLNotice.TransType = CInt(.Item("TRANS_TYPE").ToString())
                        STLNotice.Others = CDec(.Item("PAYMENT_AMOUNT").ToString())
                        STLNoticeList.Add(STLNotice)
                    End Using
                End With
            End While
            result = STLNoticeList
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSTLNoticeWHTaxCertif(ByVal CollectionAllocationDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim Ret As New List(Of STLNoticeNew)
        Dim Report As New DataReport

        Try
            Dim SQL As String = "SELECT A.*, 2 AS TRANS_TYPE FROM AM_STL_NOTICE_NEW_WHTAXCERTIFCOL_VIEW A " &
                                "WHERE TO_CHAR(A.REMITTANCE_DATE, 'MM-YYYY') = TO_CHAR(TO_DATE('" & FormatDateTime(CollectionAllocationDate, DateFormat.ShortDate) & "', 'MM-DD-YYYY'), 'MM-YYYY') " & vbNewLine _
                              & "And A.ID_NUMBER = '" & IDNumber & "'"

            Report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If Report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(Report.ErrorMessage)
            End If
            Ret = Me.GetSTLNoticeWHTaxCertif(Report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not Report.ReturnedIDatareader.IsClosed Then
                Report.ReturnedIDatareader.Close()
            End If
        End Try

        Return Ret
    End Function

    Private Function GetSTLNoticeWHTaxCertif(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim STLNoticeList As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Using STLNotice As New STLNoticeNew
                        STLNotice.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()),
                                                  CStr(.Item("FULL_NAME").ToString()))
                        STLNotice.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                        STLNotice.ParticularsBillType = .Item("PAY_COLL_TYPE").ToString()
                        STLNotice.ParticularsChargeType = .Item("REMARKS").ToString()
                        STLNotice.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                        STLNotice.WESMBillInv = .Item("INV_DM_CM").ToString()
                        STLNotice.CollPayAllocDate = CDate(.Item("REMITTANCE_DATE").ToString())
                        STLNotice.TransType = CInt(.Item("TRANS_TYPE").ToString())
                        STLNotice.Energy = CDec(.Item("AMOUNT").ToString())
                        STLNoticeList.Add(STLNotice)
                    End Using
                End With
            End While
            result = STLNoticeList
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetSTLNoticeEB(ByVal TransactionDate As Date, ByVal IDNumber As String) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim report As New DataReport

        Try

            Dim Sql As String = "SELECT ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE, " & vbNewLine _
                                     & "SUM(CASE WHEN CHARGE_TYPE = 'E' THEN ENDING_BALANCE ELSE 0 END) ENERGY, " & vbNewLine _
                                     & "SUM(CASE WHEN CHARGE_TYPE = 'EV' THEN ENDING_BALANCE ELSE 0 END) VAT, " & vbNewLine _
                                     & "SUM(CASE WHEN CHARGE_TYPE = 'MF' THEN ENDING_BALANCE ELSE 0 END) MF, " & vbNewLine _
                                     & "SUM(CASE WHEN CHARGE_TYPE = 'MFV' THEN ENDING_BALANCE ELSE 0 END) MFVAT " & vbNewLine _
                             & "FROM (SELECT A.ID_NUMBER, A.ID_TYPE, A.GROUP_NO, D.PARTICIPANT_ID, D.FULL_NAME, A.DUE_DATE, A.BILLING_PERIOD||' - '||TO_CHAR(A.DUE_DATE,'MON. DD YYYY') AS BILLING_PERIOD, " & vbNewLine _
                                          & "B.REMARKS, A.INV_DM_CM, '' AS PARTICULARS_CHARGETYPE, A.CHARGE_TYPE, A.ENDING_BALANCE " & vbNewLine _
                                   & "FROM AM_WESM_BILL_SUMMARY A " & vbNewLine _
                                   & "LEFT JOIN (SELECT DISTINCT INVOICE_NO, BILLING_PERIOD, REMARKS FROM AM_WESM_BILL) B ON B.INVOICE_NO = A.INV_DM_CM AND B.BILLING_PERIOD = A.BILLING_PERIOD " & vbNewLine _
                                   & "LEFT JOIN AM_CALENDAR_BP C ON C.BILLING_PERIOD = A.BILLING_PERIOD " & vbNewLine _
                                   & "LEFT JOIN AM_PARTICIPANTS D ON D.ID_NUMBER = A.ID_NUMBER " & vbNewLine _
                                   & "WHERE (A.ENDING_BALANCE <> 0 AND A.ID_NUMBER = '" & IDNumber & "' AND A.DUE_DATE <=TO_DATE('" & TransactionDate & "', 'mm/dd/yyyy')) " & vbNewLine _
                                   & "OR (A.ENDING_BALANCE = 0 AND A.ID_NUMBER = '" & IDNumber & "' AND A.DUE_DATE <=TO_DATE('" & TransactionDate & "', 'mm/dd/yyyy'))) " & vbNewLine _
                                   & "GROUP BY ID_NUMBER, PARTICIPANT_ID, FULL_NAME, DUE_DATE, BILLING_PERIOD, REMARKS, INV_DM_CM, PARTICULARS_CHARGETYPE " & vbNewLine _
                                   & "ORDER BY DUE_DATE, BILLING_PERIOD, INV_DM_CM"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(Sql)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSTLNoticeEBDetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not report.ReturnedIDatareader.IsClosed Then
                report.ReturnedIDatareader.Close()
            End If
        End Try
        Return result
    End Function

    Private Function GetSTLNoticeEBDetails(ByVal dr As IDataReader) As List(Of STLNoticeNew)
        Dim result As New List(Of STLNoticeNew)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr

                    Dim item As New STLNoticeNew
                    item.AMParticipants = New AMParticipants(CStr(.Item("ID_NUMBER").ToString()), CStr(.Item("PARTICIPANT_ID").ToString()), _
                                                       CStr(.Item("FULL_NAME").ToString()))
                    item.BillingPeriod = .Item("BILLING_PERIOD").ToString()
                    item.ParticularsBillType = .Item("REMARKS").ToString()
                    item.ParticularsChargeType = .Item("PARTICULARS_CHARGETYPE").ToString()
                    item.OrigDueDate = CDate(.Item("DUE_DATE").ToString())
                    item.WESMBillInv = .Item("INV_DM_CM").ToString()
                    item.Energy = If(String.IsNullOrEmpty(.Item("ENERGY").ToString()), 0, CDec(.Item("ENERGY").ToString()))
                    item.VAT = If(String.IsNullOrEmpty(.Item("VAT").ToString()), 0, CDec(.Item("VAT").ToString()))
                    item.MFAndVAT = If(String.IsNullOrEmpty(.Item("MF").ToString()), 0, CDec(.Item("MF").ToString())) + If(String.IsNullOrEmpty(.Item("MFVAT").ToString()), 0, CDec(.Item("MFVAT").ToString()))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function



#End Region

#Region "Get Checks / Check Voucher Main and Details"
    Public Function GetChecksOutstanding() As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECKS WHERE " & _
                  "STATUS <> 4 OR STATUS <> 1 OR STATUS <> 5 OR STATUS <> 6"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetCheck(ByVal DateFrom As Date, ByVal DateTo As Date) As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECKS WHERE " & _
                  "TRANSACTION_DATE BETWEEN " & _
                  "TO_DATE('" & FormatDateTime(DateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                  "AND TO_DATE('" & FormatDateTime(DateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetCheckCleared(ByVal DateFrom As Date, ByVal DateTo As Date) As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECKS WHERE " & _
                  "DATE_CLEARED BETWEEN " & _
                  "TO_DATE('" & FormatDateTime(DateFrom, DateFormat.ShortDate) & " 12:00:00 AM','MM/DD/YYYY HH:MI:SS AM') " & _
                  "AND TO_DATE('" & FormatDateTime(DateTo, DateFormat.ShortDate) & " 11:59:59 PM','MM/DD/YYYY HH:MI:SS PM') "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetCheckReleased(ByVal Released As Boolean) As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            If Released = False Then
                SQL = "SELECT * FROM AM_CHECKS WHERE DATE_RELEASED IS NULL"
            Else
                SQL = "SELECT * FROM AM_CHECKS WHERE DATE_RELEASED IS NOT NULL"
            End If



            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetCheckCleared(ByVal NotCleared As Boolean) As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            If NotCleared = False Then
                SQL = "SELECT * FROM AM_CHECKS WHERE DATE_CLEARED IS NOT NULL"
            Else
                SQL = "SELECT * FROM AM_CHECKS WHERE DATE_CLEARED IS NULL"
            End If


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetCheck(ByVal IDNumber As String) As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECKS WHERE " & _
                  "ID_NUMBER = '" & IDNumber & "'"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetCheck(ByVal CCVNumber As String, ByVal isCheckNo As Boolean) As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECKS WHERE "

            If isCheckNo = True Then
                SQL &= "CHECK_NUMBER = '" & CCVNumber & "'"
            Else
                SQL &= "CV_NUMBER = '" & CCVNumber & "'"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Public Function GetCheck(ByVal lstStatus As List(Of EnumCheckStatus)) As List(Of Check)
        Dim result As New List(Of Check)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECKS WHERE STATUS IN ("

            Dim ctr As Integer = 1
            For Each itmStatus In lstStatus
                If ctr = lstStatus.Count Then
                    SQL &= itmStatus & ")"
                Else
                    SQL &= itmStatus & ","
                End If
                ctr += 1
            Next

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            Dim lstParticipants = Me.GetAMParticipants()

            result = Me.GetCheck(report.ReturnedIDatareader, lstParticipants)

            If result.Count <> 0 Then
                'Check Check voucher Numbers
                Dim chkVoucherNo = (From x In result _
                                    Where x.VoucherNumber <> "" _
                                    Select x.VoucherNumber).ToList

                If chkVoucherNo.Count <> 0 Then
                    Dim _Vouchers = Me.GetCheckVoucherMain(chkVoucherNo)

                    'Combine Check and Check Vouchers
                    For Each itmVoucher In _Vouchers
                        Dim _itmVoucher = itmVoucher

                        'To update
                        Dim updateCheck = (From x In result _
                                           Where x.VoucherNumber = _itmVoucher.VoucherNumber _
                                           Select x).FirstOrDefault

                        updateCheck.CheckVoucher = itmVoucher
                    Next
                End If
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result

    End Function

    Private Function GetCheckVoucherMain(ByVal lstCVNumber As List(Of String)) As List(Of CheckVoucherMain)
        Dim result As New List(Of CheckVoucherMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECK_VOUCHER_MAIN WHERE " & _
                  "CV_NUMBER IN ("

            Dim recCtr As Long = 0
            For Each itmCVnumber In lstCVNumber
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmCVnumber & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR CV_NUMBER IN ("
                    End If
                    SQL &= itmCVnumber & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            Dim lstParticipants = Me.GetAMParticipants()

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            result = Me.GetCheckVoucherMain(report.ReturnedIDatareader, lstParticipants)

            'Get Check Voucher Details
            Dim _CVDetails = Me.GetCheckVoucherDetails(lstCVNumber)

            For Each itmResult In result
                Dim _itmResult = itmResult
                Dim CVDetails = (From x In _CVDetails _
                                 Where x.VoucherNumber = _itmResult.VoucherNumber _
                                 Select x).ToList

                itmResult.VoucherDetails = CVDetails
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCheckVoucherDetails(ByVal lstCVNumber As List(Of String)) As List(Of CheckVoucherDetails)
        Dim result As New List(Of CheckVoucherDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_CHECK_VOUCHER_DETAILS WHERE " & _
                  "CV_NUMBER IN ("

            Dim recCtr As Long = 0
            For Each itmCVNumber In lstCVNumber
                If recCtr Mod 1000 <> 0 Then
                    SQL &= itmCVNumber & ", "
                Else
                    If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                        SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR CV_NUMBER IN ("
                    End If
                    SQL &= itmCVNumber & ", "
                End If
                recCtr += 1
            Next
            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

            Dim lstParticipants = Me.GetAMParticipants()

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            result = Me.GetCheckVoucherDetails(report.ReturnedIDatareader, lstParticipants)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCheckVoucherMain(ByVal dr As IDataReader, ByVal lstParticipants As List(Of AMParticipants)) As List(Of CheckVoucherMain)
        Dim result As New List(Of CheckVoucherMain)
        Dim index As Integer = 0

        Try
            While dr.Read
                index += 1
                With dr
                    Dim item As New CheckVoucherMain
                    item.VoucherNumber = CStr(.Item("CV_NUMBER"))
                    item.Participant = (From x In lstParticipants _
                                        Where x.IDNumber = CStr(.Item("ID_NUMBER")) _
                                        Select x).FirstOrDefault
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))
                    item.PreparedPosition = CStr(.Item("PREPARED_POSITION"))
                    item.CheckedBy = CStr(.Item("CHECKED_BY"))
                    item.CheckedPosition = CStr(.Item("CHECKED_POSITION"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.ApprovedPosition = CStr(.Item("APPROVED_POSITION"))
                    item.Particulars = CStr(.Item("PARTICULARS"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetCheckVoucherDetails(ByVal dr As IDataReader, ByVal lstParticipants As List(Of AMParticipants)) As List(Of CheckVoucherDetails)
        Dim result As New List(Of CheckVoucherDetails)
        Dim index As Integer = 0

        Try
            While dr.Read
                index += 1
                With dr
                    Dim item As New CheckVoucherDetails
                    item.VoucherNumber = CStr(.Item("CV_NUMBER"))
                    item.AccountCode = CStr(.Item("ACCOUNT_CODE"))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetCheck(ByVal dr As IDataReader, ByVal ParticipantList As List(Of AMParticipants)) As List(Of Check)
        Dim result As New List(Of Check)
        Dim index As Integer = 0

        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New Check
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.Participant = (From x In ParticipantList _
                                        Where x.IDNumber = CStr(.Item("ID_NUMBER")) _
                                        Select x).FirstOrDefault
                    item.BatchCode = CStr(.Item("BATCH_CODE"))
                    item.Amount = CDec(.Item("AMOUNT"))
                    item.CheckNumber = CStr(.Item("CHECK_NUMBER").ToString)
                    item.VoucherNumber = CStr(.Item("CV_NUMBER").ToString)
                    item.Status = CType(System.Enum.Parse(GetType(EnumCheckStatus), CStr(.Item("STATUS"))), EnumCheckStatus)
                    item.Remarks = CStr(.Item("REMARKS").ToString)
                    item.DateReleased = CStr(.Item("DATE_RELEASED").ToString)
                    item.DateCleared = CStr(.Item("DATE_CLEARED").ToString)                    
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Update Checks, Save Check vouchers"
    Public Sub UpdateChecksAndVoucher(ByVal CheckToUpdate As List(Of Check), ByVal StatusOfCheckUpdated As EnumCheckStatus)
        Dim ds As New DataSet
        Dim report As New DataReport
        Dim _lstSQL As New List(Of String)
        Dim SQL As String = ""

        Try
            Dim CheckVoucher As New DataTable
            CheckVoucher.TableName = "AM_CHECK_VOUCHER_MAIN"
            With CheckVoucher.Columns
                .Add("CV_NUMBER", GetType(String))
                .Add("ID_NUMBER", GetType(String))
                .Add("PARTICULARS", GetType(String))
                .Add("TRANSACTION_DATE", GetType(Date))
                .Add("PREPARED_BY", GetType(String))
                .Add("PREPARED_POSITION", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("CHECKED_POSITION", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("APPROVED_POSITION", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            ds.Tables.Add(CheckVoucher)

            Dim CVDetails As New DataTable
            CVDetails.TableName = "AM_CHECK_VOUCHER_DETAILS"
            With CVDetails.Columns
                .Add("CV_NUMBER", GetType(String))
                .Add("ACCOUNT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            ds.Tables.Add(CVDetails)


            For Each itmUpdateCheck In CheckToUpdate
                Dim mRow As DataRow
                mRow = CheckVoucher.NewRow

                Dim _GetCheckNumber = Me.GetInitializationTable("CHECKS")

                itmUpdateCheck.CheckNumber = CStr(_GetCheckNumber.LastSeqUsed + CDbl(itmUpdateCheck.CheckNumber))

                With itmUpdateCheck.CheckVoucher
                    mRow("CV_NUMBER") = .VoucherNumber
                    mRow("ID_NUMBER") = .Participant.IDNumber
                    mRow("TRANSACTION_DATE") = .TransactionDate
                    mRow("PARTICULARS") = itmUpdateCheck.Remarks
                    mRow("PREPARED_BY") = .PreparedBy
                    mRow("PREPARED_POSITION") = .PreparedPosition
                    mRow("CHECKED_BY") = .CheckedBy
                    mRow("CHECKED_POSITION") = .CheckedPosition
                    mRow("APPROVED_BY") = .ApprovedBy
                    mRow("APPROVED_POSITION") = .ApprovedPosition
                    mRow("UPDATED_BY") = Me.UserName
                End With
                CheckVoucher.Rows.Add(mRow)
                CheckVoucher.AcceptChanges()

                For Each itmCheckVoucher In itmUpdateCheck.CheckVoucher.VoucherDetails
                    Dim dRow As DataRow
                    dRow = CVDetails.NewRow

                    With itmCheckVoucher
                        dRow("CV_NUMBER") = .VoucherNumber
                        dRow("ACCOUNT_CODE") = .AccountCode
                        dRow("DEBIT") = .Debit
                        dRow("CREDIT") = .Credit
                        dRow("UPDATED_BY") = Me.UserName
                    End With
                    CVDetails.Rows.Add(dRow)
                    CVDetails.AcceptChanges()
                Next

                'Update Check Table
                SQL = "UPDATE AM_CHECKS SET CHECK_NUMBER  ='" & itmUpdateCheck.CheckNumber & "', CV_NUMBER = '" & itmUpdateCheck.VoucherNumber & "', " & _
                      "STATUS = '" & StatusOfCheckUpdated & "', UPDATED_DATE = TO_DATE('" & FormatDateTime(SystemDate, DateFormat.ShortDate) & "','MM/DD/YYYY') WHERE BATCH_CODE = '" & itmUpdateCheck.BatchCode & "' " & _
                      "AND ID_NUMBER = '" & itmUpdateCheck.Participant.IDNumber & "'"
                _lstSQL.Add(SQL)

                SQL = "UPDATE AM_INIT_TABLE SET LAST_SEQ_USED = '" & itmUpdateCheck.CheckNumber & "', UPDATED_DATE = TO_DATE('" & FormatDateTime(SystemDate, DateFormat.ShortDate) & "','MM/DD/YYYY') WHERE DOC_NAME = 'CHECKS' " & _
                      "AND LAST_SEQ_USED <> LAST_NO"
                _lstSQL.Add(SQL)
            Next

            report = Me.DataAccess.ExecuteSaveQuery(_lstSQL, ds)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)

        End Try
    End Sub

    Public Sub UpdateCancelledChecksAndVoucher(ByVal CheckToCancel As Check, ByVal CheckToInsert As Check, ByVal StatusOfCheckUpdated As EnumCheckStatus)
        Dim ds As New DataSet
        Dim report As New DataReport
        Dim _lstSQL As New List(Of String)
        Dim SQL As String = ""

        Try
            Dim CheckTable As New DataTable
            CheckTable.TableName = "AM_CHECKS"
            With CheckTable.Columns
                .Add("TRANSACTION_DATE", GetType(Date))
                .Add("ID_NUMBER", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("CHECK_NUMBER", GetType(String))
                .Add("CHECK_TYPE", GetType(EnumCheckType))
                .Add("CV_NUMBER", GetType(String))
                .Add("STATUS", GetType(EnumCheckStatus))
                .Add("REMARKS", GetType(String))
                .Add("BATCH_CODE", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            ds.Tables.Add(CheckTable)

            Dim CheckVoucher As New DataTable
            CheckVoucher.TableName = "AM_CHECK_VOUCHER_MAIN"
            With CheckVoucher.Columns
                .Add("CV_NUMBER", GetType(String))
                .Add("ID_NUMBER", GetType(Integer))
                .Add("TRANSACTION_DATE", GetType(Date))
                .Add("PREPARED_BY", GetType(String))
                .Add("PREPARED_POSITION", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("CHECKED_POSITION", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("APPROVED_POSITION", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            ds.Tables.Add(CheckVoucher)

            Dim CVDetails As New DataTable
            CVDetails.TableName = "AM_CHECK_VOUCHER_DETAILS"
            With CVDetails.Columns
                .Add("CV_NUMBER", GetType(String))
                .Add("ACCOUNT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
            End With
            ds.Tables.Add(CVDetails)

            Dim cInsert As DataRow
            cInsert = CheckTable.NewRow
            With CheckToInsert
                cInsert("TRANSACTION_DATE") = .TransactionDate
                cInsert("ID_NUMBER") = .Participant.IDNumber
                cInsert("AMOUNT") = .Amount
                cInsert("CHECK_TYPE") = .CheckType
                cInsert("CHECK_NUMBER") = .CheckNumber
                cInsert("CV_NUMBER") = .CheckVoucher.VoucherNumber
                cInsert("STATUS") = .Status
                cInsert("REMARKS") = .Remarks
                cInsert("BATCH_CODE") = .BatchCode
                cInsert("UPDATED_BY") = Me.UserName
            End With
            CheckTable.Rows.Add(cInsert)
            CheckTable.AcceptChanges()

            'Update Check Table
            SQL = "UPDATE AM_CHECKS SET REMARKS = '" & CheckToCancel.Remarks & "', STATUS  ='" & CheckToCancel.Status & "', UPDATED_BY = '" & Me.UserName & "', " & _
                  "UPDATED_DATE = TO_DATE('" & FormatDateTime(SystemDate, DateFormat.ShortDate) & "','MM/DD/YYYY') WHERE BATCH_CODE = '" & CheckToCancel.BatchCode & "' " & _
                  "AND ID_NUMBER = '" & CheckToCancel.Participant.IDNumber & "'"
            _lstSQL.Add(SQL)

            SQL = "UPDATE AM_INIT_TABLE SET LAST_SEQ_USED = '" & CheckToInsert.CheckNumber & "', UPDATED_DATE = TO_DATE('" & FormatDateTime(SystemDate, DateFormat.ShortDate) & "','MM/DD/YYYY') WHERE DOC_NAME = 'CHECKS' " & _
                  "AND LAST_SEQ_USED <> LAST_NO"
            _lstSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(_lstSQL, ds)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)

        End Try
    End Sub

    Public Sub UpdateCheckReleaseCleared(ByVal lstUpdateChecks As List(Of Check), ByVal isRelease As Boolean)
        Dim lstSQL As New List(Of String)
        Dim SQL As String = ""
        Dim report As New DataReport
        Try
            For Each itmUpdate In lstUpdateChecks
                With itmUpdate
                    If isRelease = True Then
                        SQL = "UPDATE AM_CHECKS SET DATE_RELEASED = TO_DATE('" & FormatDateTime(CDate(.DateReleased), DateFormat.ShortDate) & "', 'MM/DD/YYYY'), " & _
                              "STATUS = '" & EnumCheckStatus.Released & "' " & _
                              "WHERE ID_NUMBER = '" & .Participant.IDNumber & "' " & _
                              "AND BATCH_CODE = '" & .BatchCode & "' " & _
                              "AND STATUS = '" & .Status & "' " & _
                              "AND CHECK_NUMBER = '" & .CheckNumber & "' " & _
                              "AND CV_NUMBER = '" & .VoucherNumber & "'"
                        lstSQL.Add(SQL)
                    Else
                        SQL = "UPDATE AM_CHECKS SET DATE_CLEARED = TO_DATE('" & FormatDateTime(CDate(.DateCleared), DateFormat.ShortDate) & "', 'MM/DD/YYYY'), " & _
                              "STATUS = '" & EnumCheckStatus.Cleared & "' " & _
                              "WHERE ID_NUMBER = '" & .Participant.IDNumber & "' " & _
                              "AND BATCH_CODE = '" & .BatchCode & "' " & _
                              "AND STATUS = '" & .Status & "' " & _
                              "AND CHECK_NUMBER = '" & .CheckNumber & "' " & _
                              "AND CV_NUMBER = '" & .VoucherNumber & "'"
                        lstSQL.Add(SQL)
                    End If
                End With
            Next

            report = Me.DataAccess.ExecuteUpdateQueryBulk(lstSQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If


        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Save Check Voucher Main and Details"
    Public Sub SaveCheckVoucher(ByVal lstCheckVoucher As List(Of CheckVoucherMain))

        Dim ds As New DataSet
        Dim lstSQL As New List(Of String)
        Dim report As New DataReport
        Try

            Dim CVMain As New DataTable
            CVMain.TableName = "AM_CHECK_VOUCHER_MAIN"
            With CVMain.Columns
                .Add("CV_NUMBER", GetType(String))
                .Add("ID_NUMBER", GetType(Long))
                .Add("BATCH_CODE", GetType(String))
                .Add("TRANSACTION_DATE", GetType(Date))
                .Add("PREPARED_BY", GetType(String))
                .Add("PREPARED_POSITION", GetType(String))
                .Add("CHECKED_BY", GetType(String))
                .Add("CHECKED_POSITION", GetType(String))
                .Add("APPROVED_BY", GetType(String))
                .Add("APPROVED_POSITION", GetType(String))
                .Add("PARTICULARS", GetType(String))
                .Add("UPDATED_BY", GetType(String))
            End With
            ds.Tables.Add(CVMain)

            Dim CVDetails As New DataTable
            CVDetails.TableName = "AM_CHECK_VOUCHER_DETAILS"
            With CVDetails.Columns
                .Add("CV_NUMBER", GetType(String))
                .Add("ACCOUNT_CODE", GetType(String))
                .Add("DEBIT", GetType(Decimal))
                .Add("CREDIT", GetType(Decimal))
                .Add("UDPATED_BY", GetType(String))
            End With
            ds.Tables.Add(CVDetails)

            Dim GetBatchNo = Me.GetSequenceID("SEQ_AM_CHECK_VOUCHER_NO")

            For Each itmCheckVoucher In lstCheckVoucher
                Dim rMain As DataRow
                rMain = CVMain.NewRow

                With itmCheckVoucher
                    rMain("CV_NUMBER") = .VoucherNumber
                    rMain("ID_NUMBER") = .Participant.IDNumber
                    rMain("BATCH_CODE") = GetBatchNo
                    rMain("TRANSACTION_DATE") = .TransactionDate
                    rMain("PREPARED_BY") = .PreparedBy
                    rMain("PREPARED_POSITION") = .PreparedPosition
                    rMain("CHECKED_BY") = .CheckedBy
                    rMain("CHECKED_POSITION") = .CheckedPosition
                    rMain("APPROVED_BY") = .ApprovedBy
                    rMain("APPROVED_POSITION") = .ApprovedPosition
                    rMain("PARTICULARS") = .Particulars
                    rMain("UPDATED_BY") = Me.UserName
                End With

                'Voucher Details
                For Each itmCheckDetails In itmCheckVoucher.VoucherDetails
                    Dim rDetails As DataRow
                    rDetails = CVDetails.NewRow

                    With itmCheckDetails
                        rDetails("CV_NUMBER") = .VoucherNumber
                        rDetails("ACCOUNT_CODE") = .AccountCode
                        rDetails("DEBIT") = .Debit
                        rDetails("CREDIT") = .Credit
                        rDetails("UPDATED_BY") = Me.UserName
                    End With
                    CVDetails.Rows.Add(rDetails)
                    CVDetails.AcceptChanges()
                Next

                CVMain.Rows.Add(rMain)
                CVMain.AcceptChanges()
            Next

            report = Me.DataAccess.ExecuteSaveQuery(lstSQL, ds)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get/Save Initialization Table"
    Public Function GetInitializationTableList() As List(Of InitializationTable)
        Dim result As New List(Of InitializationTable)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_INIT_TABLE"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetInitializationTablelst(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetInitializationTable(ByVal DocType As String) As InitializationTable
        Dim result As New InitializationTable
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_INIT_TABLE WHERE DOC_NAME = '" & DocType & "' AND " & _
                  "LAST_SEQ_USED <> LAST_NO"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetInitializationTable(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetInitializationTable(ByVal dr As IDataReader) As InitializationTable
        Dim result As New InitializationTable
        Dim index As Integer = 0

        Try
            While dr.Read
                With dr
                    result.BatchNo = CStr(.Item("BATCH_NO").ToString)
                    result.DocumentName = CStr(.Item("DOC_NAME").ToString)
                    result.InitialNo = CLng(.Item("INITIAL_NO"))
                    result.LastNo = CLng(.Item("LAST_NO"))
                    result.LastSeqUsed = CLng(.Item("LAST_SEQ_USED"))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetInitializationTablelst(ByVal dr As IDataReader) As List(Of InitializationTable)
        Dim result As New List(Of InitializationTable)
        Dim index As Integer = 0

        Try
            While dr.Read
                Dim item As New InitializationTable
                With dr
                    item.BatchNo = CStr(.Item("BATCH_NO").ToString)
                    item.DocumentName = CStr(.Item("DOC_NAME").ToString)
                    item.InitialNo = CLng(.Item("INITIAL_NO"))
                    item.LastNo = CLng(.Item("LAST_NO"))
                    item.LastSeqUsed = CLng(.Item("LAST_SEQ_USED"))
                End With
                result.Add(item)
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Sub SaveInitializationTable(ByVal ToSave As InitializationTable)
        Dim ds As New DataSet
        Dim lstSQL As New List(Of String)
        Dim report As New DataReport
        Try

            Dim dtMain As New DataTable
            dtMain.TableName = "AM_INIT_TABLE"
            With dtMain.Columns
                .Add("DOC_NAME", GetType(String))
                .Add("LAST_NO", GetType(Integer))
                .Add("INITIAL_NO", GetType(Integer))
                .Add("LAST_SEQ_USED", GetType(Integer))
                .Add("BATCH_NO", GetType(String))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With
            dtMain.AcceptChanges()

            Dim dr As DataRow
            dr = dtMain.NewRow

            With ToSave
                dr("DOC_NAME") = .DocumentName
                dr("LAST_NO") = .LastNo
                dr("INITIAL_NO") = .InitialNo

                If .InitialNo = 0 Then
                    dr("LAST_SEQ_USED") = .InitialNo
                Else
                    dr("LAST_SEQ_USED") = .InitialNo - 1
                End If

                dr("BATCH_NO") = "CH-" & Me.GetSequenceID("SEQ_AM_CHECK_INIT")
                dr("UPDATED_BY") = Me.UserName
                dr("UPDATED_DATE") = SystemDate
            End With
            dtMain.Rows.Add(dr)
            dtMain.AcceptChanges()

            ds.Tables.Add(dtMain)
            ds.AcceptChanges()
            report = Me.DataAccess.ExecuteSaveQuery(lstSQL, ds)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

#End Region

#Region "Get/Save AM_BANK_RECON Tables"
    Public Function GetBankRecon(ByVal selMonth As Integer, ByVal selYear As Integer) As List(Of BankReconMain)
        Dim result As New List(Of BankReconMain)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            SQL = "SELECT * FROM AM_BANK_RECON_MAIN " & _
                  "WHERE TRANSACTION_DATE BETWEEN TO_DATE( '1-" & MonthName(selMonth, True) & "-" & selYear & " 12:00:00 AM','DD-MM-YYYY HH:MI:SS AM') " & _
                  "AND TO_DATE( '" & Date.DaysInMonth(selYear, selMonth) & "-" & MonthName(selMonth, True) & "-" & selYear & " 11:59:59 PM', 'DD-MM-YYYY HH:MI:SS PM')"


            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetBankRecon(report.ReturnedIDatareader)

            If result.Count <> 0 Then
                SQL = "SELECT * FROM AM_BANK_RECON_DETAILS " & _
                      "WHERE BATCH_CODE IN ("

                Dim bankDetails As List(Of BankReconDetails)

                Dim recCtr As Long = 0
                For Each itmResult In result
                    If recCtr Mod 1000 <> 0 Then
                        SQL &= "'" & itmResult.BatchCode & "', "
                    Else
                        If recCtr Mod 1000 = 0 And recCtr <> 0 Then
                            SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ") OR BATCH_CODE IN ("
                        End If
                        SQL &= "'" & itmResult.BatchCode & "', "
                    End If
                    recCtr += 1
                Next
                SQL = Trim(Mid(SQL, 1, Len(SQL) - 2)) & ")"

                report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)

                If report.ErrorMessage.Length <> 0 Then
                    Throw New ApplicationException(report.ErrorMessage)
                End If

                bankDetails = Me.GetBankReconDetails(report.ReturnedIDatareader)

                For Each itmResult In result
                    Dim _itmResult = itmResult

                    'Get Details
                    Dim getDetails = (From x In bankDetails _
                                      Where x.BatchCode = _itmResult.BatchCode _
                                      Select x).ToList
                    _itmResult.lstBankReconDetails.AddRange(getDetails)
                Next
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetBankRecon(ByVal dr As IDataReader) As List(Of BankReconMain)
        Dim result As New List(Of BankReconMain)
        Dim index As Integer = 0

        Try
            While dr.Read
                Dim item As New BankReconMain
                With dr
                    item.BatchCode = CStr(.Item("BATCH_CODE"))
                    item.BeginningBalance = CDec(.Item("BEGINNING_BALANCE"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.BankEndingBalance = CDec(.Item("BANK_ENDING_BALANCE"))
                    item.BankCharges = CDec(.Item("BANK_CHARGES"))
                    item.BookEndingbalance = CDec(.Item("BOOK_ENDING_BALANCE"))
                    item.Status = CType(System.Enum.Parse(GetType(EnumStatus), CStr(.Item("STATUS"))), EnumStatus)
                    item.BankReconType = CType(System.Enum.Parse(GetType(EnumBankReconType), CStr(.Item("TRANSACTION_TYPE"))), EnumBankReconType)
                End With
                result.Add(item)
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetBankReconDetails(ByVal dr As IDataReader) As List(Of BankReconDetails)
        Dim result As New List(Of BankReconDetails)
        Dim index As Integer = 0

        Try
            While dr.Read
                Dim item As New BankReconDetails
                With dr
                    item.BatchCode = CStr(.Item("BATCH_CODE"))
                    item.TransactionType = CType(System.Enum.Parse(GetType(EnumBankReconTransactionType), CStr(.Item("TRANSACTION_TYPE"))), EnumBankReconTransactionType)
                    item.Amount = CDec(.Item("AMOUNT"))
                End With
                result.Add(item)
            End While
        Catch ex As Exception
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try

        Return result
    End Function

    Public Sub SaveBankReconStatement(ByVal lstBankRecon As List(Of BankReconMain))

        Dim ds As New DataSet
        Dim lstSQL As New List(Of String)
        Dim report As New DataReport
        Try

            Dim dtMain As New DataTable
            dtMain.TableName = "AM_BANK_RECON_MAIN"
            With dtMain.Columns
                .Add("BATCH_CODE", GetType(String))
                .Add("TRANSACTION_DATE", GetType(Date))
                .Add("TRANSACTION_TYPE", GetType(EnumBankReconType))
                .Add("BEGINNING_BALANCE", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("BANK_ENDING_BALANCE", GetType(Decimal))
                .Add("BOOK_ENDING_BALANCE", GetType(Decimal))
                .Add("BANK_CHARGES", GetType(Decimal))
                .Add("STATUS", GetType(EnumStatus))
            End With
            dtMain.AcceptChanges()

            Dim dtDetails As New DataTable
            dtDetails.TableName = "AM_BANK_RECON_DETAILS"
            With dtDetails.Columns
                .Add("BATCH_CODE", GetType(String))
                .Add("TRANSACTION_TYPE", GetType(EnumBankReconTransactionType))
                .Add("AMOUNT", GetType(Decimal))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
            End With
            dtDetails.AcceptChanges()

            For Each itmBankRecon In lstBankRecon
                Dim drMain As DataRow
                drMain = dtMain.NewRow

                With itmBankRecon

                    Select Case .BankReconType
                        Case EnumBankReconType.NSS
                            .BatchCode = "BRNSS-" & Me.GetSequenceID("SEQ_AM_BANK_RECON_NSS")
                        Case EnumBankReconType.Prudential
                            .BatchCode = "BRPR-" & Me.GetSequenceID("SEQ_AM_BANK_RECON_PR")
                        Case EnumBankReconType.Settlement
                            .BatchCode = "BRSTL-" & Me.GetSequenceID("SEQ_AM_BANK_RECON_STL")
                    End Select

                    drMain("BATCH_CODE") = .BatchCode
                    drMain("TRANSACTION_DATE") = CDate(FormatDateTime(.TransactionDate, DateFormat.ShortDate))
                    drMain("TRANSACTION_TYPE") = .BankReconType
                    drMain("BEGINNING_BALANCE") = .BeginningBalance
                    drMain("UPDATED_BY") = Me.UserName
                    drMain("UPDATED_DATE") = SystemDate
                    drMain("BANK_ENDING_BALANCE") = .BankEndingBalance
                    drMain("BOOK_ENDING_BALANCE") = .BookEndingbalance
                    drMain("BANK_CHARGES") = .BankCharges
                    drMain("STATUS") = EnumStatus.Active
                End With

                dtMain.Rows.Add(drMain)
                dtMain.AcceptChanges()

                For Each itmDetails In itmBankRecon.lstBankReconDetails
                    Dim drDetails As DataRow
                    drDetails = dtDetails.NewRow

                    With itmDetails
                        If .Amount = 0 Then
                            Continue For
                        End If

                        drDetails("BATCH_CODE") = itmBankRecon.BatchCode
                        drDetails("TRANSACTION_TYPE") = .TransactionType
                        drDetails("AMOUNT") = .Amount
                        drDetails("UPDATED_BY") = Me.UserName
                        drDetails("UPDATED_DATE") = SystemDate
                    End With

                    dtDetails.Rows.Add(drDetails)
                    dtDetails.AcceptChanges()
                Next
            Next
            ds.Tables.Add(dtMain)
            ds.Tables.Add(dtDetails)
            ds.AcceptChanges()

            report = Me.DataAccess.ExecuteSaveQuery(lstSQL, ds)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub UpdateBankEndingBalance(ByVal BankEndingBalance As Decimal, ByVal BankCharges As Decimal, ByVal UpdateBatch As BankReconMain)

        Dim lstSQL As New List(Of String)
        Dim report As New DataReport
        Try

            Dim SQL As String
            SQL = "UPDATE AM_BANK_RECON_MAIN SET AM_STATUS = '" & EnumStatus.InActive & "', BANK_ENDING_BALANCE = '" & BankEndingBalance & "', UPDATED_BY = '" & Me.UserName & "', " & _
                  "BANK_CHARGES = '" & BankCharges & "', UPDATED_DATE = TO_DATE('" & FormatDateTime(SystemDate, DateFormat.ShortDate) & "', 'MM/DD/YYYY') WHERE BATCH_CODE = '" & UpdateBatch.BatchCode & "'  and TRANSACTION_TYPE = '" & UpdateBatch.BankReconType & "' "

            lstSQL.Add(SQL)
            report = Me.DataAccess.ExecuteUpdateQueryBulk(lstSQL)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

    End Sub

#End Region

#Region "Get Collection Number - Allocation Date"
    Public Function GetCollectionNumberAllocDate() As Dictionary(Of Long, Date)
        Dim result As New Dictionary(Of Long, Date)
        Dim report As New DataReport


        Try
            
            Dim SQL As String = "SELECT COLLECTION_NO, ALLOCATION_DATE FROM AM_COLLECTION " & _
                                "WHERE ALLOCATION_DATE IS NOT NULL"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionNumberAllocDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollectionNumberAllocDate(ByVal reader As IDataReader) As Dictionary(Of Long, Date)
        Dim result As New Dictionary(Of Long, Date)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(CLng(.Item("COLLECTION_NO").ToString), CDate(CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate))))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get Payment Batch Code - Allocation Date"
    Public Function GetPaymentAllocDate() As Dictionary(Of String, Date)
        Dim result As New Dictionary(Of String, Date)
        Dim report As New DataReport


        Try
            
            Dim SQL As String = "SELECT DISTINCT PAYMENT_BATCH_CODE, COLLECTION_ALLOCATION_DATE FROM AM_PAYMENT"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPaymentAllocDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPaymentAllocDate(ByVal reader As IDataReader) As Dictionary(Of String, Date)
        Dim result As New Dictionary(Of String, Date)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(CStr(.Item("PAYMENT_BATCH_CODE").ToString), CDate(CDate(FormatDateTime(CDate(.Item("COLLECTION_ALLOCATION_DATE")), DateFormat.ShortDate))))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

    Public Function GetCollectionAllocationDate() As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport


        Try
            
            Dim SQL As String = "SELECT * FROM (select distinct a.allocation_date from am_collection a, am_collection_allocation b " & _
                                                "where a.collection_no = b.collection_no and a.is_allocated = 1" & _
                                                "UNION " & _
                                                "select distinct  a.allocation_date from am_collection a, am_collection_monitoring b " & _
                                                "where a.collection_no = b.collection_no and  b.trans_type <> '" & EnumCollectionMonitoringType.TransferToHeldCollection & _
                                                "' and  b.trans_type <> '" & EnumCollectionMonitoringType.TransferToPRReplenishment & "' and a.is_allocated = 1) " & _
                                "ORDER BY ALLOCATION_DATE ASC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocationDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetCollectionAllocationDate(ByVal reader As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate)))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetRFPAllocationDate() As List(Of Date)
        Dim result As New List(Of Date)
        Dim report As New DataReport


        Try
            
            Dim SQL As String = "SELECT DISTINCT ALLOCATION_DATE FROM AM_RFP "

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetCollectionAllocationDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetRFPAllocationDate(ByVal reader As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                With reader
                    result.Add(CDate(FormatDateTime(CDate(.Item("ALLOCATION_DATE")), DateFormat.ShortDate)))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function

    Public Function GetStatementOfAccount() As List(Of StatementOfAccount)
        Dim result As New List(Of StatementOfAccount)
        Dim report As New DataReport


        Try
            
            Dim SQL As String = "SELECT * FROM AM_SOA"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetStatementOfAccount(report.ReturnedIDatareader)
            If result.Count = 0 Then
                Exit Try
            End If
            SQL = "SELECT * FROM AM_SOA_DETAILS WHERE SOA_NUMBER IN ("

            For Each itmResult In result
                SQL &= itmResult._SOANumber & ", "
            Next

            SQL = Trim(Left(SQL, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            Dim resultDetails As New List(Of StatementOfAccountMainDetails)
            resultDetails = Me.GetStatementOfAccountDetails(report.ReturnedIDatareader)

            For Each itmResult In result
                Dim _itmResult = itmResult
                Dim forDetails As New List(Of StatementOfAccountMainDetails)
                forDetails = (From x In resultDetails _
                              Where x._SOANumber = itmResult._SOANumber _
                              Select x).ToList
                itmResult._lstDetails.AddRange(forDetails)
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetStatementOfAccount(lstParticipants As List(Of String)) As List(Of StatementOfAccount)
        Dim result As New List(Of StatementOfAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_SOA WHERE ID_NUMBER IN ("

            For Each itmparticipant In lstParticipants
                SQL &= itmparticipant & ", "
            Next

            SQL = Trim(Left(SQL, Len(SQL) - 2)) & ") AND STATUS = 1"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If result.Count = 0 Then
                Exit Try
            End If

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetStatementOfAccount(report.ReturnedIDatareader)

            SQL = "SELECT * FROM AM_SOA_DETAILS WHERE SOA_NUMBER IN ("

            For Each itmResult In result
                SQL &= itmResult._SOANumber & ", "
            Next

            SQL = Trim(Left(SQL, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            Dim resultDetails As New List(Of StatementOfAccountMainDetails)
            resultDetails = Me.GetStatementOfAccountDetails(report.ReturnedIDatareader)

            For Each itmResult In result
                Dim _itmResult = itmResult
                Dim forDetails As New List(Of StatementOfAccountMainDetails)
                forDetails = (From x In resultDetails _
                              Where x._SOANumber = itmResult._SOANumber _
                              Select x).ToList
                itmResult._lstDetails.AddRange(forDetails)
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetStatementOfAccount(lstParticipants As List(Of String), DueDate As Date) As List(Of StatementOfAccount)
        Dim result As New List(Of StatementOfAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_SOA WHERE DUE_DATE = TO_DATE('" & DueDate & "', 'MM/DD/YYYY') AND ID_NUMBER IN ("

            For Each itmparticipant In lstParticipants
                SQL &= itmparticipant & ", "
            Next

            SQL = Trim(Left(SQL, Len(SQL) - 2)) & ") AND STATUS = 1"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If result.Count = 0 Then
                Exit Try
            End If

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetStatementOfAccount(report.ReturnedIDatareader)

            SQL = "SELECT * FROM AM_SOA_DETAILS WHERE SOA_NUMBER IN ("

            For Each itmResult In result
                SQL &= itmResult._SOANumber & ", "
            Next

            SQL = Trim(Left(SQL, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            Dim resultDetails As New List(Of StatementOfAccountMainDetails)
            resultDetails = Me.GetStatementOfAccountDetails(report.ReturnedIDatareader)

            For Each itmResult In result
                Dim _itmResult = itmResult
                Dim forDetails As New List(Of StatementOfAccountMainDetails)
                forDetails = (From x In resultDetails _
                              Where x._SOANumber = itmResult._SOANumber _
                              Select x).ToList
                itmResult._lstDetails.AddRange(forDetails)
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Public Function GetStatementOfAccount(DueDate As Date) As List(Of StatementOfAccount)
        Dim result As New List(Of StatementOfAccount)
        Dim report As New DataReport

        Try
            
            Dim SQL As String = "SELECT * FROM AM_SOA WHERE DUE_DATE = TO_DATE('" & DueDate & "', 'MM/DD/YYYY') AND STATUS = 1"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetStatementOfAccount(report.ReturnedIDatareader)
            If result.Count = 0 Then
                Exit Try
            End If

            SQL = "SELECT * FROM AM_SOA_DETAILS WHERE SOA_NUMBER IN ("

            For Each itmResult In result
                SQL &= itmResult._SOANumber & ", "
            Next

            SQL = Trim(Left(SQL, Len(SQL) - 2)) & ")"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            Dim resultDetails As New List(Of StatementOfAccountMainDetails)
            resultDetails = Me.GetStatementOfAccountDetails(report.ReturnedIDatareader)

            For Each itmResult In result
                Dim _itmResult = itmResult
                Dim forDetails As New List(Of StatementOfAccountMainDetails)
                forDetails = (From x In resultDetails _
                              Where x._SOANumber = itmResult._SOANumber _
                              Select x).ToList
                itmResult._lstDetails.AddRange(forDetails)
            Next

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetStatementOfAccount(ByVal reader As IDataReader) As List(Of StatementOfAccount)
        Dim result As New List(Of StatementOfAccount)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                Dim StatementItem As New StatementOfAccount
                With reader
                    StatementItem._DueDate = CDate(.Item("DUE_DATE"))
                    StatementItem._IDNumber = CStr(.Item("ID_NUMBER"))
                    StatementItem._SOADate = CDate(.Item("SOA_DATE"))
                    StatementItem._SOANumber = CLng(.Item("SOA_NUMBER"))
                End With
                result.Add(StatementItem)
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function

    Private Function GetStatementOfAccountDetails(ByVal reader As IDataReader) As List(Of StatementOfAccountMainDetails)
        Dim result As New List(Of StatementOfAccountMainDetails)
        Dim cnt As Integer = 0
        Try
            While reader.Read()
                Dim StatementItem As New StatementOfAccountMainDetails
                With reader
                    StatementItem._SOANumber = CLng(.Item("SOA_NUMBER"))
                    StatementItem._Amount = CDec(.Item("AMOUNT"))
                    StatementItem._SOAType = CType(System.Enum.Parse(GetType(EnumSOAMainType), CStr(.Item("SOA_TYPE"))), EnumSOAMainType)
                End With
                result.Add(StatementItem)
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function

    Public Sub SaveStatementOfAccount(lstSOA As List(Of StatementOfAccount), DueDate As Date, Optional OverWrite As Boolean = False)
        Dim report As New DataReport
        Dim ds As New DataSet
        Dim listSQL As New List(Of String)
        

        Try
            Dim dt As New DataTable
            Dim dt2 As New DataTable
            dt2.TableName = "AM_SOA_DETAILS"
            dt.TableName = "AM_SOA"

            Dim dicSOANumber As New Dictionary(Of Long, Long)
            For Each itmSOA In lstSOA
                dicSOANumber.Add(itmSOA._SOANumber, Me.GetSequenceID("SEQ_AM_COL_CN_NO"))
            Next

            With dt.Columns
                .Add("SOA_NUMBER", GetType(Long))
                .Add("ID_NUMBER", GetType(String))
                .Add("SOA_DATE", GetType(Date))
                .Add("DUE_DATE", GetType(Date))
                .Add("UPDATED_BY", GetType(String))
                .Add("UPDATED_DATE", GetType(Date))
                .Add("STATUS", GetType(Integer))
            End With
            dt.AcceptChanges()

            With dt2.Columns
                .Add("SOA_NUMBER", GetType(Long))
                .Add("AMOUNT", GetType(Decimal))
                .Add("SOA_TYPE", GetType(Integer))
            End With
            dt2.AcceptChanges()

            If OverWrite = True Then
                listSQL.Add("UPDATE AM_SOA SET STATUS = 0 WHERE DUE_DATE = TO_DATE('" & DueDate & "','MM/DD/YYYY')")
            End If

            Dim row As DataRow
            For Each record In lstSOA

                row = dt.NewRow()
                With record
                    row("SOA_NUMBER") = dicSOANumber(._SOANumber)
                    row("ID_NUMBER") = ._IDNumber
                    row("DUE_DATE") = DueDate
                    row("SOA_DATE") = ._SOADate
                    row("UPDATED_BY") = Me.UserName
                    row("UPDATED_DATE") = Me.GetSystemDate()
                    row("STATUS") = 1
                End With
                dt.Rows.Add(row)

                For Each item In record._lstDetails
                    Dim row2 = dt2.NewRow
                    With item
                        row2("SOA_NUMBER") = dicSOANumber(._SOANumber)
                        row2("AMOUNT") = ._Amount
                        row2("SOA_TYPE") = CInt(._SOAType)
                    End With

                    If item._Amount = 0 Then
                        Continue For
                    End If
                    dt2.Rows.Add(row2)
                Next
                dt2.AcceptChanges()
            Next
            dt.AcceptChanges()

            ds.Tables.Add(dt)
            ds.Tables.Add(dt2)
            report = Me.DataAccess.ExecuteSaveQuery(listSQL, ds)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub


#Region "GET SPAMain"
    Public Function GetSPAMain(ByVal SPANo As Long) As SPAMain
        Dim result As New SPAMain
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_SPA_MAIN WHERE SPA_NO = " & SPANo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSPAMain(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetSPAMain(ByVal dr As IDataReader) As SPAMain
        Dim objSPAMain As New SPAMain               
        While dr.Read()
            With dr
                Dim _objSPAMain As New SPAMain
                Dim AMParticipantsInfo As AMParticipants = GetAMParticipants(CStr(.Item("ID_NUMBER"))).FirstOrDefault
                _objSPAMain.ParticipantInfo = AMParticipantsInfo
                _objSPAMain.SPANo = CLng(.Item("SPA_NO"))
                _objSPAMain.FirstPaymentDate = CDate(FormatDateTime(CDate(.Item("FIRST_PAYMENT_DATE")), DateFormat.ShortDate))
                _objSPAMain.InMonths = CInt(.Item("TERMS_OF_LOAN_INMONTHS"))
                _objSPAMain.InterestRate = CDec(.Item("INTEREST_RATE"))
                _objSPAMain.TotalPrincipalAmount = CDec(.Item("TOTAL_PRINCIPAL_AMOUNT"))
                _objSPAMain.TotalInterestAmount = CDec(.Item("TOTAL_INTEREST_AMOUNT"))
                _objSPAMain.JVClosing = Me.GetSPAJV(CLng(.Item("JV_NO_CLOSING")))
                _objSPAMain.JVSetup = Me.GetSPAJV(CLng(.Item("JV_NO_SETUP")))
                _objSPAMain.SPADetailsList = Me.GetSPADetails(CLng(.Item("SPA_NO")))
                _objSPAMain.SPAMonitoringList = Me.GetSPAMonitoring(CLng(.Item("SPA_NO")))
                objSPAMain = _objSPAMain
            End With
        End While
        'ret = Me.CreateDTofSPA(SPAList)
        Return objSPAMain
    End Function

#Region "Get Journal Vouchers of SPA"
    Private Function GetSPAJV(ByVal JVNo As Long) As JournalVoucher
        Dim result As New JournalVoucher
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_JV WHERE AM_JV_NO = " & JVNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSPAJV(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetSPAJV(ByVal dr As IDataReader) As JournalVoucher
        Dim ret As New JournalVoucher
        Try
            While dr.Read()
                With dr
                    Dim item As New JournalVoucher
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    item.JVDate = CDate(FormatDateTime(CDate(.Item("AM_JV_DATE")), DateFormat.ShortDate))
                    item.BatchCode = CStr(.Item("BATCH_CODE"))
                    item.Status = CInt(.Item("STATUS"))
                    item.PreparedBy = CStr(.Item("PREPARED_BY"))
                    item.CheckedBy = CStr(.Item("CHECKED_BY"))
                    item.ApprovedBy = CStr(.Item("APPROVED_BY"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY"))
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    item.PostedType = CStr(.Item("POSTED_TYPE"))
                    item.JVDetails = Me.GetPaymentJVDetails(item.JVNumber)
                    ret = item
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function

    Public Function GetSPAJVDetails(ByVal JVNo As Long) As List(Of JournalVoucherDetails)
        Dim ret As New List(Of JournalVoucherDetails)
        Dim report As New DataReport

        Try
            Dim SQL As String = "SELECT A.* FROM AM_JV_DETAILS A " _
                                & "WHERE AM_JV_NO  = " & JVNo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            ret = Me.GetPaymentJVDetails(report.ReturnedIDatareader)

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return ret
    End Function

    Private Function GetSPAJVDetails(ByVal dr As IDataReader) As List(Of JournalVoucherDetails)
        Dim ret As New List(Of JournalVoucherDetails)
        Try
            While dr.Read()
                With dr
                    Dim item As New JournalVoucherDetails
                    item.JVNumber = CLng(.Item("AM_JV_NO"))
                    item.AccountCode = CStr(.Item("ACCT_CODE"))
                    item.Debit = CDec(.Item("DEBIT"))
                    item.Credit = CDec(.Item("CREDIT"))
                    ret.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get SPADetails"
    Private Function GetSPADetails(ByVal SPANo As Long) As List(Of SPADetails)
        Dim result As New List(Of SPADetails)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_SPA_DETAILS WHERE SPA_NO = " & SPANo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSPADetails(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetSPADetails(ByVal dr As IDataReader) As List(Of SPADetails)
        Dim ret As New List(Of SPADetails)
        Dim result As New List(Of SPADetails)
        Dim ListOfWESMBillSummaryNo As New List(Of Long)
        Try
            While dr.Read()
                With dr
                    Dim item As New SPADetails
                    ListOfWESMBillSummaryNo.Add(CLng(.Item("WESMBILL_SUMMARY_NO")))
                    item.WESMBillSummaryInfo = New WESMBillSummary(CLng(.Item("WESMBILL_SUMMARY_NO")))
                    item.BalanceAmount = CDec(.Item("BALANCE_AMOUNT"))
                    item.BalanceType = CType(System.Enum.Parse(GetType(EnumBalanceType), CStr(.Item("BALANCE_TYPE").ToString())), EnumBalanceType)
                    item.DMCMNumber = CLng(.Item("DMCM_NO"))
                    result.Add(item)
                End With
            End While

            Dim GetListofWESMBillSummary As List(Of WESMBillSummary) = Me.GetWESMBillSummary(ListOfWESMBillSummaryNo)

            For Each item In result
                Dim oWBSItem As WESMBillSummary = (From x In GetListofWESMBillSummary Where x.WESMBillSummaryNo = item.WESMBillSummaryInfo.WESMBillSummaryNo Select x).FirstOrDefault()
                If Not oWBSItem Is Nothing Then
                    item.WESMBillSummaryInfo = oWBSItem
                End If
            Next
            ret = result
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#Region "Get SPAMonitoring"
    Private Function GetSPAMonitoring(ByVal SPANo As Long) As List(Of SPAMonitoring)
        Dim result As New List(Of SPAMonitoring)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM AM_SPA_MONITORING WHERE SPA_NO = " & SPANo

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            result = Me.GetSPAMonitoring(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return result
    End Function

    Private Function GetSPAMonitoring(ByVal dr As IDataReader) As List(Of SPAMonitoring)
        Dim ret As New List(Of SPAMonitoring)
        Dim result As New List(Of SPAMonitoring)
        Dim ListOfWESMBillSummaryNo As New List(Of Long)
        Try
            While dr.Read()
                With dr
                    Dim item As New SPAMonitoring
                    ListOfWESMBillSummaryNo.Add(CLng(.Item("SPA_WESMBILL_SUMMARY_NO")))
                    item.WESMBillSummaryInfo = New WESMBillSummary(CLng(.Item("SPA_WESMBILL_SUMMARY_NO")))
                    item.MonthlyAmortization = CDec(.Item("MONTHLY_AMORTIZATION"))
                    item.MonthlyDueDate = CDate(.Item("MONTHLY_DUEDATE"))
                    item.PrincipalAmount = CDec(.Item("PRINCIPAL_AMOUNT"))
                    item.InterestAmount = CDec(.Item("INTEREST_AMOUNT"))
                    item.BalanceAmount = CDec(.Item("BALANCE_AMOUNT"))
                    item.DMCMNumber = CLng(.Item("DMCM_NO"))
                    result.Add(item)
                End With
            End While

            Dim GetListofWESMBillSummary As List(Of WESMBillSummary) = Me.GetWESMBillSummary(ListOfWESMBillSummaryNo)

            For Each item In result                
                Dim oWBSItem As WESMBillSummary = (From x In GetListofWESMBillSummary Where x.WESMBillSummaryNo = item.WESMBillSummaryInfo.WESMBillSummaryNo Select x).FirstOrDefault()
                If Not oWBSItem Is Nothing Then
                    item.WESMBillSummaryInfo = oWBSItem
                End If
            Next
            ret = result

        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return ret
    End Function
#End Region

#End Region

#Region "Get AM_WESMBILL_SUMMARY_CLOGS"
    Public Function GetWESMBillSummaryChangeLogs(ByVal _WESMBillSummaryNO As Long) As List(Of WESMBillSummaryChangeLogs)
        Dim result As New List(Of WESMBillSummaryChangeLogs)
        Dim report As New DataReport


        Try
            
            Dim SQL As String = "SELECT WESMBILL_SUMMARY_NO, CHANGE_INFO_TYPE, OLD_VALUE, NEW_VALUE, " _
                                & "TO_CHAR(UPDATED_DATE, 'MM/DD/YYYY HH24:MI:SS') AS UPDATEDDATE, UPDATED_BY " _
                                & "FROM AM_WESM_BILL_SUMMARY_CLOGS WHERE WESMBILL_SUMMARY_NO = " & _WESMBillSummaryNO

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWESMBillSummaryChangeLogs(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWESMBillSummaryChangeLogs(ByVal reader As IDataReader) As List(Of WESMBillSummaryChangeLogs)
        Dim result As New List(Of WESMBillSummaryChangeLogs)        
        Try
            While reader.Read()
                With reader
                    Using ObjWBSChangeLogs As New WESMBillSummaryChangeLogs
                        ObjWBSChangeLogs.WESMBillSummaryNo = CLng(.Item("WESMBILL_SUMMARY_NO"))
                        ObjWBSChangeLogs.ChangeInfoType = CStr(.Item("CHANGE_INFO_TYPE"))
                        ObjWBSChangeLogs.OldValue = CStr(.Item("OLD_VALUE"))
                        ObjWBSChangeLogs.NewValue = CStr(.Item("NEW_VALUE"))
                        ObjWBSChangeLogs.UpdatedDate = CStr(.Item("UPDATEDDATE"))
                        ObjWBSChangeLogs.UpdatedBy = CStr(.Item("UPDATED_BY"))
                        result.Add(ObjWBSChangeLogs)
                    End Using
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Get List of Billing Period No  in AM_WESMBILL_SUMMARY"
    Public Function GetListofBillingPeriodNo() As List(Of Integer)
        Dim result As New List(Of Integer)
        Dim report As New DataReport


        Try
            
            Dim SQL As String = "SELECT DISTINCT BILLING_PERIOD " & vbNewLine _
                              & "FROM AM_WESM_BILL_SUMMARY ORDER BY BILLING_PERIOD DESC"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetListofBillingPeriodNo(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetListofBillingPeriodNo(ByVal reader As IDataReader) As List(Of Integer)
        Dim result As New List(Of Integer)
        Try
            While reader.Read()
                With reader
                    result.Add(CInt(.Item("BILLING_PERIOD")))                    
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try

        Return result
    End Function
#End Region

#Region "Document Printing Counter"
    Public Sub SaveDocPrintingCounter(ByVal docNumber As String)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try

            SQL = "INSERT INTO AM_DOCPRINTED(ID,DOC_NUMBER,PRINT_COUNT,UPDATED_BY,UPDATE_DATETIME) " & _
                "VALUES (SEQ_AM_DOCPRINT.NEXTVAL, '" & docNumber & "', 2, '" & AMModule.UserName & "', SYSDATE)"

            listSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub UpdateDocPrintingCounter(ByVal docNumber As String)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try
            SQL = "UPDATE AM_DOCPRINTED SET PRINT_COUNT = PRINT_COUNT + 2 " & _
                "WHERE DOC_NUMBER = '" & docNumber & "'"

            listSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Function GetPrintCount(ByVal docNumber As String) As Integer
        Dim result As Integer = 0
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM  AM_DOCPRINTED " _
                            & "WHERE DOC_NUMBER = '" & docNumber & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetPrintCount(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetPrintCount(ByVal reader As IDataReader) As Integer
        Dim result As Integer = 0        
        Try
            While reader.Read()
                With reader
                    result = CInt(.Item("PRINT_COUNT"))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function

#End Region

#Region "Get WESM Bills for Billing Period Change"
    Public Function GetWBBPChange() As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_BILL_GP_POSTED A " & _
                                "WHERE NOT EXISTS (SELECT B.* FROM AM_WESM_BILL_GP_POSTED B " & _
                                                  "WHERE A.BILLING_PERIOD = B.BILLING_PERIOD And A.STL_RUN = B.STL_RUN " & _
                                                  "AND A.CHARGE_TYPE = B.CHARGE_TYPE AND A.DUE_DATE = B.DUE_DATE AND B.POSTED_TYPE = 'O') " & _
                                "AND A.POSTED_TYPE = 'U'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWBBPChange(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWBBPChange(ByVal reader As IDataReader) As List(Of WESMBillGPPosted)
        Dim result As New List(Of WESMBillGPPosted)
        Try
            While reader.Read()                
                With reader
                    Dim item As New WESMBillGPPosted
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN").ToString())
                    item.Charge = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)
                    item.Posted = CInt(.Item("POSTED"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString())
                    item.Remarks = CStr(.Item("REMARKS").ToString())
                    item.GPRefNo = CStr(.Item("GP_REFNO").ToString())
                    item.DocumentAmount = CDec(.Item("DOCUMENT_AMOUNT"))
                    result.Add(item)
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Get WESM Billing Period Change History"
    Public Function GetWBBPChangeHistory(ByVal batchCode As String) As List(Of WESMBPChangeHistory)
        Dim result As New List(Of WESMBPChangeHistory)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT A.* FROM AM_WESM_BILL_CHANGE_HISTORY A " & _
                                "WHERE A.BATCH_CODE = '" & batchCode & "'"

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            result = Me.GetWBBPChangeHistory(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return result
    End Function

    Private Function GetWBBPChangeHistory(ByVal reader As IDataReader) As List(Of WESMBPChangeHistory)
        Dim result As New List(Of WESMBPChangeHistory)
        Try
            While reader.Read()
                With reader
                    Dim item As New WESMBPChangeHistory
                    item.NewBillingPeriod = CInt(.Item("NEW_BILLING_PERIOD"))
                    item.SettlementRun = CStr(.Item("STL_RUN_TYPE").ToString())
                    item.Charge = CType(System.Enum.Parse(GetType(EnumChargeType), CStr(.Item("CHARGE_TYPE"))), EnumChargeType)                    
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.BatchCode = CStr(.Item("BATCH_CODE").ToString())
                    item.OldBillingPeriod = CInt(.Item("OLD_BILLING_PERIOD"))
                    item.UpdatedBy = CStr(.Item("UPDATED_BY").ToString())
                    item.UpdatedDate = CDate(.Item("UPDATED_DATE"))
                    result.Add(item)
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not reader.IsClosed Then
                reader.Close()
            End If
        End Try
        Return result
    End Function
#End Region

#Region "Saving WESM Bill Billing Period Changer"
    Public Sub SaveWBBPChangeHistory(ByVal data As WESMBPChangeHistory)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try

            SQL = "INSERT INTO AM_WESM_BILL_CHANGE_HISTORY(BATCH_CODE,OLD_BILLING_PERIOD,DUE_DATE,STL_RUN_TYPE,CHARGE_TYPE,NEW_BILLING_PERIOD,UPDATED_BY,UPDATED_DATE) " & _
                "VALUES ('" & data.BatchCode & "'," & data.OldBillingPeriod & ",TO_DATE('" & data.DueDate & "', 'mm/dd/yyyy'), '" & data.SettlementRun & "', '" & data.Charge.ToString & "', " & data.NewBillingPeriod & ", '" _
                        & AMModule.UserName & "', SYSDATE)"

            listSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Sub UpdateWESMBillsTable(ByVal data As WESMBPChangeHistory)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try

            SQL = "UPDATE AM_WESM_BILL SET BILLING_PERIOD =  " & data.NewBillingPeriod & _
               " WHERE BATCH_CODE = '" & data.BatchCode & "'"

            listSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
    Public Sub UpdateWESMBillGPPostedTable(ByVal data As WESMBPChangeHistory)
        Dim report As New DataReport
        Dim listSQL As New List(Of String)
        Dim SQL As String

        Try

            SQL = "UPDATE AM_WESM_BILL_GP_POSTED SET BILLING_PERIOD =  " & data.NewBillingPeriod & _
               " WHERE BATCH_CODE = '" & data.BatchCode & "'"

            listSQL.Add(SQL)

            report = Me.DataAccess.ExecuteSaveQuery(listSQL, New DataSet)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub
#End Region

#Region "Get WESM Transaction Summary"
    Public Function GetWESMTransactionAllocationSummaryDueDate() As List(Of Date)
        Dim ret As New List(Of Date)
        Dim report As New DataReport
        Try
            Dim SQL As String = "SELECT * FROM (
                                 SELECT DISTINCT DUE_DATE FROM AM_WESM_ALLOC_COVER_SUMMARY ORDER BY DUE_DATE DESC) WHERE ROWNUM <= 30"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetWESMTransactionAllocationSummaryDueDate(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Public Function GetWESMTransactionAllocationSummaryDueDate(ByVal dr As IDataReader) As List(Of Date)
        Dim result As New List(Of Date)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    result.Add(CDate(.Item("DUE_DATE")))
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
    Public Function GetListWESMTransSummary(ByVal dateFrom As Date, ByVal dateTo As Date, ByVal participantID As String) As List(Of WESMBillAllocCoverSummary)
        Dim ret As New List(Of WESMBillAllocCoverSummary)
        Dim report As New DataReport

        Try
            Dim SQL As String = ""

            If participantID.Length = 0 Then
                SQL = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine &
                                "WHERE TRANSACTION_DATE BETWEEN " & vbNewLine &
                                "TO_DATE('" & CDate(dateFrom.ToShortDateString) & "','MM/DD/YYYY') " & vbNewLine &
                                "AND TO_DATE('" & CDate(dateTo.ToShortDateString) & "','MM/DD/YYYY') "
            Else
                SQL = "SELECT A.* FROM AM_WESM_ALLOC_COVER_SUMMARY A " & vbNewLine &
                                "WHERE TRANSACTION_DATE BETWEEN " & vbNewLine &
                                "TO_DATE('" & CDate(dateFrom.ToShortDateString) & "','MM/DD/YYYY') " & vbNewLine &
                                "AND TO_DATE('" & CDate(dateTo.ToShortDateString) & "','MM/DD/YYYY') " & vbNewLine &
                                "AND STL_ID = '" & participantID & "'"
            End If

            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
            ret = Me.GetListWESMTransSummary(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
        Return ret
    End Function

    Private Function GetListWESMTransSummary(ByVal dr As IDataReader) As List(Of WESMBillAllocCoverSummary)
        Dim result As New List(Of WESMBillAllocCoverSummary)
        Dim index As Integer = 0
        Try
            While dr.Read()
                index += 1
                With dr
                    Dim item As New WESMBillAllocCoverSummary
                    item.STLRun = CStr(.Item("STL_RUN"))
                    item.BillingPeriod = CInt(.Item("BILLING_PERIOD"))
                    item.StlID = CStr(.Item("STL_ID"))
                    item.BillingID = CStr(.Item("BILLING_ID"))
                    item.NonVatableTag = CStr(.Item("NON_VATABLE_TAG"))
                    item.ZeroRatedTag = CStr(.Item("ZERO_RATED_TAG"))
                    item.WHT = CStr(.Item("WHT_TAG"))
                    item.ITH = CStr(.Item("ITH_TAG"))
                    item.NetSellerBuyerTag = CStr(.Item("NET_SELLER_BUYER_TAG"))
                    item.TransactionNo = CStr(.Item("TRANSACTION_NUMBER"))
                    item.TransactionDate = CDate(.Item("TRANSACTION_DATE"))
                    item.DueDate = CDate(.Item("DUE_DATE"))
                    item.VatableSales = CDec(.Item("VATABLE_SALES"))
                    item.ZeroRatedSales = CDec(.Item("ZERO_RATED_SALES"))
                    item.ZeroRatedEcoZoneSales = CDec(.Item("ZERO_RATED_ECOZONE_SALES"))
                    item.VatablePurchases = CDec(.Item("VATABLE_PURCHASES"))
                    item.ZeroRatedPurchases = CDec(.Item("ZERO_RATED_PURCHASES"))
                    item.NSSFlowBack = CDec(.Item("NSS_FLOWBACK"))
                    item.VatOnSales = CDec(.Item("VAT_ON_SALES"))
                    item.VatOnPurchases = CDec(.Item("VAT_ON_PURCHASES"))
                    item.EWTSales = CDec(.Item("EWT_SALES"))
                    item.EWTPurchases = CDec(.Item("EWT_PURCHASES"))
                    item.GMR = CDec(.Item("GMR"))
                    item.SpotQty = CDec(.Item("SPOT_QTY"))
                    item.MarketFeesRate = CDec(.Item("MARKET_FEES_RATE"))
                    item.Remarks = CStr(.Item("REMARKS"))
                    result.Add(item)
                End With
            End While
        Catch ex As Exception
            Throw New ApplicationException("Error in row " & index & " --- " & ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
#End Region

    Public Sub ExecuteListOfSQL(ByVal listOfSQL As List(Of String))
        Dim report As New DataReport
        Try

            report = Me.DataAccess.ExecuteSaveQuery(listOfSQL, New DataSet)

            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try
    End Sub

    Public Function GetListSummaryIDForDeletion(ByVal bp As Integer, ByVal stlRun As String) As List(Of Long)
        Dim listofSummaryId As List(Of Long)
        Dim report As New DataReport
        Dim SQL As String
        Try
            SQL = "SELECT SUMMARY_ID FROM AM_WESM_ALLOC_COVER_SUMMARY WHERE BILLING_PERIOD = " & bp & " AND STL_RUN = '" & stlRun & "' ORDER BY SUMMARY_ID"
            report = Me.DataAccess.ExecuteSelectQueryReturningDataReader(SQL)
            If report.ErrorMessage.Length <> 0 Then
                Throw New ApplicationException(report.ErrorMessage)
            End If

            listofSummaryId = Me.GetListSummaryIDForDeletion(report.ReturnedIDatareader)
        Catch ex As Exception
            Throw New ApplicationException(ex.Message)
        End Try

        Return listofSummaryId
    End Function

    Private Function GetListSummaryIDForDeletion(ByVal dr As IDataReader) As List(Of Long)
        Dim result As List(Of Long) = New List(Of Long)
        Try
            While dr.Read()
                With dr
                    result.Add(CLng(.Item("SUMMARY_ID")))
                End With
            End While
        Catch ex As ApplicationException
            Throw New ApplicationException(ex.Message)
        Finally
            If Not dr.IsClosed Then
                dr.Close()
            End If
        End Try
        Return result
    End Function
End Class
